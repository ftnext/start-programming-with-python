順次・分岐・反復の力試し（FizzBuzz）
================================================

.. ref: https://pycamp.pycon.jp/textbook/2_intro.html

この節では、順次・分岐・反復を使ってプログラムを1つ作ります。
プログラミングの練習によく使われる問題「FizzBuzz」（読み：フィズバズ）を解くプログラムです。

FizzBuzzとは
--------------------------------

FizzBuzzは複数人で遊ぶゲームです。
1から30までの数を順番に1つずつ交互に言っていきます。
ただし、以下の条件を満たす数の場合は、数ではなく別の言葉を言う必要があります。

- 3の倍数のとき、Fizzと言う
- 5の倍数のとき、Buzzと言う
- 3の倍数かつ5の倍数のとき、FizzBuzzと言う

上記3つのルールに反した人が負けになります。
6のときに「Fizz」ではなく「6」と言ってしまったり、10のときに「Buzz」と間違えて「Fizz」と言ってしまったりするとルール違反で負けです。
ルール違反なく30まで到達すると、プレイヤーは得も言われぬ達成感に包まれます。

うまくいっている例は、以下のような感じです。

- Aさん「1」
- Bさん「2」
- Cさん「Fizz」
- Dさん「4」
- Aさん「Buzz」
- Bさん「Fizz」
-  :

ちなみに「Fizz」は炭酸の気泡のようにシューシューいう音で、
「Buzz」はハチや機械がブンブンいう音を表します。

プログラミングの練習問題としてのFizzBuzzは、1人で遊ぶ形になります。
1人で1から30の数値を上記のルールを満たすように言って（＝画面に表示して）いきます。
FizzBuzzをルール違反なく遊ぶプログラムを作って、プレイヤーの処理系を得も言われぬ達成感に包みましょう！

本書で解説したプログラムの3大構造を理解していれば、FizzBuzzは十分に解けます。
次の項から解説を始めますが、**「ここまで分かれば後は自力で書けるかも」と思えたら、本を閉じて手を動かす** ことをおすすめします。

以下の手順で、FizzBuzzを解くプログラム ``fizzbuzz.py`` を作ります。

1. 1から30までを順に表示するプログラムを作る
2. 3の倍数のとき、Fizzを表示するように変更
3. 5の倍数のとき、Buzzを表示するように変更
4. 3の倍数かつ5の倍数のとき、FizzBuzzを表示するように変更

1から30までを順に表示する
--------------------------------

この項目は手を動かさずに読むことをおすすめします。
新しく解説する項目があるからです。

「1から30までを順に表示」と聞いてどんな方法が思い浮かぶでしょうか？
``for`` 文と1から30までの整数が順にまとまったリストがあれば実現できそうですね。

1から30までの整数を1つずつ書いてリストを作るのは大変ですよね。
そんなときは、関数 ``range`` が使えます。
``range`` 関数も、複数の値を扱う仕組みの1つです。

.. list-table:: 複数の整数を並べる関数
    :align: center

    * - 箱の名前
      - ``range``
    * - 箱は何をするか
      - 1,2,3,...のように整数を並べる
    * - 箱に入れるもの
      - 整数2つ（1つ目が始めを表し、2つ目が終わりを表す。始めは含むが、終わりは含まない）
    * - 箱から出てくるもの
      - 整数の並び（リストのように扱える）

.. https://docs.python.org/ja/3/tutorial/controlflow.html#the-range-function
    range() が返すオブジェクトは、いろいろな点でリストであるかのように振る舞いますが、本当はリストではありません。
.. 組み込み型の説明は詳しすぎという印象 https://docs.python.org/ja/3/library/stdtypes.html#range

``for`` 文の練習では、リスト ``[1, 2, 3]`` から値を繰り返し表示するプログラムを書きましたね。
これは ``range`` 関数を使っても書けます。

.. literalinclude:: codes/6-3/renshu_for_range.py
    :language: python
    :caption: renshu_for.py
    :linenos:
    :emphasize-lines: 2

``range(1, 4)`` は、**1から3までの整数の並び** を返します。
これは、リスト ``[1, 2, 3]`` と同じように ``for`` 文で使えます。
``range`` 関数の第2引数より1小さい数までという点に注意しましょう。

``range`` 関数を使って、1から30までを順に表示しましょう
（やり方に見当がついている方は本を閉じて手を動かしてみてください）。

.. literalinclude:: codes/6-3/fizzbuzz_step0.py
    :language: python
    :caption: fizzbuzz.py
    :linenos:

コマンドラインで動作確認しましょう。

.. code-block:: shell

    > python fizzbuzz.py
    1
    2
    3
    4
    5
    : (省略)
    28
    29
    30

1から30までの整数が順番に表示されました！

3の倍数のとき、Fizzを表示する
--------------------------------

この項目も手を動かさずに読むことをおすすめします（新しく解説することがあります！）。

続いて、3の倍数のとき、Fizzと表示するようにプログラムを変更します。
これは分岐を使えばいいですね。

- 3の倍数であれば、Fizzを表示する
- 3の倍数でなければ、その数を表示する

では、「**3の倍数** である」を表す式はどうなるでしょうか。
3の倍数とは、「3で割った時に割り切れる（**余りが0** になる）数」です。

プログラミング言語には、数を **割った余り** を求める演算子が用意されています。
数 ``a`` を 数 ``b`` で割った余りは ``a % b`` で計算できます。

.. data_integer_srtingにて、割り算の余りで示したほうが分かりやすいというコメントを受けた
    code-blockではLaTeXの数式表記が使えないように思われるので、変換を使って数式を表している

.. code-block:: python

    >>> 4 % 3  # ((4 ÷ 3 = 1 ・・・ 1))
    1
    >>> 5 % 3  # ((5 ÷ 3 = 1 ・・・ 2))
    2
    >>> 6 % 3  # ((6 ÷ 3 = 2 ・・・ 0))
    0

3で割った余りが0かどうか比較することで、3の倍数かどうかを判定できます
（やり方に見当がついている方は本を閉じて手を動かしてみてください）。

.. literalincludeはこのファイルをincludeしている03-getting-started/index.rstから見た相対パスで機能する

.. literalinclude:: codes/6-3/fizzbuzz_step1.py
    :language: python
    :caption: fizzbuzz.py
    :linenos:

``i % 3 == 0`` という式（数 ``i`` を ``3`` で割った余りが ``0`` と **等しい**）で
3の倍数かどうか判定します。
動作確認しましょう。

.. code-block:: shell

    > python fizzbuzz.py
    1
    2
    Fizz
    4
    5
    : (省略)
    28
    29
    Fizz

3の倍数の時にFizzと表示するようになりました！

練習問題1：5の倍数のとき、Buzzを表示する
----------------------------------------------------------------

この項目はぜひ本を閉じて、手を動かしてみてください。

ヒント：5の倍数のとき、Buzzと表示するのは、3の倍数のときを参考にすればいいですね。

.. answer::

    ``fizzbuzz.py`` の分岐を増やします。

    - 3の倍数であれば、Fizzを表示する
    - 3の倍数ではないが5の倍数であれば、Buzzを表示する
    - 3の倍数でも5の倍数でもなければ、その数を表示する

    .. literalinclude:: codes/6-3/fizzbuzz_step2.py
        :language: python
        :caption: fizzbuzz.py
        :emphasize-lines: 4-5
        :linenos:

    以上で、5の倍数のときにBuzzと表示されるようになります。

    .. code-block:: shell

        > python fizzbuzz.py
        1
        2
        Fizz
        4
        Buzz
        : (省略)
        28
        29
        Fizz

最後の ``30`` は3の倍数であり、5の倍数でもあります。
分岐では、**まず3の倍数か確認** し、``30`` は3の倍数と判定されるので、Fizzと表示されていますね。
次はいよいよ、ここをFizzBuzzという表示に変えます！

練習問題2：3の倍数かつ5の倍数のとき、FizzBuzzを表示する
------------------------------------------------------------------------------------------------

この項目もこれまでに学んだことで進められます。
本を閉じて、手を動かしてみてください。

ヒント：「3の倍数かつ5の倍数」とは、「15の倍数」と同じです。
15の倍数と考えると、3の倍数や5の倍数のときと同じようにプログラムを書けそうですよね。

.. answer:: ``elif`` で分岐を追加すると？

    15の倍数のときの分岐を追加してみます（6, 7行目）。

    .. literalinclude:: codes/6-3/fizzbuzz_step3.py
        :language: python
        :caption: fizzbuzz.py（15の倍数の分岐を追加）
        :emphasize-lines: 6-7
        :linenos:

    「できた！」と思って動作確認をすると・・・

    .. code-block:: shell

        > python fizzbuzz.py
        1
        2
        Fizz
        4
        Buzz
        : (省略)
        28
        29
        Fizz
    
    最後の数字 ``30`` は15の倍数なので、FizzBuzzと表示するルールです。
    ところが、現在のプログラムはFizzと表示していて、ルールに違反しています（負けてしまいました）。
    
    なぜこのような動きになっているか理解し、ルールを守るようにプログラムを直しましょう。

現在の分岐（``fizzbuzz.py`` 2〜9行目）は以下のようになっています。

.. TODO プログラムと対応するように図示できたらより分かりやすそう

- 3の倍数であれば、Fizzを表示する
- 3の倍数ではないが5の倍数であれば、Buzzを表示する
- 3の倍数でも5の倍数でもないが15の倍数であれば、FizzBuzzを表示する
- 3の倍数でも5の倍数でも15の倍数でもなければ、その数を表示する

この分岐が、30のような15の倍数をどのように処理するか考えましょう。
*30は3の倍数* なので、``fizzbuzz.py`` の2,3行目によりFizzを表示しますね。
FizzBuzzを表示する分岐が実行されることはないのです。

修正案が浮かんでいたら、続きを読む前に試してみてください。

.. answer::

    15の倍数の判定を一番最初に（``if`` の直後の式で）実施するように分岐を修正します。

    **15の倍数は3の倍数でも5の倍数でもある** ので、15の倍数かどうかは最初に判定する必要があるのです。
    逆に15の倍数でないとき、その数は3の倍数または5の倍数のいずれかかもしれません。
    これらを判定する分岐は、``elif`` で追加すれば十分です。

    .. literalinclude:: codes/6-3/fizzbuzz.py
        :language: python
        :caption: fizzbuzz.py（正解例）
        :emphasize-lines: 2-3
        :linenos:

    動作確認しましょう。

    .. code-block:: shell

        > python fizzbuzz.py
        1
        2
        Fizz
        4
        Buzz
        : (省略)
        28
        29
        FizzBuzz

    30の行の表示がFizzBuzzになっています!
    また、手元で15の行の表示も確認してみてください。

    以上でFizzBuzzを解くプログラムは完成です。

最後に紹介したプログラムが一発で書けるのを目標に何回か取り組んでみてください。

実はFizzBuzzはプログラムが書けない面接候補者をふるい落とすために15年前くらいから使われ始めたという出自があります。
FizzBuzzが独力で解けるようになったら、「プログラマーとしての基礎の力は身に付いた！」と自信を持ってください。

.. ref: http://www.aoky.net/articles/jeff_atwood/why_cant_programmers_program.htm

.. column:: あとは順次・分岐・反復を使う練習あるのみ！

    順次・分岐・反復を使ってFizzBuzzのプログラムを書きました。
    **どんなプログラムでも**、それを形作る **構造** は、FizzBuzzのプログラムと共通の **順次・分岐・反復** です。
    ここまで読み進めてきた皆さん、あとはプログラムを書く練習あるのみです！

    続く2つの章は、この本の残りを読み進める上で必要になる事項の紹介です。
    ですが、すぐにでも練習したいという方は、実際に使えるプログラムを作る他書に進み、
    必要になったタイミングで戻ってくるという読み方でもかまいません。
