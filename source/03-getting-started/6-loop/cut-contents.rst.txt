============================
3大構造 三. 反復
============================

.. for文の節で説明するので、リード文からカット

Pythonでは、複数の値を扱う仕組みとして「リスト」が用意されています。

``for`` 文による繰り返し
============================

リスト
------------------------------------

.. 複数の値をまとめるについてはリライトした。元の文を退避

本書ではここまで一度に一つの値だけを扱ってきましたが、プログラマーは **複数の値をまとめて扱う** こともあります。
Pythonではリストというものを使って、複数の値をまとめて扱います。

``for`` 文
------------------------------------

.. 入門時点では、変数の上書きは意識しないと思われるのでカットする（気にかけるものが少ないほうが望ましい）

変数名は、``for`` 文より前のコードにある変数名でも、新しく定義する変数名でもかまいません。
``for`` 文より前に定義した変数名の場合、``for`` 文の実行で指す値が更新されます。
指す値を変えたくない場合は、新しく定義しましょう。

.. 変数に代入した値を使わないfor文はあまり書かないので削る

.. literalinclude:: codes/6-2/renshu_for_step1.py
    :language: python
    :caption: renshu_for.py
    :linenos:

実行すると、コマンドラインには次のように表示されます。

.. code-block:: shell

    $ python renshu_for.py
    for文の練習プログラムを開始します
    ごきげんよう
    ごきげんよう
    ごきげんよう
    プログラムを終了します

「ごきげんよう」が3回表示されました。

プログラムは1行目の ``print`` 関数を実行した後、2, 3行目の ``for`` 文に進みます。
変数 ``i`` に代入する値に注目すると、次のように動作します。

.. list-table:: ``renshu_for.py`` における繰り返し
    :align: center

    * - ``i`` の指す値
      - ``for`` の処理
    * - ``1`` （先頭）
      - ``"ごきげんよう"`` を表示
    * - ``2`` （次の値）
      - ``"ごきげんよう"`` を表示
    * - ``3`` （次の値）
      - ``"ごきげんよう"`` を表示
    * - （リストの末尾に達していて、次の値はない）
      - （``for`` 文の後の4行目に進む）

.. figure:: images/9/9-20_for_image.drawio.png
    :align: center
    :width: 80%

    リストに次の要素がある限り ``i`` として取り出して繰り返し、次がなくなったら続く処理へ

リストにある値の数（3つ）だけ、``"ごきげんよう"`` を表示する処理が繰り返されました。

.. figure:: images/9/9-8_for_1.drawio.png
    :align: center

    ``i`` が ``1`` を指す状態で、3行目が実行される

.. figure:: images/9/9-9_for_2.drawio.png
    :align: center

    再度 ``for`` の行（2行目）に戻り、``i`` が次の ``2`` を指す状態で、3行目が実行される

.. figure:: images/9/9-10_for_3.drawio.png
    :align: center

    三度 ``for`` の行に戻り、``i`` が次の ``3`` を指す状態で、3行目が実行される

.. figure:: images/9/9-11_for_4.drawio.png
    :align: center

    ``for`` の行に戻るが、リストに次の値がなくなったので、``for`` 文の次のコードに進む

.. 直接紹介するので、カット

``for`` 文の処理では、**変数** ``i`` **を使ったコードを書く** ことができます。

.. 「ごきげんよう」3回の例にならって繰り返しが分かるようにバラした図にした

.. figure:: images/9/9-21_for_image2.drawio.png
    :align: center
    :width: 80%

    リストに次の要素がある限り ``i`` として取り出して処理を繰り返し、次がなくなったら続く処理へ

.. figure:: images/9/9-12_for_variable_1.drawio.png
    :align: center

    ``i`` が ``1`` を指す状態で、3行目が実行され、続けて ``i`` が ``2`` を指す状態で、3行目が実行される

.. figure:: images/9/9-14_for_variable_3.drawio.png
    :align: center

    ``i`` が ``3`` を指す状態で、3行目が実行され、リストに次の値がなくなったので、``for`` 文の次のコードに進む

.. Pythonではforとwhileの書き換えはしないので、コラムをカット

.. column:: 「決まった回数の繰り返し」は ``while`` 文でも書ける

    ``for`` 文を使って「ごきげんよう」を3回出力するプログラムを見ました。
    決まった回数の処理の繰り返しは ``for`` 文の専売特許というわけではなく、 ``while`` 文でも書けます。

    .. literalinclude:: codes/6-2/renshu_while.py
        :language: python
        :caption: renshu_while.py
        :linenos:

    .. list-table:: 本コラムの ``renshu_while.py`` における繰り返し
        :align: center

        * - ``i`` の指す値
          - ``while`` の条件 ``i < 3``
          - ``while`` の処理が行われるか
          - ``while`` の処理
        * - ``0``
          - ``True``
          - ◯
          - ``"ごきげんよう"`` を表示。``i`` は ``1`` を指す
        * - ``1``
          - ``True``
          - ◯
          - ``"ごきげんよう"`` を表示。``i`` は ``2`` を指す
        * - ``2``
          - ``True``
          - ◯
          - ``"ごきげんよう"`` を表示。``i`` は ``3`` を指す
        * - ``3``
          - ``False``
          - ×
          - 実行されない

    .. code-block:: shell

        $ python renshu_while.py
        ごきげんよう
        ごきげんよう
        ごきげんよう

    変数 ``i`` の指す値を ``0`` から始めて ``1`` ずつ増やしていくと、
    ``0``, ``1``, ``2``, ``3``, ... と増えていきます。
    今回は3回繰り返したいので、``i`` の指す値が ``2`` まで繰り返しを実行すればいいですね。
    そこで条件式は ``i < 3`` または ``i <= 2`` となります。

.. for文で変数を使わない例を紹介しないので、コラムをカット

.. column:: 反復によりコードを繰り返し書かなくて済む

    「ごきげんよう」を3回表示するのであれば、``for`` や ``while`` を使わなくても実現できますね。

    .. literalinclude:: codes/6-2/write_three_times.py
        :language: python
        :caption: ``for`` や ``while`` を使わずに3回表示する例
        :linenos:

    このように素直に繰り返しコードを書く場合と、繰り返しを使う場合の違いは何でしょうか。

    繰り返しの回数が3回から5回に増えたとします。
    このとき、``for`` 文を使った例では、リストを ``[1, 2, 3, 4, 5]`` と変えればいいでしょう。
    プログラムの全行数は変わりません。
    それに対して、素直に書く場合は2行追加する必要があります。

    極めつけは繰り返しの回数が100回のように増えたときです。
    素直に書く場合は ``print("ごきげんよう")`` を100回書くことになります。
    書いたものをコピー&ペーストすればなんとかなるかもしれませんが、これはさすがにやりたくありませんよね。

    繰り返しの回数が多いときは ``for`` 文や ``while`` 文を使った方が明らかに書きやすいです。
    ``while`` 文で100回繰り返すには、変数 ``i`` を ``0`` から始めて ``1`` ずつ増やし、条件式を ``i < 100`` とすれば実現できます。
    ``for`` 文を使う場合、100個の値からなるリストが必要ですが、この作り方は後ほど紹介します。

    **コードを繰り返し書い** ていたら、**反復** を使ってみてくださいね。

``while`` 文を使って、条件を満たす限り繰り返す
========================================================

条件を満たす限り繰り返す
------------------------------------

.. forで書き換えられる例をwhileの例に使わないことにしたのでカット

順次によりプログラムは1行目から実行されます。
変数 ``i`` が指す値は ``0`` となり（2行目）、3行目から5行目の ``while`` 文に進みます。

この ``while`` 文は ``i`` が ``10`` より小さい（``i < 10``）限り繰り返します。
``while`` 文の処理が実行されると、現在 ``i`` が指す値が表示され（4行目）、
``i`` の指す値を ``2`` 増やした値に更新します（5行目）。

``i`` の指す値に注目すると、以下のように動作します。

.. list-table:: ``renshu_while.py`` における繰り返し
    :align: center

    * - ``i`` の指す値
      - ``while`` の条件 ``i < 10``
      - ``while`` の処理が行われるか
      - ``while`` の処理
    * - ``0``
      - ``True``
      - ◯
      - ``0`` を表示。``i`` は ``2`` を指す
    * - ``2``
      - ``True``
      - ◯
      - ``2`` を表示。``i`` は ``4`` を指す
    * - ``4``
      - ``True``
      - ◯
      - ``4`` を表示。``i`` は ``6`` を指す
    * - ``6``
      - ``True``
      - ◯
      - ``6`` を表示。``i`` は ``8`` を指す
    * - ``8``
      - ``True``
      - ◯
      - ``8`` を表示。``i`` は ``10`` を指す
    * - ``10``
      - ``False``
      - ×
      - 実行されない

``i`` が ``10`` を指すとき、``while`` の条件式は ``False`` となり、``while`` 文の後に続く処理が実行されます（6行目）。
そしてプログラムは終了します。
``i`` が ``10`` を指すとき ``while`` の処理は実行されないので、画面に ``10`` やそれ以降の数字は現れません。

このように ``i`` の値を ``0`` から始めて ``2`` ずつ増やしながら、``i < 10`` が成り立つ限り繰り返しました。
画面には ``0`` から始めて ``2`` 刻みで、``10`` には満たない値が表示されています。
条件式に使われている変数（ここでは ``i``）の指す値を処理の中で変えるのは ``while`` 文でよく見られる書き方です。

.. figure:: images/9/9-7_while_image.drawio.png
    :align: center
    :width: 60%

    ``i < 10`` が成り立つ限り繰り返し、成り立たなくなったら次の処理へ

プログラムのどの部分が繰り返し実行されるのかも確認しましょう。
プログラムを動かさなくても、変数がどんな値を指した状態で、**プログラムがどの順番で実行されるか**
（そしてどんな表示がされるか）、**イメージできる** のはプログラマーにとってとても重要です。
``while`` 文でコードが繰り返し実行されているイメージを刷り込み、``while`` 文を見たら何回繰り返されるか答えられるようになってください。

.. TODO：AtomのスクショはA5だと文字が小さくなっているため要リテイク（カットしたので対応不要）

.. figure:: images/9/9-1_while_1.drawio.png
    :align: center

    ``i`` が ``0`` を指すとき、条件が成り立つので、処理を実行する

.. figure:: images/9/9-2_while_2.drawio.png
    :align: center

    ``i`` が ``2`` を指すとき、条件が成り立つので、処理を実行する

.. figure:: images/9/9-3_while_3.drawio.png
    :align: center

    ``i`` が ``4`` を指すとき、条件が成り立つので、処理を実行する

.. figure:: images/9/9-4_while_4.drawio.png
    :align: center

    ``i`` が ``6`` を指すとき、条件が成り立つので、処理を実行する

.. figure:: images/9/9-5_while_5.drawio.png
    :align: center

    ``i`` が ``8`` を指すとき、条件が成り立つので、処理を実行する

.. figure:: images/9/9-6_while_6.drawio.png
    :align: center

    ``i`` が ``10`` を指すとき、条件が成り立たないので、``while`` 文の次のコードに進む

.. forで書き換えられる例をwhileの例に使わないことにして、前の例と繋がりが悪いのでカット

練習問題
------------------------------------

「ボスのHPが0になるまで攻撃を繰り返す」をプログラミングで表現してみましょう。

ボスのHPは最初100あるとします。
攻撃するたびにHPを7減らすとします。
ボスからの反撃は考慮する必要はなく、こちらから連続して攻撃できる状況です。

ヒント：HPがちょうど0にはなりません。そこで、0 **以下** になるまで攻撃を繰り返すと考えましょう。

.. column:: 解答

    想定している正解例は以下のようになります（``renshu_while.py`` を書き換えました）。

    .. literalinclude:: codes/6-1/renshu_while_practice.py
        :language: python
        :caption: renshu_while.py
        :linenos:

    「ボスのHPが0以下になるまで攻撃を繰り返す」を言い換えると、「HPが0より大きい限り、攻撃（ボスのHPを7ずつ減らす）を繰り返す」ということです。
    ``while`` 文の条件式は「ボスのHPが0より大きい」、処理は「ボスのHPを7減らす」となります。
    これが2〜4行目のコードです。

    4行目の ``hp -= 7`` は変数 ``hp`` の指す値を ``7`` だけ減らす書き方ですが、``hp = hp - 7`` と書いても同じです。
    また、3行目と5行目の ``print`` 関数はなくても正解です。

    ボスのHPが0より大きい限り（0以下になるまで）攻撃することを確認しましょう。

    .. code-block:: shell

        $ python renshu_while.py
        ボスの残りHP 100
        ボスの残りHP 93
        ボスの残りHP 86
        ボスの残りHP 79
          : (表示を省略)
        ボスの残りHP 23
        ボスの残りHP 16
        ボスの残りHP 9
        ボスの残りHP 2
        ボスを倒しました！

.. 続くコラムはリライトして文章量を削った。元の文章を退避

.. column:: 無限ループとその止め方

    ``while`` 文を書き間違えて変数の更新を忘れ、条件式が常に ``True`` となってしまうことがあります。
    具体的には以下のようなコードです。

    .. literalinclude:: codes/6-1/infinite_loop.py
        :language: python
        :caption: renshu_while.py（無限ループの例）
        :linenos:

    ``while`` の処理の中で変数 ``i`` が指す値を更新していないため、``i`` が指す値は ``0`` から変わりません。
    そのため、条件式 ``i < 10`` は常に ``True`` となり、処理が際限なく繰り返されます。

    上記のコードを実行した場合など、ある処理が際限なく繰り返される事象を「無限ループ」と呼びます。
    無限に繰り返し（＝ループ）で無限ループです。

    実行前に無限ループに気づければいいのですが、巡り合わせが悪く、実行してから無限ループに気づくこともあります。
    上の例のように、処理の中で ``print`` 関数を実行している場合、コマンドラインには次々に表示されます。
    これは **キーボードを操作して止める** ことができます。
    2つのキー **[Ctrl] + [C]** を押してください（WindowsでもmacOSでも共通です）。

    .. code-block:: shell

        $ python renshu_while.py
        0
        0
        :  # 表示を省略
        0
        ^C0
        0
        0
        Traceback (most recent call last):
        File "renshu_while.py", line 3, in <module>
            print(i)
        KeyboardInterrupt

    ``^C`` という表示がコントロールキーとCキーを同時に押したことを表します。
    この2つのキーを押すと、実行中のプログラムに ``KeyboardInterrupt`` （例外の一種）が送られ、実行が終了します。
    実行を止めたら原因箇所を修正しましょう。

    .. ref: https://docs.python.org/ja/3/library/exceptions.html#KeyboardInterrupt

    無限ループは「やってしまった」と血の気が引く思いをするものですが、[Ctrl] + [C] で止められます。

順次・分岐・反復の力試し（FizzBuzz）
================================================

1から30までを順に表示する
--------------------------------

.. rangeはPython固有なので深く立ち入らないことにする

リストではないですが、**リストに似ている** ので ``for`` 文で使うことができます。

「リストのようなもの」と書いたのは、``range`` 関数の返り値の型がリスト（``list``）ではないからです
（リストについて詳しくは次章で紹介します）。

.. code-block:: python

    >>> range(1, 31)
    range(1, 31)
    >>> type(range(1, 31))  # type関数については「関数」の章のコラム参照
    <class 'range'>

.. column:: なぜ ``range`` 関数の返り値はリストではないのか

    これはもっともな疑問です。
    理由は、リストにしないことで、**コンピューターの資源** （リソース） **をより効率的に使える** というメリットがあるためです。
    ここでは深く立ち入りませんが、簡単に解説します（このコラムがよく分からなくても ``range`` 関数を使うということだけ覚えていただければ大丈夫です）。

    リストを使う場合、含む値を全て列挙する必要があります。
    プログラム実行中にリストに含む値を保持するのに、コンピューターの資源を使います。
    数千、数万の要素からなるリストになると、コンピューターの資源を多く使うわけです。

    それに対して ``range`` 関数の返り値は、作るときに要素を全て列挙する必要がないリストです。
    ``range`` 関数の返り値は、最初と終わりの整数を保持しておき、次にくる値（1増やした値）を返すというように振る舞います。
    リストと比べて保持する値が少なく、コンピューターの資源を少なく使えて効率的というわけです。

    .. https://docs.python.org/ja/3/tutorial/controlflow.html#the-range-function
        しかし実際にリストを作るわけではないので、スペースの節約になります。
    .. https://docs.python.org/ja/3/library/stdtypes.html#range
        range 型が通常の list や tuple にまさる点は、range オブジェクトがサイズや表す範囲にかかわらず常に一定の (小さな) 量のメモリを使うことです
         (start、stop、step の値のみを保存し、後は必要に応じて個々の項目や部分 range を計算するためです)。

練習問題2：3の倍数かつ5の倍数のとき、FizzBuzzを表示する
------------------------------------------------------------------------------------------------

.. バグはblackjackで紹介するので、文法からは削る

.. column:: 解答

    最後の数字 ``30`` は15の倍数なので、FizzBuzzと表示されるのが期待されます。
    ところが、現在のプログラムはFizzと表示していて、**期待される結果と一致しません**。
    つまり、現在のコードには **バグ** があるわけです。

    バグの原因に見当がつき、「ここをこう直すのかな」と修正案が思いついたら試してみてください。
    この本を終えてプログラミングに取り組んでいく中でバグは常に出てきます。
    **バグの原因を特定し、修正するという経験を繰り返す** ことでプログラマーとしての力がついていきます。
    
    ここでのバグは「15の倍数として処理を行ってほしいのに、3の倍数として処理を行っている」というものです。
    バグは分岐に潜んでいそうですね。

.. 文章量削減のためカット（tel_templateで関数を導入するので、読者の気付きに任せる）

独力で書けるようになったら、関数を使って書いてみてもいいでしょう
（分岐しているところを関数にして、``print`` に渡す文字列や数を返すようにできます）。

.. 反復のまとめはカット

この章では、プログラムの3大構造の反復を学びました。
Pythonでは、``while`` 文を使う方法と、``for`` 文とリストを使う方法の2通りがあります。
