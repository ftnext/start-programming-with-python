.. _loop:

============================
3大構造 三. 反復
============================

この章では、プログラムの3大構造の3つ目「反復（はんぷく）」を学びます。
反復とは「**繰り返し**」です。

.. 手元の『基本情報技術者教科書 平成28年度』
    「繰返し型（反復型、ループ）は、繰返し条件を満たしている間、
    あるいは終了条件を満たすまで、処理を繰り返す制御構造」(p.107)

反復には2つのパターンがあります。

1. **決まった回数**、ある処理を繰り返す
2. **条件を満たす限り**、ある処理を繰り返す

どちらも、ふだんの生活に例があります。
1の例は、「知人1人1人について、住所と宛名を変えながら年賀状を印刷する」ケースです。
知人の人数だけ繰り返します。
2の例は、ゲームで「ボスのHP（ヒットポイント）が0になるまで攻撃を繰り返す」ケースです。

反復を実現するのに、次のものを使います。

1. 決まった回数、ある処理を繰り返す → ``for`` 文と、複数の値を扱う仕組み
2. 条件を満たす限り、ある処理を繰り返す → ``while`` 文

順番に見ていきましょう。

.. _loop__for:

``for`` 文を使って、決まった回数繰り返す
========================================================

「決まった回数、ある処理を繰り返す」のに使うのは、次の2つです。

- リスト
- ``for`` 文

リスト
------------------------------------

リストの説明は、反復に必要な範囲の説明に留めています。
次の :numref:`list` 「:ref:`list`」で詳しく紹介します。

リストは、**複数の値をまとめた値** です。
数値や文字列は1つの値でした。
複数の数値や文字列をまとめるのに、リストを使います。

リストは複数の値を ``[]`` で囲んで書きます。
複数の値はカンマ（``,``）で区切って ``[]`` の中に並べます。

.. ref: https://docs.python.org/ja/3/tutorial/introduction.html#lists
    複合 (compound) データ型

対話モードで、リストを作ってみましょう。
複数の数値 ``1`` 、 ``2`` 、 ``3`` をまとめて扱うリストです。

.. code-block:: python

    >>> [1, 2, 3]
    [1, 2, 3]

続いて、複数の文字列をまとめて扱うリストです。

.. code-block:: python

    >>> ["吾輩は猫である", "坊っちゃん"]
    ['吾輩は猫である', '坊っちゃん']

.. column:: リストでカンマの後ろに半角スペースを入れるのはなぜ？

    リストにまとめた値を区切るカンマの後ろに半角スペースを入れなくても、できあがるリストに違いはありません。

    .. code-block:: python

        >>> [1,2,3]
        [1, 2, 3]

    **プログラムを読みやすくするため** に、半角スペースが入れられます。
    本書でもカンマの後ろに半角スペースを入れます。

``for`` 文
------------------------------------

``for`` 文も文の1種で、別の文を含められる文です。
以下のように書きます。

.. code-block:: python

    for 変数 in リスト:  # ((半角スペースが1つずつ入ります。また、コロンを忘れずに！))
        処理（文（の並び））  # ((先頭のインデントを忘れずに！))

リストにまとめられた値を **1つ1つ変数に代入し、処理を繰り返し** ます。

処理は何行でも（1行だけでも100行でも）書けますが、インデントを揃える必要があります
（1行でもインデントが異なると ``IndentationError`` となります）。

リストにまとめられた値が、``for`` 文で変数に代入される様子を例で見てみましょう。

.. code-block:: python

    for i in [1, 2, 3]:
        変数iを使った処理

リストでは、左が先頭で右が末尾と、**左から右** の順で値が並んでいます。
``[1, 2, 3]`` の場合は、``1`` が先頭で、``2`` がその次、``3`` が末尾です。

``for`` 文で変数に代入するときは、リストにまとめられた値の順番に従います。
**リストの先頭からはじめて、次の値、次の値** と代入されます。

1. まず ``i`` に ``1`` を代入して処理を行います。
2. 続いて ``i`` に次の ``2`` を代入して処理を行い、
3. さらに ``i`` に次の ``3`` を代入して処理を行います。

処理の中で変数 ``i`` を評価すると、指す値がリストの順番に沿って変わるのです。

リストの末尾に達し、**変数に代入する次の値がなくなったら**、``for`` 文に続く処理に進みます。

.. Pythonicな（Python の特に一般的なイディオムに従った）for 文の説明をしている。
    他の言語では forEach や for...in にあたる説明かもしれないが、Pythonでプログラミングに入門するこの本ではこれで行く
    以下、Pythonのfor文の裏付け
    listはsequence（＝要素アクセスと長さのあるiterable）
    ref: https://docs.python.org/ja/3/glossary.html#term-sequence
    iterableが与えられると、for文では「一時的な無名の変数を作成してループを回している間イテレータを保持」する
    ref: https://docs.python.org/ja/3/glossary.html#term-iterable
    iteratorは要素が尽きたらStopIterationを送出
    https://docs.python.org/ja/3/glossary.html#term-iterator
    for文は「イテレータが与えるそれぞれの要素に対して、イテレータから返された順に一度づつ、スイートが実行」（スイート＝処理のコードブロック）
    「(シーケンスが空であったり、イテレータが StopIteration 例外を送出したときは、即座に)、 else 節があればそれが実行され、ループは終了します。」
    https://docs.python.org/ja/3/reference/compound_stmts.html#for

Atomで ``renshu_for.py`` というファイルを作りましょう。

.. literalinclude:: codes/6-2/renshu_for.py
    :language: python
    :caption: renshu_for.py
    :linenos:

ファイルを実行して、処理系に ``for`` 文を実行させましょう。

.. code-block:: shell

    > python renshu_for.py

macOSでは読み替えが必要です。
詳しくは :numref:`in_order` の「:ref:`in_order__command_reference`」を確認してください。

:kbd:`Enter` キーを押して実行すると、リストの順番に従って、1、2、3と3行出力されます。

.. code-block:: shell

    > python renshu_for.py
    for文の練習プログラムを開始します
    1
    2
    3
    プログラムを終了します

リストの先頭から末尾へと繰り返す様子をつかんでください。

.. list-table:: ``renshu_for.py`` における繰り返し
    :align: center

    * - ``i`` の指す値
      - ``for`` の処理（``print(i)``）
    * - ``1`` （先頭）
      - ``1`` を表示
    * - ``2`` （次の値）
      - ``2`` を表示
    * - ``3`` （次の値）
      - ``3`` を表示
    * - （リストの末尾に達していて、次の値はない）
      - （``for`` 文の後の4行目に進む）

.. figure:: images/9/9-22_for_1.drawio.png
    :align: center

    ``i`` が ``1`` を指す状態で、処理（3行目）を実行

.. figure:: images/9/9-23_for_2.drawio.png
    :align: center

    再度 ``for`` の行（2行目）に戻り、``i`` が次の ``2`` を指す状態で、処理を実行

.. figure:: images/9/9-24_for_3.drawio.png
    :align: center

    三度 ``for`` の行に戻り、``i`` が次の ``3`` を指す状態で、処理を実行

.. figure:: images/9/9-25_for_4.drawio.png
    :align: center

    ``for`` の行に戻るが、リストに次の値がなくなったので、``for`` 文の次の文に進む

``print`` 関数を使って、リストの中身を表示する例を紹介しました。
リストと ``for`` 文を使って、**リストにまとめられた値それぞれに対して1回ずつ処理を実行** できます。

練習問題
------------------------------------

筆者の名前のリストを使って、本書の筆者全員に1回ずつ挨拶しましょう。

筆者の名前のリストは ``["susumuis", "nao_y", "nikkie"]`` とします。
挨拶する部分は、これまで書いてきたプログラムにならって、「〇〇さん、ごきげんよう」と表示しましょう（〇〇には筆者の名前が入ります）。
ファイル ``renshu_for.py`` を編集してください。

ヒント：筆者の名前のリストの中身を表示するには、次のようにすればいいですね。

.. literalinclude:: codes/6-2/renshu_for_hint.py
    :language: python
    :caption: renshu_for.py（練習問題のヒント）
    :linenos:

あとは表示内容を「(筆者の名前)さん、ごきげんよう」と変えるだけです。

.. answer::

    .. literalinclude:: codes/6-2/renshu_for_practice.py
        :language: python
        :caption: renshu_for.py
        :linenos:
    
    実行すると、筆者1人1人に挨拶します。

    .. code-block:: shell

        > python renshu_for.py
        susumuisさん、ごきげんよう
        nao_yさん、ごきげんよう
        nikkieさん、ごきげんよう
    
    .. list-table:: 変更した ``renshu_for.py`` における繰り返し
        :align: center

        * - ``hissha`` の指す値
          - ``for`` の処理
        * - ``"susumuis"`` （先頭）
          - ``"susumuis"`` への挨拶を表示
        * - ``"nao_y"`` （次の値）
          - ``"nao_y"`` への挨拶を表示
        * - ``"nikkie"`` （次の値）
          - ``"nikkie"`` への挨拶を表示
        * - （リストの末尾に達していて、次の値はない）
          - （``for`` 文の後の文へ進む）

.. advanced:: 別の反復処理を繰り返す

    ``for`` 文の処理には、``for`` 文も書けます。
    外側の ``for`` 文で代入した変数を使って、**別の処理を繰り返せ** ます。

    例として、前編／後編がある4巻の書名を全て表示してみます。

    .. literalinclude:: codes/6-2/double_for.py
        :language: python
        :caption: renshu_for.py
        :linenos:
    
    .. TODO: 言葉を尽くすよりプログラムの構造を図示したほうがわかりやすいか？

    処理系がプログラムをどう実行するか考えてみましょう。

    まず、変数 ``kan`` が ``"杯"`` を指した状態で、3,4行目が実行されます。
    前編、後編の両方について、書名の表示を繰り返します。

    その後、``kan`` が指す値は ``"騎士団"`` 、 ``"王子様"`` と順番に変わります。
    それぞれの値について、2つの編の書名の表示が繰り返されます。

    .. code-block:: shell

        > python renshu_for.py
        for文の練習プログラムを開始します
        『杯-前編』
        『杯-後編』
        『騎士団-前編』
        『騎士団-後編』
        『王子様-前編』
        『王子様-後編』
        『秘宝-前編』
        『秘宝-後編』
        プログラムを終了します
