``while`` 文を使って、条件を満たす限り繰り返す
========================================================

「条件を満たす限り、ある処理を繰り返す」には、``while`` 文を使います。

``while`` 文
------------------------------------

.. https://docs.python.org/ja/3/tutorial/introduction.html#first-steps-towards-programming

.. https://docs.python.org/ja/3/reference/compound_stmts.html#while
    「while 文は、式の値が真である間、実行を繰り返すために使われます」

``while`` 文も文の1種で、別の文を含められる文です。
以下のように書きます。

.. code-block:: python

    while 式:  # ((半角スペースが1つずつ入ります。また、コロンを忘れずに！))
        処理（文（の並び））  # ((先頭のインデントを忘れずに！))

**式を評価** して ``True`` **となる限り、処理を実行** します。

``while`` に続く式は、**条件** を表します。
この式が ``True`` と評価されるとき、処理を順次実行します。
処理の中で、条件に使われる変数が更新されます。
処理を実行し終わったら、**再度条件を評価** します。

- 条件が ``True`` と評価されたら、再び処理を繰り返し、その後、条件を評価します。
- 条件が ``False`` と評価されたら、そこで ``while`` 文の繰り返しは終了し、続く文を実行します。

このように、条件が ``True`` と評価される、すなわち、条件を満たす限り、処理が繰り返し実行されます。

処理の書き方は ``for`` 文における処理の書き方と同じです。
``IndentationError`` を防ぐため、処理のインデントは揃えてください。

Atomで ``renshu_while.py`` というファイルを作って、練習しましょう。

.. literalinclude:: codes/6-1/renshu_while.py
    :language: python
    :caption: renshu_while.py
    :linenos:

入力と同じ文字列を表示する練習プログラムを用意しました。

このプログラムでは、比較演算子で文字列を比較しています。
文字列の比較については、「:ref:`fork`」の発展（TODO：Xページ参照）を確認してください。

以下は実行の一例です。

.. code-block:: shell

    > python renshu_while.py
    while文でオウム返しします
    入力してください（qで終了） ごきげんよう
    ごきげんよう
    入力してください（qで終了） さしもしらじなもゆるおもひを
    さしもしらじなもゆるおもひを
    入力してください（qで終了） q
    プログラムを終了します

プログラム2行目の ``input`` 関数で入力を受け取ります。
今回は「ごきげんよう」と入力しました。
この文字列は ``"q"`` と一致しないので、``while`` 文の処理が実行されます。
入力内容が出力され、再度入力を受け取ります。

今度は「さしもしらじなもゆるおもひを」と入力しました。
これも ``"q"`` と一致しないので、オウム返しをしてから、入力を受け取ります。

「q」と入力すると、``while`` の条件は ``False`` となり、続く処理（プログラム6行目）に進みます。

.. list-table:: ``renshu_while.py`` 実行の一例
    :align: center

    * - ``nyuryoku`` の指す値
      - ``while`` の条件 ``nyuryoku != "q"``
      - ``while`` の処理が行われるか
      - ``while`` の処理
    * - ``"ごきげんよう"``
      - ``True``
      - ◯
      - ``"ごきげんよう"`` を表示。入力を受け取る
    * - ``"さしもしらじなもゆるおもひを"``
      - ``True``
      - ◯
      - ``"さしもしらじなもゆるおもひを"`` を表示。入力を受け取る
    * - ``"q"``
      - ``False``
      - ×
      - 実行されない

なお、最初に入力した「ごきげんよう」に代えて「q」と入力すると、
``while`` 文の条件が成り立たないため、処理は一度も実行されずに、プログラムは終了します。

.. figure:: images/9/9-26_while_1.drawio.png
    :align: center

    「ごきげんよう」という入力を受け付けたとき、``while`` の行の条件が成り立つので、処理（4, 5行目）を実行する

.. figure:: images/9/9-27_while_2.drawio.png
    :align: center

    「さしもしらじなもゆるおもひを」という入力を受け付けた後、``while`` の行に戻る。条件が成り立つので、処理を実行する

.. figure:: images/9/9-28_while_3.drawio.png
    :align: center

    「q」という入力を受け付けた後、``while`` の行に戻る。条件が成り立たないので、``while`` 文の次の文に進む

``while`` 文を見たら、**条件が成り立たないのはどんなときか** 考えましょう。
``while`` 文の繰り返しが止まる状況をイメージできると、他のプログラマーが書いた反復のプログラムも読みやすいでしょう。

練習問題
------------------------------------

:numref:`fork` 「:ref:`fork`」の練習問題で作った計算アプリを、正解するまで入力を受け付けるように変更してみましょう。
惜しい間違いのフィードバック機能は一度なくして考えてみましょう。

ヒント：間違え続ける限り、入力を受け付けます。

.. answer::

    想定解を示します。
    表示する文面が異なっていても、間違え続ける限り、入力を受け付けるプログラムになっていれば、正解です。

    .. literalinclude:: codes/6-1/keisan.py
        :language: python
        :caption: keisan.py
        :linenos:

    ``while`` 文を使って、正解が入力されない限り繰り返しました。

    .. code-block:: shell

        > python keisan.py
        計算アプリです
        11×12は？ 122
        違います。諦めずに答えてみましょう 132
        正解です！

    while 文の処理を工夫すると、惜しい間違いのフィードバック機能も持たせられます。

反復は、プログラムに処理の **輪** を作っていると見なせます。

``for`` のリストに次の値がある場合や、``while`` の条件が ``True`` となる場合、
輪が1周回って元の行に戻り、リストの次の値や条件が確認されます。
``for`` のリストに続く値がない場合や、``while`` の条件が ``False`` となる場合、そこで輪が切れます。

.. advanced:: 反復を途中で終了する ``break`` 文

    .. https://docs.python.org/ja/3/reference/simple_stmts.html#break

    プログラミングには、**反復を途中で終了** する仕組みも用意されています。
    その仕組みは ``break`` 文と呼ばれます。
    ``break`` 文を使うと、オウム返しのプログラムは以下のようにも書けます。

    .. literalinclude:: codes/6-1/renshu_while_break.py
        :language: python
        :caption: renshu_while.py
        :linenos:

    変更点は2箇所あります。

    - ``while`` 文の式を ``True`` としました。毎回処理を実行します。
    - 処理の中に分岐があります。``nyuryoku`` が指す値（入力値）が ``"q"`` と一致するとき ``break`` 文を実行します。

    ``break`` 文が実行されると、``while`` 文の実行は **そこで終了** し、続く文を実行します。

    条件は常に成り立ちますが、入力値によって処理を終了する分岐があるので、反復はどこかで終了します。
    ``break`` 文を使って書き換えて、これまでと同じように動くことを確認してみてください。

.. advanced:: 無限ループを止める

    ``while`` 文を書き間違えて、際限なく反復し続けるプログラムを書いてしまうことがあります。

    - 条件に使う変数の更新忘れ
    - ``break`` 文の分岐の書き忘れ

    実は、プログラムを実行している処理系は、プログラマーの **キーボード操作で終了** させられます。
    2つのキー [:kbd:`Ctrl`] と [:kbd:`C`] を同時に押してください（WindowsでもmacOSでも共通のキー操作です）。
    これを使えば、際限なく反復するプログラムを実行する処理系も止められます。
    この2つのキーを押すことで、処理系の実行に **割り込んで** います。

    .. ref: https://docs.python.org/ja/3/library/exceptions.html#KeyboardInterrupt

    なお、際限のない反復を、プログラマーは「無限ループ」とも呼びます。
    「ループ（loop）」には「輪」という意味もあります。
