入力を受け取る関数
============================

``input`` 関数で、プログラム実行中に入力を受け取ります。

.. figure:: images/6/6-3_input_document.png
    :align: center

    ``input`` 関数のドキュメント

.. https://docs.python.org/ja/3/library/functions.html#input
.. input()の引数が出力される→改行までの入力が変数に入る

.. list-table:: 入力を受け取る関数
    :align: center

    * - 箱の名前
      - ``input``
    * - 箱は何をするか
      - 入力を受け取る（改行されるまで）
    * - 箱に入れるもの
      - 文字列（プロンプトとして表示できる。何も入れなくてもよい）
    * - 箱から出てくるもの
      - 文字列（改行されるまでの入力）

プログラム実行中に入力する
--------------------------------

対話モードの様子がこれまでと少しだけ違うので、画像も使って説明します。

まず、``input()`` と入力し、Enterキーを押します。

.. figure:: images/6/6-1_input_interactive_shell.png
    :align: center

これは ``input`` 関数の評価中で、**キーボードからの入力を待っている** 状態です。
試しに「こんにちは」と入力してEnterキーを押してみましょう（Enterキーで改行したことになります）。

.. figure:: images/6/6-2_input_return_value.png
    :align: center

文字列 ``'こんにちは'`` が表示され、プロンプト ``>>>`` が再び現れました。
``input()`` の後に入力した「こんにちは」が、``input`` 関数の返り値となったのです。
別の入力で ``input`` 関数を試してみてください。

``input`` 関数の挙動は、今後は以下のように表します。

.. code-block:: python

    >>> input()  # doctest: +SKIP
    こんにちは  # ((input()に続く行で「こんにちは」と入力したことを表します))
    'こんにちは'

プロンプトの文字列を渡す
--------------------------------

``input`` 関数には、文字列の引数を渡せます。
渡した文字列の後から入力できるようになります。

.. code-block:: python

    >>> namae = input("名前を入力してください：")  # doctest: +SKIP
    名前を入力してください：

**入力してほしい内容を示す文字列** を ``input`` 関数に渡します。

引数が渡されたときも、私たちが入力した値が ``input`` 関数の返り値となります。
引数の文字列は、返り値とは関係ありません。

.. code-block:: python

    >>> input("名前を入力してください：")  # doctest: +SKIP
    名前を入力してください：nikkie  # ((お好きな名前を入力してください))
    'nikkie'

``input`` 関数の返り値を変数に代入
----------------------------------------------------------------

関数の返り値は変数に代入できますね。
``input`` 関数の返り値を変数に代入すれば、**プログラム実行中に私たちが入力した値を代入** したことになります！

.. code-block:: python

    >>> namae = input("名前を入力してください：")  # doctest: +SKIP
    名前を入力してください：nikkie

返り値を変数 ``namae`` に代入しました。
対話モードへの表示はありませんね。
では、変数の指す値を確認しましょう。

.. 続くdoctestを通すためのコード

    .. code-block:: python

        >>> namae = "nikkie"

.. code-block:: python

    >>> namae
    'nikkie'

``input`` 関数を使って、私たちが入力した値（Enterキーを押すまでに入力した値）を変数で扱う方法が分かりました。

練習問題
============================

``input`` 関数と ``print`` 関数を使って、入力した名前を「〇〇さん、ごきげんよう」と表示してください。

.. answer::

    入力した名前を変数に代入する方法は、``input`` 関数の紹介で知っていますね。
    ``input`` 関数の返り値は文字列ですから、文字列を連結して ``print`` 関数に渡しましょう。

    .. code-block:: python

        >>> namae = input("名前を入力してください：")  # doctest: +SKIP
        名前を入力してください：nikkie
        >>> print(namae + "さん、ごきげんよう")
        nikkieさん、ごきげんよう

.. advanced:: 文字列の新しい書き方：f文字列（エフもじれつ）

    変数を代入した文字列があるとき、別の文字列と連結する方法をすでに知っていますね（:numref:`value_integer_string` 参照）。

    .. code-block:: python

        >>> namae = "susumuis"
        >>> namae + "さん、ごきげんよう^o^"
        'susumuisさん、ごきげんよう^o^'

    これと同じことを実現する新しい方法「f文字列（f-string）」を紹介します。
    ``f`` を付けて始めた文字列の中の ``{変数}`` は、**変数が指す値** として評価されます。

    .. code-block:: python

        >>> f"{namae}さん、ごきげんよう^o^"
        'susumuisさん、ごきげんよう^o^'

    ``{namae}`` は namae が指す文字列 ``"susumuis"`` に置き換わっていますね。

    文字列の始まりのシングルクォートまたはダブルクォートの前に ``f`` を付けるのがポイントです。
    先頭に ``f`` が付くので、f文字列と呼ばれます。

    fを付けない場合は、変数は指す値に置き換わりません。

    .. code-block:: python

        >>> "{namae}さん、ごきげんよう^o^"
        '{namae}さん、ごきげんよう^o^'

    fを付けないと ``{namae}`` がそのまま含まれた文字列になりました。

    変数 ``namae`` に別の値を代入すると、できあがる文字列も変わります。

    .. code-block:: python

        >>> namae = "nao_y"
        >>> f"{namae}さん、ごきげんよう^o^"
        'nao_yさん、ごきげんよう^o^'

    **複数の変数の値を入れた文字列** を作りたいとき、f文字列は連結よりもスッキリ書けるので重宝しますよ。

    .. Effective Python 2版ではf文字列がベストプラクティス（.formatなどよりも）

.. column:: プログラミング言語における新しい書き方との向き合い方

    上のコラムで紹介したf文字列は、Pythonのバージョン3.6から使える書き方です。
    Pythonは1990年代からありますが、f文字列は2010年代後半から使えるようになりました。
    比較的最近ですね。

    私たちが使う言葉には、常に新しい言い回しが現れますね。
    例えば、「エモい」「わかりみ」「オブです」などなど。

    同じようにプログラミング言語にもどんどん新しい書き方が現れます。
    新しい書き方は、これまでの書き方の **不便なところを解消** するものです。
    プログラマーの世界はどんどん変わっていくので、新しいものを歓迎する姿勢で使ってみるのをおすすめします。
