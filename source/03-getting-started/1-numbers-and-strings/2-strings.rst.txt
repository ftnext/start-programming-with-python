文字列
====================================

数の次は文字をプログラムで扱います。
文字の並びは「文字列（もじれつ）」と呼ぶのでしたね。

.. 「文字の並びを文字列と呼ぶ」はcmd_file章・env章でも言及している。ここと次節で型としての文字列を理解してもらう

プログラムで文字列を表す
------------------------------------

プログラムでは、文字の並びを ``'`` （シングルクォート）で囲んで扱います。
文字列を使ったプログラムをPython処理系に処理させましょう。

.. single quotes, double quotes をカタカナで訳すものとする
    Pythonチュートリアルでは「単引用符」 ref:https://docs.python.org/ja/3/tutorial/introduction.html#strings

.. code-block:: python

   >>> 'こんにちは世界'
   'こんにちは世界'

.. 前節の数値の例（``5``）と同様に、それ以上計算できない"文字列"はそのまま処理結果となった
    文字列の「計算」をまだ説明していないので、読者に気付いてもらうのを狙う（気付くのは必須ではない）

処理系が文字列を評価し、そのまま処理結果としました。
処理結果にはシングルクォートが付いていて、文字列と示されています。

.. https://docs.python.org/ja/3/reference/simple_stmts.html#expression-statements
    「式文は、(主に対話的な使い方では) 値を計算して出力するために使ったり」

文字の並びを ``"`` （ダブルクォート）で囲んでも同じです。

.. code-block:: python

   >>> "こんにちは世界"
   'こんにちは世界'

シングルクォートでもダブルクォートでも、**文字列に違いはありません**
（ダブルクォートで文字列を作った例では、処理結果はシングルクォートになっていますよね）。
どちらでも違いはないので、**この本ではダブルクォートで囲む** ように統一します。

一つ注意が必要なのは、文字の並びを囲むのはシングルクォートかダブルクォートの **どちらかに揃える** ことです。
例えば ``'こんにちは世界"`` のように、シングルクォートで始めてダブルクォートで終えてはいけません。

文字列の計算
------------------------------------

数値の四則演算と比べると、文字列には「足し算」と「掛け算」があります。

文字列の「足し算」
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

演算子 ``+`` を使って、文字列も「足し算」できます。

.. code-block:: python

    >>> "吾輩は" + "猫である"
    '吾輩は猫である'

``文字列 + 文字列`` という式を評価すると、結果は **2つの文字列がくっついた（連結した）** 新しい文字列です。
``"吾輩は"`` と ``"猫である"`` がつながって ``'吾輩は猫である'`` という文字列ができていますね。

.. ドキュメントでは「シーケンスは結合 (concatenate) されます」
    https://docs.python.org/ja/3/reference/expressions.html#binary-arithmetic-operations

文字列の「掛け算」
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

演算子 ``*`` を使って、**文字列と整数の間でのみ** 「掛け算」ができます。

.. code-block:: python

    >>> "万歳！" * 3
    '万歳！万歳！万歳！'

``文字列 * 整数`` という式を処理すると、**整数の数だけ繰り返した文字列** ができます。
ここでは ``"万歳！"`` が3回繰り返されていますね。

文字列と整数を逆にして ``整数 * 文字列`` と書いても、同じ結果となります。

.. code-block:: python

    >>> 3 * "万歳！"
    '万歳！万歳！万歳！'

例えば、文章の区切り線を作るために記号 ``"ー"`` を繰り返す時、文字列の「掛け算」の出番です。

練習問題
--------------------------------

万歳！を10回表示するプログラムを書いてみましょう。

.. answer::

    万歳！を10回表示と聞いて、 ``*`` で繰り返す方法が浮かびましたか。

    .. code-block:: python

        >>> "万歳！" * 10
        '万歳！万歳！万歳！万歳！万歳！万歳！万歳！万歳！万歳！万歳！'
    
    万歳！を10回表示する方法は、上記以外にも考えられます。
    ``"万歳！" + "万歳！"`` のように10回足す方法や、演算子を使わずに10回繰り返した文字列を入力する方法です。
    ですから、``"万歳！" * 10`` でなくても、万歳！を10回繰り返した文字列ができていたら正解です！

数値の他に文字も扱えるようになりました。
プログラミングでできることが広がりましたね！

.. column:: 「プログラムを処理系に処理させる」の他の言い方

    「プログラムをプログラミング言語処理系に処理させる」には別の言い方があります。

    * プログラムを **実行する**
    * プログラムを走らせる

    どれも意味は同じです。
    本書では「実行する」を主に使っていきます。
    
    ちなみに、英語ではexecuteやrunを使います。
    これらを訳して、日本語では「実行する」「走らせる」になっています。

    .. プロセス：コンピュータ上で動作しているソフトウェア（『プロになるためのWeb技術入門』p.132）
        「走っているprocessをkillする」というが、コンピュータ内部の話に踏むこむので、ここではプロセスには触れていない

.. column:: 文字列以外は、半角英数記号で揃える

    .. 特別な変数__name__について、アンダースコアは半角か全角かという質問があった(makiさん)
        プログラミングでは基本は半角文字という原則が伝わってないと思われるのでここで伝える
        全角文字で変数も定義できるが、混乱を招くので、この本では紹介しない

    この節では ``"こんにちは世界"`` や ``"万歳！"`` などの文字列を作りました。
    プログラミングで **全角文字が使えるのは、文字列の中だけ** です。
    文字列以外は、半角英数記号で揃えます。

    例えば、文字列を作るときに使うダブルクォートを全角にすると、処理系はエラーを出します。
    先の章では、ダブルクォートや演算子の他にも、イコールやアンダースコアなどの記号が登場しますが、すべて **半角記号** です。
