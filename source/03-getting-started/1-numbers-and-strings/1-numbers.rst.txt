.. _value_integer_string:

====================================
プログラムで数と文字を扱ってみよう
====================================

.. 2021/01/30 「データ」と「値」は「値」で統一する
    「Python における オブジェクト (object) とは、データを抽象的に表したもの」
    「すべてのオブジェクトは、同一性 (identity)、型、値をもっています。」
    https://docs.python.org/ja/3/reference/datamodel.html#objects-values-and-types

.. TODO: この章の中でOkajimaさんコメント
    「プログラムの話をしてきて、急にコンピューターというのは唐突に感じました」
    -> 1章付近に、プログラミングを使うとコンピューターを操れるというコラムを書く（11/7）
    コラムができたらこのコメントと続く一文は削除する

.. この章からはいよいよプログラムを書いて、コンピューターを動かしていきます。
    この章では、コンピューターに数や文字を処理させます。（続く段落）
    ご自身の手を動かして、「コンピューターを思い通りに動かせた！」という経験をしてみてください。（練習問題）

この章からはいよいよプログラムを書きます。
まずは数や文字をプログラムで扱えるようになりましょう。

.. 2章ではPython処理系をインストールすると説明しているので、処理系を対話モードで起動という説明にした

コマンドラインから、Python処理系を対話モードで立ち上げましょう。
立ち上げ方が分からない場合は、:numref:`env` の中の 「:ref:`how-to-start-python-interpreter`」 を確認してみてください。

.. figure:: images/1/1-1_start_interpreter.png
    :align: center

    コマンドラインに ``>>>`` と表示されていたら準備完了です。

数値
====================================

.. TODO: 新書のようにポイントは太字でマークアップしてみたい（読み直して対応予定）

.. Django Girls Tutorialにならって「！」など積極的に使っていこうと思います

初めてのプログラミング：対話モードに数値を入力
------------------------------------------------------------------------

Pythonの処理系にプログラムを処理させましょう。

.. https://docs.python.org/ja/3/tutorial/interpreter.html#interactive-mode
    「インタプリタは対話モードで動作している」

プロンプト（``>>>``）の後に ``5`` と入力します。
数値1つですが、これも立派なプログラムです！

.. figure:: images/1/1-2_input_first_program.png
    :align: center

    ``5`` と入力しました

Enterキーを1回押してください。

.. figure:: images/1/1-3_execute_first_program.png
    :align: center

    Enterキーを押した後の状態です

入力した数値 ``5`` が表示され、再度プロンプトが現れました。

「対話モードに ``5`` というプログラムを入力し、Enterキーを押す。処理系が処理した結果 ``5`` と表示される」ことを、本の中では次のように表記します。

.. code-block:: python

    >>> 5
    5

.. https://docs.python.org/ja/3/reference/simple_stmts.html#expression-statements
    「式文は、(主に対話的な使い方では) 値を計算して出力するために使ったり」

Pythonの処理系は数値を計算できますが、``5`` のようにそれ以上計算できない数値は、そのまま処理結果とします。
続いて **数式を入力** してみましょう。

四則演算
------------------------------------

数の足し算・引き算・掛け算・割り算を順に見ていきましょう。
4つをまとめて「四則演算」と言います。
**人間が計算するのと同じ** ように、プログラミングでも計算できます。

.. 計算の例は暗算でできる計算を示し、プログラミングで四則演算ができることを体験してもらう意図
    仕込んだネタ：33-4はネットスラング。「クミ」。7月2日（誕生日）

足し算
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``5+7`` と入力してEnterキーを1回押してみましょう。

.. shellとpythonでHTMLビルド後のハイライトを比べてpythonと指定することにしました

.. code-block:: python

   >>> 5+7
   12

Pythonの処理系が ``5+7`` というプログラムを処理し、足し算の結果である ``12`` が表示されました。

引き算
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

今度は ``33-4`` と入力してEnterキーを押してみましょう（Enterキーの入力についてはこの後は省略します）。

.. code-block:: python

   >>> 33-4
   29

引き算の結果の ``29`` が表示されていますね！

掛け算
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

掛け算のプログラムは ``*`` （アスタリスク）という記号を使います。
算数や数学で使う :math:`\times` 記号とは違うことに注意しましょう。

.. code-block:: python

   >>> 9*3
   27

:math:`9 \times 3` という掛け算が計算されていますね。

割り算
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

割り算も記号が異なります。
:math:`\div` 記号ではなくて、``/`` （スラッシュ）という記号を使います。

.. code-block:: python

    >>> 7/2
    3.5

割り算の結果は小数で求まります。
割り切れるときも小数です。

.. code-block:: python

    >>> 6/2
    3.0

四則演算が必要になったら、プログラミングで計算してもいいですね。

計算の順番
------------------------------------

.. ref: 演算子の優先順位
    https://docs.python.org/ja/3/reference/expressions.html#operator-summary

ここで問題です。
:math:`5 + 3 \times 4` はいくつですか。

皆さんは掛け算が足し算より先に計算されると知っていますよね。
ですから、答えは17（:math:`= 5 + 12`）です。
プログラミング言語処理系も、掛け算を先に計算します。

.. code-block:: python

    >>> 5+3*4
    17

それでは、``5 + 3`` という足し算を先にするにはどうすればいいでしょうか。
そうです、カッコ :math:`()` を使って、:math:`(5 + 3) \times 4` のように書きますね。
プログラミングでも同じで、**カッコに入れた足し算は、掛け算より先** に計算されます。

.. code-block:: python

    >>> (5+3)*4
    32

ここまでで、プログラミングを電卓代わりに使えるようになりましたね。
胸を張っていい成果です。

式を評価して計算結果を得る
------------------------------------

プログラミングでも電卓のように計算できることは、あまり驚きがないかもしれません。
ですが、``5+7`` というプログラムが処理されて足し算の結果が求まることには、プログラミングの本質が凝縮しています。
ここで少しだけ掘り下げてみましょう。

**四則演算に使った** ``+`` や ``-`` 、 ``*`` 、 ``/`` の **記号** を「演算子」と呼びます。
そして、**演算子を使ったプログラム** （例えば ``5+7``）を「式」と呼びます。

プログラミング言語の処理系に ``5+7`` のような式を入力すると、処理系は式を「評価」します。
評価した結果、:math:`5 + 7` が **計算** され、計算結果が表示されます。

.. https://docs.python.org/ja/3/tutorial/introduction.html#numbers
    「式を入力すると、その結果が表示されます」

.. 四則演算の定義あり https://docs.python.org/ja/3/reference/expressions.html#binary-arithmetic-operations

評価は、演算子の優先順位に沿います。
``5+3*4`` という式は、まず ``3*4`` が評価されます（その結果は ``12`` ですね）。
次に ``5+12`` が評価され、``17`` という計算結果が表示されます。

プログラミングの本質とは、**プログラミング言語処理系が式を評価する** ことです。
今の段階ではこのことだけ押さえておいてください。
これから先、演算子を使わない式も紹介しますが、式が評価されるというのは共通です。お楽しみに！

練習問題
------------------------------------

日常生活を題材に、電卓代わりにプログラミングを使う練習をしましょう。

.. 電卓との違いとして、float（浮動小数点数）というのはこの章のコラムで拾う話題

ある日nikkieは昼休みにコンビニで、279円のサンドイッチと100円の惣菜パンを買いました。
頭が疲れたときの息抜き用に120円の菓子パンも買いました。
消費税率を8%としたとき、合計金額はいくらでしょう。

.. 持ち帰りの軽減税率は期限がないらしい
    https://blog.ncbank.co.jp/posts/200

.. TODO：コラムと解答を同じディレクティブにしている（→解答ディレクティブがほしい）

.. answer::

    税抜価格の合計を求めてから、消費税を加算します。

    .. code-block:: python

        >>> (279 + 100 + 120) * (1 + 0.08)
        538.9200000000001


    金額の端数部分（小数部分）ですが、
    消費税の端数の扱いは切り捨てが多いので、ここでも切り捨てることとします。
    合計金額は **538円** です。

.. 切り捨てについて ref: https://squareup.com/jp/ja/townsquare/understanding-consumption-tax
    > 事業者が自由に決めていいことになっています。しかし、消費税を切り上げると、
    > 消費者が「余分に払っている」と感じてしまうおそれがあるので、切り下げて処理している事業者が多いのが実際のようです。

例えば家計簿など、たびたび行う計算にプログラミングを使ってみると、身に付けやすいでしょう。
試したいことが浮かんだら、本から離れて大丈夫ですので、どんどん試してみてください。

.. column:: 式に半角スペースを入れてもいい？

    ここで式の「書き方」について補足します。
    演算子の前後に半角スペースを1つずつ入れても、評価結果は変わりません。

    .. code-block:: python

        >>> 5 + 7
        12

    半角スペースを2つ以上入れても、評価結果は変わりません（3つずつ入れてみた例）。

    .. code-block:: python

        >>> 5   +   7
        12
    
    半角スペースの有無や数の違いがあったとしても、**式を評価した結果は変わりません**。
    プログラミング言語処理系にとっては、式に含まれる半角スペースの数は重要ではないのです。

    この本では、演算子の前後に **半角スペースを1つずつ** 入れます。

.. column:: 式に半角スペースを入れるのはなぜ？

    式に半角スペースを入れる理由は、**私たちプログラマーにとって読みやすくするため** です。
    ``5 + 7`` のように演算子の前後に半角スペースを1つずつ入れることで、式が見やすくなります。

    Pythonを書くプログラマーの多くは、演算子の前後に半角スペースを1つずつ入れます。
    その方が読みやすいと実感しているので、本書の筆者もこの慣習を採用しています。
    皆さんがプログラムを入力するときも、キーのタイプは増えますが、半角スペースを入れることをおすすめします。

    なお、複数の演算子を使った式では、それぞれの演算子の前後に半角スペースを1つずつ入れます。

    .. code-block:: python

        >>> 5 + 3 * 4
        17
