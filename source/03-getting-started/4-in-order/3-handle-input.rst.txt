.. _in_order__practice:

順次の練習：挨拶するプログラム
========================================================

前の節で作った ``aisatsu.py`` を実行すると、常にsusumuisに挨拶しますね。

.. code-block:: shell

    > python aisatsu.py
    susumuisさん、ごきげんよう^o^
    >

これは挨拶の相手がsusumuisとプログラム中に書かれているからです。
練習として、挨拶をする相手の名前を **プログラム実行中に指定** できるように変更しましょう。

練習問題：挨拶する相手を入力する
----------------------------------------------------------------

:numref:`input_output` 「:ref:`input_output`」で紹介した、
入力を受け取る関数 ``input`` を使いましょう。

入力した名前を ``aisatsu_bun`` 関数に渡せば、その人への挨拶が返りますね。

.. answer:: 正解例

    .. literalinclude:: codes/4-3/aisatsu.py
        :language: python
        :caption: aisatsu.py
        :emphasize-lines: 5-6
        :linenos:
    
    5行目で ``input`` 関数を使って、入力された名前を ``namae`` に代入します。
    6行目で ``aisatsu_bun`` 関数を呼び出して、入力された名前向けの挨拶を表示します。

    動作確認しましょう。
    好きな名前を入力してください。

    .. code-block:: shell

        > python aisatsu.py
        名前を入力してください：nikkie
        nikkieさん、ごきげんよう^o^
        >
    
    入力した名前に対して挨拶するようになりました！
    これで **プログラムを変更しなくても** 、susumuisにもnao_yにも挨拶できます。

    *注* ：本書のプログラムと手元のプログラムが違っても、同じように動いていれば正解です。
    例えば、5行目の ``input`` 関数をファイルの先頭（1行目）に移しても、動きは変わりません。

プログラミングで使う値はプログラムに **全て書いておかなければならないわけではありません** 。
プログラムの実行中に入力し、その値を変数に代入して、プログラムで使えます。

.. column:: 飛ばして先に進む読み方もOK！

    順次を学んだ後、残りの3大構造を飛ばして、実際に使えるプログラムを作る章（:numref:`programming_practice`）に移ることもできます。
    :numref:`programming_practice` 以降は、3大構造を全て知っていることを前提にして解説が進みます。
    初めて知ることがあれば一時戻って、理解に必要な部分をつまみ読みしてください。

    皆さんの中には基礎から着実に押さえたい方もいれば、実践の中で学びたいという方もいるでしょう。
    基礎から着実に押さえたいという方は、引き続きお付き合いください。
    「そろそろ実践したくなってきた」という方は、実際に使えるプログラムを作る章に挑戦してみてはいかがでしょうか
    （**本は前から順番に読まなければならないものではない** ですからね）。
