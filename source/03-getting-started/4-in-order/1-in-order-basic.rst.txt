.. _in_order:

============================
3大構造 一. 順次
============================

この章から **プログラムの3大構造** を紹介します。

- 順次（本章）
- 分岐（:numref:`fork`）
- 反復（:numref:`loop`）

**順次** （じゅんじ）とは、**処理を順番に実行する** ことです。

.. 手元の『基本情報技術者教科書 平成28年度』
    「順次型は処理を順番に実行する制御構造」(p.107)

この章からは対話モードを離れ、処理を **ファイルに書いて** いきます。
対話モードで学んだことは、ファイルでも同じように使えます。

.. _in_order__command_reference:

はじめてのファイルを使ったプログラム
========================================================

ファイルを使う準備
--------------------------------

まずは、対話モードに ``quit()`` と入力して終了します
（:numref:`env` の中の「:ref:`how-to-start-python-interpreter`」参照）。

:numref:`env` で準備したエディター、Atomを使います。
Atomで ``py-practice`` ディレクトリをプロジェクトフォルダーとして開いてください  # noqa
（:numref:`env` の中の「:ref:`atom-basic-usage`」参照）。

次に、Atomを操作して、``basic`` ディレクトリを作ってください
（引き続き :numref:`env` の中の「:ref:`atom-basic-usage`」参照）。
この名前は、プログラミングの基本（basic）を学ぶためのディレクトリという意味です。

.. env章の images/atom/original/common-atom-12.png の直後の状態を想定した画像にしている

.. figure:: images/5/5-6-2_create_basic_directory.png
    :align: center

    ``basic`` ディレクトリを作った後のAtom

ディレクトリをまず作り、その中にファイルを作るのがおすすめです。
**作業ごとにディレクトリを作る** と、PCの中を整理整頓して使っていけます。
本章から :numref:`programmer_thinking` 「:ref:`programmer_thinking`」までのプログラムは、
``basic`` ディレクトリに作ります。

最後に、コマンドラインで ``cd`` コマンドを使って ``basic`` ディレクトリに移動しましょう
（:numref:`env` では、カレントディレクトリが ``py-practice`` になっていましたね）。

.. code-block:: shell

    > cd basic

ファイルに処理を書く
--------------------------------

ファイルのプログラムを作るときは、Atomを以下の手順で操作します。

1. ファイルがない場合は、ファイルを作成する
2. ファイルに文を入力する
3. ファイルを保存する

Atomを操作して、ファイルを作成したり保存したりする方法は、:numref:`env` の中の「:ref:`atom-basic-usage`」を参照してください。

.. メモ📝：touchコマンドを1章で教えている

まず、 ``basic`` ディレクトリの中に ``hajimete.py`` というファイルを作ります。

次に ``hajimete.py`` に、以下の3行を入力しましょう。
2つの変数 ``a`` と ``b`` を使って、整数の積を計算します（:numref:`variables` 「:ref:`variables`」でも書きましたね）。

.. literalinclude:: codes/4-1/hajimete_step1.py
    :language: python
    :caption: hajimete.py
    :linenos:

入力したら、ファイルを保存してください。
Atomでファイルを保存することで、入力内容がPCの中のファイルに書き込まれます。

プログラムのファイルを実行
----------------------------------------------------------------

それでは、:file:`hajimete.py` というファイルのプログラムを **プログラミング言語処理系で処理** します。
これは、「ファイルのプログラムを実行」「ファイルを実行」とも言われます。

**コマンドはOSによって異なります**。
以下のうち、該当する方を入力してください。

.. プロンプト（>や%）は入力不要と file_cmd 章で伝えている

Windowsの場合
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

PowerShellで :command:`python` コマンドに続けて、**実行するファイルの相対パスを指定** します。

.. code-block:: shell

    > python hajimete.py

この後にやることは、続く「macOSの場合」でファイルの相対パスを入力した後の部分で説明します。

macOSの場合
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ターミナル.appで :command:`python3` コマンドに続けて、**実行するファイルの相対パスを指定** します。

.. code-block:: shell

    % python3 hajimete.py

.. macOSからPython2系のプレインストールがなくなる → macOSでも ``python`` が3系を指すようになる？
    ref: https://www.python.jp/install/macos/index.html
    「macOS Catalina には、Python2.7とPython3.7がプリインストールされています。しかし、プリインストールされてるバージョンはかなり古く、利用はおすすめできません。」

ここから先は **「Windowsの場合」のコマンドだけ** を示します。
**macOSを使っている方** は、:command:`python` と見かけたら、:command:`python3` に **読み替え** てください。

ファイルの相対パスを入力した後は、:kbd:`Enter` キーを押してください。

.. code-block:: shell

    > python hajimete.py
    24
    >

コマンドラインに ``24`` が表示され、そしてプロンプトが再度表示されています。
ファイルの実行が終わると、プロンプトが再度現れます。

``hajimete.py`` に書かれた処理が **1行目から順に** 実行された結果、``24`` が表示されました。

.. figure:: images/5/5-11_in_order.drawio.png
    :align: center

    ファイルのプログラムは1行目から順に処理される

.. 実行している → Pythonインタプリタが各行を「評価」しているとも言える
    各行は式または文。式は評価だが、文は評価と言えるのか？ 文を考慮して「処理」や「実行」という言葉を選んでいる

.. 関数定義や分岐、反復の複合文もあるので、1行ずつと言うより1文ずつ

処理系が **ファイルを** 1行目にある文から **順番に1文ずつ実行する** というのが順次です。
後に続く行がなくなったら、ファイルの実行は終わります。
順次により、``hajimete.py`` では :math:`4 \times 6` が計算されて、``24`` と表示されました。

ファイルのプログラムを読むときは、**1行目から順番に、何をしている文か理解** しましょう。
処理系の動きをプログラマーの頭の中で再現するのです。

対話モードでは先に入力した処理から順番に実行されましたね。
ファイルの実行は、1行目から1文ずつ対話モードで実行するのと同じなのです。

練習問題
------------------------------------

以下のように処理を足した ``hajimete.py`` を実行すると、コマンドラインには何が表示されるでしょうか。

.. literalinclude:: codes/4-1/hajimete.py
    :language: python
    :caption: hajimete.py
    :emphasize-lines: 4-5
    :linenos:

「こう思う」と結論が出たら、実際に実行して確かめましょう。

.. answer::

    表示されるのは2行です。

    .. code-block:: shell

        > python hajimete.py
        24
        万歳！万歳！万歳！
        >
    
    まず ``24`` と表示されます（3行目の ``print`` 関数によります）。
    続いて、``万歳！万歳！万歳！`` と表示されます（5行目の ``print`` 関数）。

    この結果を「当たり前」と感じたら、順次を体得しています！
    プログラムは1行目から1文ずつ実行されるので、行として上にある ``print(a * b)`` が実行されて、``24`` が先に表示されます。
    追加した4,5行目の文から実行されるということはありません。

    .. figure:: images/5/5-12_in_order2.drawio.png
        :align: center

        1行目から順に実行される
    
    もし、ここで示した結果が表示されない場合は、Atomでファイルを保存したか確認してください。

.. column:: ファイルで体験する ``print`` 関数の効能

    ``hajimete.py`` の3行目で ``print`` 関数を呼び出さなかったらどうなるでしょうか。

    .. literalinclude:: codes/4-1/hajimete_step1_no_print.py
        :language: python
        :caption: hajimete.py
        :emphasize-lines: 3
        :linenos:

    ファイルを実行しても、``a * b`` の評価結果はコマンドラインに表示されません。

    .. code-block:: shell

        > python hajimete.py
        >

    ``a * b`` を評価していないのではありません。
    ``print`` 関数を呼び出していないので、コマンドラインに表示されないのです。

    **表示には** ``print`` **関数を呼び出す必要がある** というのが、対話モードとファイルとの違いです。

.. TODO：not_usedにある、print関数を使ったデバッグについてコラムを追加して膨らませられそう

.. column:: 新しく知った文法は対話モードでまず試そう

    この章から先は、プログラムをファイルに書くことが中心になります。
    ですが、対話モードを全く使わなくなるわけではありません。
    新しく知った文法は **対話モードでまず試し、使い方を掴んでからファイルに書く** のがおすすめです。

    私の経験では、新しく知った文法を使ったプログラムをいきなりファイルに書いたとき、実行時にたいてい処理系はエラーを出します。
    これは新しく知った文法の使い方を間違えていることが原因でした。
    そこで、 **ファイルに書く前に対話モードで試し、処理系がエラーを出さない使い方を把握する** ようにしています。
    対話モードで確認した通りにプログラムをファイルに書けばいいのです。

.. column:: プログラムとコード

    .. ref: 2021/01/23 MTG。
        プログラミングなので、式1つでもプログラムという言葉を使った
        ここで初めてコードという言葉を使う

    .. 執筆中のメモ
        - コードはプログラムの一部
        - コード＝プログラムとなることもある（value_integer_string章の短いプログラムの例）

    この章でファイルのプログラムを扱い始めました。
    プログラマーの世界には、プログラムと似た意味の言葉に「コード」があります。
    
    コードという言葉は、**プログラムの一部の式や文**、それらのまとまりを指します。
    プログラムがまとまった処理をし、コードがそのプログラムの部品です。

    ``hajimete.py`` はプログラムですが、各行をコードと呼んだり、
    3行全体を :math:`4 \times 6` を計算する部品と見てコードと呼んだりします。
