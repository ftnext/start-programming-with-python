============================
3大構造 一. 順次
============================

はじめてのファイルを使ったプログラム
========================================================

ファイルに処理を書く
--------------------------------

.. file_cmd 章でcatコマンドを扱っていなかったのでカット

Atomに入力しただけでは、ファイルの中身は空のままです（ ``cat`` コマンドで確認してみてください）。

.. 入力したプログラムをAtomのスクリーンショットで示すのは冗長に思えるのでカット

.. figure:: images/5/5-8_write_code.png
    :align: center

    変数の積を計算するための処理を入力

.. 保存のショートカットキーはenv章で説明している。
    以下を戻す場合、「一般に面倒くさがり」の部分へのコメントを考慮する必要あり

保存のように頻繁に行う操作を毎回マウスでやるのはちょっと大変ですよね。
プログラマーは一般に面倒くさがりなので、簡単な操作方法がある場合はそれを覚えて楽をします。
2章でも紹介したショートカットを覚えると、キーボートの2つのキーを押すだけで済むのでとても便利ですよ
（Windowsでは、[Ctrl] + [S]。macOSでは [:コマンドマーク:] + [S]。SはSave（保存）のSです）。

.. Pythonと区別しないのでカット。また、繰り返しになっているようにも思う

ファイルの1行目から3行目へと1行ずつ実行されたということです。
これがプログラムの3大構造の1つ、順次です。
Pythonに限らず、どんなプログラミング言語でも、順次によって、**ファイルの一番上に書かれた行から実行** されます。

.. undoの話題はenv章に移動した。レビュー中にすぐ参照できるように、このファイルに残しておく
    https://github.com/susumuishigami/pybeginnerbook/issues/363

.. column:: Atomでも「戻せる」

    Atomでファイルを編集しているときも、直前の操作を戻すことができます。
    元に戻すショートカットは、Windowsでは [Ctrl] + [Z]、macOSでは [:コマンドマーク:] + [Z]です。
    WordやExcelといった他のソフトウェアでの「元に戻す」操作と同じショートカットですね。
    戻したあとはファイルを保存しましょう（戻した直後は、Atomのタブでファイル名の横に青い丸が出ています）。

    .. figure:: images/5/5-13_undo1.png
        :align: center

        1回元に戻すと、最後に消した ``)`` が戻った

    戻しすぎた場合は、Windowsでは [Shift] + [Ctrl] + [Z]、macOSでは [:シフトマーク:] + [:コマンドマーク:] + [Z]で戻す前の状態になります。
    Atomで編集を戻すことは簡単にできるので、気になることがあったらコードを書き換えて寄り道してみてください。

.. コメントは順次の最初の例では紹介しない

ここで、Pythonのプログラムの中に ``#`` で始まる説明を加えました。
これは「コメント」と呼ばれます。
プログラミングでは、コードだけでなく、コメントとしてコードの説明も書きます。
本書ではこれ以降、ファイルに書いたプログラムの説明にコメントも使います。
皆さんが本書のコードをAtomに入力するときは、コメントを入力する必要はありません（ ``#`` よりも前を入力してください）。

.. コメントは順次の最初の例では紹介しないので一時カット（コメントが必要なプログラムになってからでいいのかも）

.. column:: コメントについてもう少し

    Pythonではコメントは ``#`` に続けますが、プログラミング言語によってはコメントを始める記号が異なります（``//`` などが使われます）。
    Pythonのコードを実行するとき、 ``#`` に続く部分は無視されます。
    例えば ``a = 4  # 変数aに4を代入`` というコードの実行結果は ``a = 4`` というコードと変わりません。

    コメントは、私たち **プログラマーのためのもの** です。
    プログラマーは、複雑な処理の簡潔な説明や、処理を書いた意図の説明を書くためにコメントを使います。
    なぜなら、複雑な処理の説明や処理を書いた意図というのは、コードからだけでは分からないことだからです。
    プログラミング言語で表現できないものをプログラムに紐付けて記録しておくためにコメントが使われます。

    そして、コメントの読み手は、多くの場合、プログラムの細かい部分を忘れてしまった自分自身になります。
    「2週間前に、なぜこう書いたんだろう」「この計算は、要は何を計算しているんだろう」という
    未来の自分の疑問に答えられるようにコメントを書いておくのです。
    （なお、あまりに複雑な処理の場合は、コメントを書くよりも、単純にできないかまず考えます）

ファイルに書いた関数
============================

.. 順次は1行目から順番に。関数呼び出しのときの動きを説明する。説明したいことと合わないので一時退避
    ファイルだけを考えると、「遡る」「戻る」ように見える

ここまで、ファイルを上の行から順番に実行する例を見てきました。
ですが、順次とは、単に上の行から順番に実行することではありません。
関数を使うことで、特定の数行の処理を呼び出すことができます。

プログラミングの基本要素「順次」により ``aisatsu.py`` は上から順番に実行されました。
ですが、上から下の一方向だけで実行されたわけではなく、関数の呼び出しで上の行に戻っています。

順次と関数の関係についてまとめます。

- 順次によりプログラムは上から実行される
- 関数を呼び出すと、関数の中身（インデントした部分）が上から実行される

関数を実行すると、**関数の定義にさかのぼって実行** するということを押さえておきましょう。

.. 章のまとめは入れていないのでカット
.. 以下、章のまとめ

本章では、プログラムの3大構造の1つ、順次を学びました。
ファイルに書いたプログラムは、順次によって上から実行されます。
関数を実行すると、関数を定義した箇所に戻り、関数の中身が実行されます。
関数の中身が実行されると、関数を呼び出した後の処理に進みます。
