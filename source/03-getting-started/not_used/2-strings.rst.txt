.. 文字列のところのコラム要素

ここで使った「こんにちは世界」というフレーズは、英語にすると「Hello, world」で、プログラミングの始めの一歩を踏み出す際によく使われるフレーズです。
私たち著者陣を含め、世のプログラマはほとんど皆さんが、プログラミングを始めたときにこのフレーズを唱えました。
この本も慣習にならい、「こんにちは世界」を使って、文字列の話を進めていきます。

.. note:: インタラクティブシェルの表示 その2

    ``'こんにちは世界'`` という文字列をインタラクティブシェルに渡したとき、出力にシングルクォートが含まれていることを疑問に感じる方もいるかもしれません。

    .. code-block:: python

        >>> 'こんにちは世界'
        'こんにちは世界'

    「出力はシングルクォートを含まない ``こんにちは世界`` でもいいのではないか」と思われるかもしれませんね。

    これは、インタラクティブシェルが **Pythonにとっての出力** をするためです。
    私たち人間にとっては「こんにちは世界」は明らかに文字列ですが、Pythonにとっては文字列かどうかを区別する必要があります
    （プログラミングではすべてが0または1の並びで表されるため、数値も文字列も0/1の並びになっています）。
    Pythonが文字列であることを区別するために、``'こんにちは世界'`` とシングルクォートをつけて表示されているのです。

    Pythonではシングルクォートでもダブルクォートでも文字列であることに変わりはないと説明しました。
    そのため、 ``"こんにちは世界"`` とダブルクォートを付けた文字列をインタラクティブシェルから渡した場合、Pythonは文字列として表示するためにシングルクォートを付けて（ダブルクォートをシングルクォートに変えて）出力していると考えてください。

    .. code-block:: python

        >>> "こんにちは世界"
        'こんにちは世界'

.. 「インタープリタに読める」をインタープリタ＝Pythonとして解釈
    https://docs.python.org/ja/3/tutorial/inputoutput.html#fancier-output-formatting

.. 以下は文字列の練習問題の別解について

また、想定されていないような点を突くというのは、ハッカー（優秀なプログラマ）の素質があります。
ここで紹介されていない解法にたどり着いた方は誇りに思ってください。

.. メソッドは関数の章で紹介する予定なので一時的にnot_usedに移動

文字列に用意された処理を使ってみよう
------------------------------------------------

ここまで、文字列には連結する処理と繰り返す処理があることを見てきました。
連結は ``+`` で、繰り返しは ``*`` で行えることを知りましたね。
実は、文字列には連結と繰り返し以外にも処理が用意されています。
そこでこの項では、文字列に用意された別の処理を紹介します。

文字列の繰り返しを使って、メールの署名部分を作成できると紹介しました。
繰り返しとここで扱う処理を合わせると、以下のような飾ったメッセージをPythonで用意することができます。

.. code-block:: none

    ーーーーーーーーーーーーーーーーーーーー

    ☆☆☆☆ ようこそニッキーさん ☆☆☆☆

    ーーーーーーーーーーーーーーーーーーーー

上で示したメッセージのうち、上下の繰り返しの作り方はもう分かりますね。
``'ー'`` を20回繰り返しています。

それでは、中央の 「☆☆☆☆ ようこそニッキーさん ☆☆☆☆」 という部分はどう作ればいいでしょうか。
観察してみると左から以下のような部分に分かれます。

- ☆が4つあります
- 半角スペースが1つ入っています
- 「ようこそニッキーさん」と10文字書かれています
- また、半角スペースが1つ入っています
- ☆が4つ続いて終わります

観察により、全部で20文字分ということが分かりました。

分かったことから、文字列の連結と繰り返しで再現してみると以下のようになるでしょう。

.. code-block:: python

    >>> '☆'*4 + ' ' + 'ようこそニッキーさん' + ' ' + '☆'*4
    '☆☆☆☆ ようこそニッキーさん ☆☆☆☆'

連結と繰り返しでも、飾ったメッセージができました（インタラクティブシェルにある出力をコピーして並べればいいですね）。
しかし、渡す相手の名前をススムイスに変えるには、☆の数を数え直す必要があり、やや手間ですね。
そこで、ここでは連結と繰り返しの組合せよりもより手間がかからない方法を紹介します。

その方法とは、文字列を中央に寄せて表示する処理です。
中央寄せを適用するには ``'ある文字列'.center()`` のように書きます。
カッコ ``()`` の中には、値をいくつか入れることができます。

まず、カッコの中に整数を入れてみましょう。

.. code-block:: python

    >>> 'ようこそ'.center(8)
    '  ようこそ  '

カッコに整数を入れると、中央寄せを適用してできた文字列はカッコに入れた整数の長さになっています。
「ようこそ」の例では、全部で8文字になっています。
文字列が中央に寄せられる仕組みは、文字列のまわりが半角スペースで埋まることによります。
上の例では4文字の「ようこそ」を全体8文字の中で中央に配置するため、前後に2個ずつ半角スペースを入れています。

カッコの中の整数を8から9にしたらどうなるでしょうか。
試して確認しましょう。

.. code-block:: python

    >>> 'ようこそ'.center(9)
    '   ようこそ  '

ようこその前に半角スペース3文字、後に半角スペース2文字が埋められました。
半角スペースが前後に同じ数だけ入れられない場合は、前に来る半角スペースが多くなるようですね。
他の例として ``'ようこそ'.center(7)`` でも確認してみてください。
本の記述を読んだだけでは納得できないと思ったら、自分の手を動かして確認してみてくださいね。
本はあなたのペースで読み進めればよく、気になることがあったら寄り道して、納得するまで手を動かしてみてください。

それでは次の話題に進みます。
カッコの中には整数に加えて、文字列も指定できます。
例を見てください。

.. code-block:: python

    >>> 'ようこそ'.center(8, '☆')
    '☆☆ようこそ☆☆'

できあがった文字列は、半角スペースの代わりに、カッコに指定した文字列 ``'☆'`` が使われて中央寄せとなりました。
このように文字列が指定された場合はそれを使い、指定されなかった場合は半角スペースを使うという動作をします。

.. https://docs.python.org/ja/3/library/stdtypes.html#str.center

それでは、ここまでの書き方を使って、メッセージカードの文章が簡単に作れることを確認しましょう。
メッセージカードの1列当たりの文字数を数えると、20文字と分かります。
つまり、20文字の中で「ようこそニッキーさん」を中央に表示しているわけです。
中央に寄せた残りを埋めるために使っている文字は「☆」ですね（「ほし」を変換すると記号の☆に変換されるでしょう）。
ここまでで分かったことをもとに、Pythonのコードを書いて試してみましょう。

.. code-block:: python

    >>> 'ようこそニッキーさん'.center(20, '☆')
    '☆☆☆☆☆ようこそニッキーさん☆☆☆☆☆'

ここで1つ注意です。
作りたいメッセージを注意して見ると、「ようこそニッキーさん」の前後に半角スペースが1つずつ入っていますね。
これはどうすれば実現できるでしょうか。
今回は半角スペースを含めた文字列 ``' ようこそニッキーさん '`` をあらかじめ作っておくことにします。

先ほどのPythonのコードをアップデートすると、以下のようになります。

.. code-block:: python

    >>> ' ようこそニッキーさん '.center(20, '☆')
    '☆☆☆☆ ようこそニッキーさん ☆☆☆☆'

作りたいメッセージを作ることができました！
あとはインタラクティブシェルからコピーして使いましょう。

``'ある文字列'.center()`` を使うと、中央に揃えるために何文字挿入するかを私たちが考えなくてもよくなります。
これはとても便利ですね。
ある文字列の長さが変わったり、中央寄せとする文字列全体の長さが変わったりしたときも、プログラムの修正は少なく済むためです。
連結と繰り返しを使った場合と比較してみてください。

練習問題
------------------------------------------------

飾ったメッセージの別バージョンとして、誕生日のお祝いのメッセージを作ってみましょう。
紹介したメッセージを見て、作りたいメッセージが浮かんだ方は、ぜひそれをPythonで実現することに取り組んでみてください。
どんなメッセージを作ろうか浮かばないという方は、以下のようなメッセージを作ってみましょう。


.. code-block:: none

    ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆

    ◇◇◇◇◇◇ ナオワイさん ◇◇◇◇◇◇

    ◇◇◇◇◇◇◇◇誕生日◇◇◇◇◇◇◇◇◇
    ♡♡♡♡♡♡♡おめでとう♡♡♡♡♡♡♡♡

    ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆

1行でかまいませんので、インタラクティブシェルでPythonのコードを試してみてください。

解答

例示したメッセージの作り方を示します。

1行の文字数は20文字です。

一番上と下にある☆を並べた行は、文字列の繰り返しで作ることができますね。

.. code-block:: python

    >>> '☆'*20
    '☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆'

☆を並べた上の行に続く「ナオワイさん」の行は、先ほど紹介した「ようこそニッキーさん」の例と同じです。
「ナオワイさん」の前後には半角スペースが1つずつ入っていることに注意しましょう（埋めるのに使う◇は「ひしがた」で変換できるでしょう）。

.. code-block:: python

    >>> ' ナオワイさん '.center(20, '◇')
    '◇◇◇◇◇◇ ナオワイさん ◇◇◇◇◇◇'

その下に続く2行は、中央に寄せる文字列の前後には半角スペースは不要ですね。
以下のようなPythonのコードで実現できます（「おめでとう」を埋めるのに使う♡は「はーと」で変換できるでしょう）。

.. code-block:: python

    >>> '誕生日'.center(20, '◇')
    '◇◇◇◇◇◇◇◇誕生日◇◇◇◇◇◇◇◇◇'
    >>> 'おめでとう'.center(20, '♡')
    '♡♡♡♡♡♡♡おめでとう♡♡♡♡♡♡♡♡'

Pythonを使って、装飾したメッセージも作れるようになりましたね！

.. note:: （やや発展）プログラミングでやっていること

    次の節に進む前に、プログラミングでやっていることを整理しておきましょう。
    このコラムの内容はやや発展的なので、よく分からなくても気にする必要はありません。
    先に進む中でふとした瞬間に「こういうことだったのか」と気づくこともありますので、よくわからないことは今後の楽しみと考えましょう。

    さて、プログラミングでやっていることを考えます。
    これまでに ``2 + 3`` や ``"万歳！" * 3`` という例を見てきました。
    これらの例に共通な説明を考えます（難しいかもしれませんが、少し考えてみてください）。

    共通な説明として **値に処理を適用している** というのはいかがでしょうか。
    上記の例では ``2`` や ``3`` は数の値（数値）ですし、 ``"万歳！"`` は文字の値（文字列）です。
    ``2 + 3`` では、数値の ``2`` に ``3`` という別の数値を足すという処理を ``+`` で行っています。
    ``"万歳！" * 3`` では、文字列の ``"万歳！"`` を数値の ``3`` 回だけ繰り返すという処理を ``*`` で行っています。
    ``'ようこそ'.center(8)`` という例も見ましたが、文字列 ``'ようこそ'`` について、全体を8文字として中央に配置する（``'ようこそ'.center(8)``）という処理を適用しています。

    ここで値をもう少し広く捉えると、情報と言えるのではないでしょうか。
    つまりプログラミングでは、**情報を処理している** わけです。
    ここまで処理としては、プログラミング言語に用意されたものを紹介してきました（``+`` や ``*`` や ``center``）。
    今後は自分の好きな処理を用意することも扱います。
    好きなように処理を作る方法が分かると、情報を思いのままに処理できますので、楽しみにしていてください。

    情報の処理という広い見方を紹介しましたが、プログラムのコード1つ1つに視点を戻すと、情報よりも数値の値や文字列の値として扱う方が都合がいい点があります。
    情報は広い言葉なので、どんな値かが掴みづらいです。
    プログラムを実行する場合には、具体的な値の方が都合がいいのです（これは抽象的で曖昧な指示より具体的な指示の方が行動しやすいのと似ています）。
    そこで、情報が具体的にどんな値か（数値なのか、文字列なのか、この後紹介する値か）を示すのに「**型** （type）」という概念を用います。
    どんな情報かを表す型を使って情報に制約をかけることで、情報をプログラミングで扱いやすくしているわけです。

.. エラーの解決について

プログラマの思い違いでエラーが起こった場合は、思い違えたわずかな箇所を修正することで期待する結果を得られます。

.. （代入の節での振り返りに使う？）intとfloatのコラムのまとめ

これまで紹介した数値と文字列について、みなさんは全部で3つの型を知っています。
数値には、整数という型（例： ``29`` ）と小数という型（例： ``1267.5`` ）の2つがあります。
