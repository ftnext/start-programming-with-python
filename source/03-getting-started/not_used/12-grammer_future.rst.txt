この先で待つPython
================================

.. TODO: if文で比較演算子としか言っていないためここで以下に言及しておきたい
    （比較演算子と同様に ``True`` または ``False`` を返す関数も書くことができます）。
    蜜レビューの中でのコメントで提案する

Pythonのプログラムを読み込んで使う
------------------------------------------------

.. モジュールは出さずに、クラスだけ紹介した（新しい用語が増えるのを防ぐ意図）

ここでは、これまでに作ったPythonのファイルから関数を読み込みました。
実は、Pythonのファイルは「モジュール」と呼ばれます。
モジュールから読み込めるものは関数だけに限りません（「クラス」というものも読み込めます。ただし本書では立ち入りません）。
そして、Pythonには、私たちが作ったモジュールに加えて、**あらかじめ多種多様なモジュール** が用意されています。
Pythonでプログラミングをする中では ``import`` を使って、Pythonに用意されたモジュールから関数やクラスを読み込み、
実現したい処理を書いていきます（``import`` を使うだけでいろんなことができるようになるので、5章以降をお楽しみに）。

.. Python では定義をファイルに書いておき、スクリプトの中やインタプリタの対話インスタンス上で使う方法があります。
    このファイルを モジュール (module) と呼びます。
    https://docs.python.org/ja/3/tutorial/modules.html (冒頭)

変数や関数の名前は英語で付ける
------------------------------------------------

.. 以下は言い方を変えて使った

Pythonの特徴は、英文のように書けることです。
Pythonのプログラムを読む中で分からない単語があったら、辞書で調べることをオススメします。
Macだともともと入っている「辞書.app」が便利です。
分からない単語を辞書で調べることで、コードの意味が掴みやすくなります。

複数の値を扱うもう一つの方法
------------------------------------------------

.. note:: タプルの本体？

    .. 複数の値を返す関数とも関係する（not_used止まりだが）

    タプルの肝は ``()`` と見せかけて ``,`` です。
    ``4, 6`` とすると、``()`` がなくてもタプルができます。

    .. code-block:: shell

        >>> t = 4, 6
        >>> type(t)
        <class 'tuple'>

    要素が1つだけのタプルは ``(1)`` ではなくて、``(1,)`` として呼び出します。
    
    .. code-block:: shell

        >>> t = (1,)
        >>> type(t)
        <class 'tuple'>

    タプルの肝はカンマなので ``1,`` としても要素が1つだけのタプルができます。

    .. code-block:: shell

        >>> t = 1,
        >>> type(t)
        <class 'tuple'>

.. 反復の様子は見せなくても伝わると考え、カットした

リストと同じようにタプルの要素それぞれについて、``for`` 文で反復できます。

.. code-block:: shell

    >>> chosha_tachi = ('susumuis', 'nao_y', 'nikkie')
    >>> for chosha in chosha_tachi:
    ...     print(f'{chosha}さん、ごきげんよう')
    ...
    susumuisさん、ごきげんよう
    nao_yさん、ごきげんよう
    nikkieさん、ごきげんよう

.. リストに合わせて、タプルでもinsertやdelは出さない

インデックスを指定できますが、``del`` を実行するとエラーになります。

.. code-block:: shell

    >>> del gakki_tuple[1]
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: 'tuple' object doesn't support item deletion

.. + 演算子はリストで紹介していないのでカットした

なお、タプルを指す変数自体に代入して別のタプルを指すようにすることは可能です。
また、タプルに別のタプルを足し算すると、新しいタプルを返します（リストと似ていますね）。
そのため、以下のようにすれば、要素を追加した新しいタプルで更新することができます。

.. code-block:: shell

    >>> gakki_tuple + ('トランペット',)
    ('チューバ', 'ユーフォニアム', 'コントラバス', 'トランペット')
    >>> gakki_tuple += ('トランペット',)
    >>> gakki_tuple
    ('チューバ', 'ユーフォニアム', 'コントラバス', 'トランペット')

これはエラーにならないということを示す意味で紹介しました。
タプルでこのような操作をする必要があるときはリストの使用を検討することをオススメします
（リストであれば ``append`` も ``insert`` もあるので、より変更しやすいでしょう）。

辞書
----------------

.. https://docs.python.org/ja/3/tutorial/datastructures.html#dictionaries

Pythonには「辞書」と呼ばれるデータの持ち方があります。
これは私たちがふだん辞書を引くのと同じです。
意味のわからない言葉を辞書の索引から探すと、語の意味が見つかります。
ここまでで「ユーフォニアム」という楽器が分からず、辞書を引いた方もいるかもしれません。
索引から「ユーフォニアム」を探すと、「低音の金管楽器」のような意味が見つかるのではないでしょうか。

Pythonの辞書には「キー」と「値」のペアが登録されています。
私たちが普段使う辞書との対応は以下のようになります。

- キー：索引（ユーフォニアム）
- 値：語の意味（低音の金管楽器）

Pythonの辞書はキーと値をペアにして登録し、キーを元に値を指すことができます。
実際にインタラクティブシェルで見ていきましょう。

Pythonの辞書は ``{}`` で囲みます。
``{}`` の中には ``キー: 値`` という組を好きなだけ書きます
（``キー:値`` とコロンの右側の半角スペースはなくてもかまいません。
Pythonを書く上でこの半角スペースを入れることが勧められているので、本書は半角スペースを入れて書いています）。

今回は果物の価格を辞書で表します。

.. code-block:: shell

    >>> {'りんご': 100, 'みかん': 298}
    {'りんご': 100, 'みかん': 298}

ここで作った辞書には、りんごの価格が100円、みかんの価格が298円と登録しました。
Pythonの辞書はプログラマが作れるオリジナルの辞書です。

辞書のキーには文字列や数値が設定できます。
また値には文字列や数値のほか、リストや辞書も設定できます。

辞書を表すデータの型を確認しましょう。

.. code-block:: shell

    >>> type({'りんご': 100, 'みかん': 298})
    <class 'dict'>

辞書を表すデータの型は ``dict`` です。
これは、辞書のキーや値のデータ型によらず変わりません。
辞書を表す英語 dictionaryの先頭4文字から来ています。

辞書も変数に代入できます。
値段を表す辞書なので、変数名は ``nedan`` としています。

.. code-block:: shell

    >>> nedan = {'りんご': 100, 'みかん': 298}
    >>> nedan
    {'りんご': 100, 'みかん': 298}

.. figure:: images/12/12-1_dict_image.png
    :align: center

ここまでで辞書にキーと値を登録する方法を見てきました。
キーと値の組をいくつか登録した辞書は、複数の変数を扱っているとも言えます。
続いて、辞書を「引いて」、登録してある値を指定する方法を紹介します。

キーを使うと、対応する値を指定できます。
「キー〇〇の値は？」と調べるイメージです。
変数 ``nedan`` の指す辞書について、キー ``'りんご'`` に対応する値を指定してみましょう。

.. code-block:: shell

    >>> nedan['りんご']
    100

りんごの価格100円が表示されました。
このように、辞書はキーと値のペアが登録されており、キーを使うことで、対応する値を指定することができます。

``辞書[キー]`` は **変数を指定しているのと同じ** です。
そのため、代入により、キーに対応する値を更新できます。

.. code-block:: shell

    >>> nedan['りんご'] += 50
    >>> nedan['りんご']
    150

``nedan['りんご']`` が指す値を50増やしています。
りんごの価格が50円値上がりしました。

.. figure:: images/12/12-2_dict_value_update.png
    :align: center

練習：変数 ``nedan`` が指す辞書からみかんの値段を取り出してみましょう（キー ``'みかん'`` を指定すればいいですね）。

辞書に登録されていないキーを使って、キーに対応する値を指定した場合、``KeyError`` が発生します。

.. https://docs.python.org/ja/3/library/exceptions.html#KeyError

.. code-block:: shell

    >>> nedan['メロン']
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    KeyError: 'メロン'

``KeyError`` は ``'メロン'`` というキーが辞書にないことを表しています。

.. figure:: images/12/12-3_dict_keyerror.png
    :align: center

辞書を作った後も、キーと値を追加で登録できます。
キーが辞書に存在しないとき ``辞書[キー]`` が指定する変数に値を代入することで、辞書に追加登録できます
（キーが辞書に存在する場合は上で見たように値の更新となります）。

.. code-block:: shell

    >>> nedan['メロン'] = 600
    >>> nedan
    {'りんご': 150, 'みかん': 298, 'メロン': 600}

.. figure:: images/12/12-4_dict_add_item.png
    :align: center

メロン 600円を ``nedan`` の指す辞書に登録したので、もう ``KeyError`` は発生しません。

.. code-block:: shell

    >>> nedan['メロン']
    600

練習：他の果物の価格を追加してみましょう
（もも、ナシ、キウイ、ぶどうなどからお好きなものをキーとして使ってください）。

リストのところで紹介した会計の例に辞書を導入してみましょう。
まずメニューを辞書で用意します（商品名をキーとし、価格を値とします）。

.. code-block:: shell

    >>> shokuji_dai = {'ドリア': 300, 'ドリンクバー': 180, 'プリンとティラミス': 400}

リストで紹介した例と同様に、ドリアとドリンクバー、追加でプリンとティラミスのセットプレートを注文したとします。
今回は ``shokuji_dai`` が指す辞書に金額が登録されているので、商品名を使って金額を指定できます。

.. code-block:: shell

    >>> chumon_kingaku = []
    >>> chumon_kingaku.append(shokuji_dai['ドリア'])
    >>> chumon_kingaku.append(shokuji_dai['ドリンクバー'])
    >>> chumon_kingaku.append(shokuji_dai['プリンとティラミス'])

合計金額を求めましょう。

.. code-block:: shell

    >>> sum(chumon_kingaku)
    880

辞書がメニューと金額を対応づけているので、``chumon_kingaku`` が指すリストを操作する際に金額を直接扱わなくて済みましたね。
メニューと金額の組を覚えている必要はなくなり、メニューをキーに辞書を使うことで金額が指定できるようになりました。
「メニュー〇〇の価格がXX円」というように、**キーと値の間に意味付けができる** のが辞書のもたらす効果です。

また、もう1つ辞書を使うことで、お客さまが複数でも対応できます。
もう1つの辞書にテーブル番号と注文金額の対応を登録すればいいのです。

.. code-block:: shell

    >>> teburu_kaikei = {}

お客さまが来店し、3番の席に座りました。
注文金額を表すリスト（今は空）を設定しましょう。

.. code-block:: shell

    >>> teburu_kaikei[3] = []

お客さまは、プリンとティラミスのセットプレートとドリンクバーを注文しました。
``teburu_kaikei[3]`` はリストを指す変数なので、``append`` が使えます。

.. code-block:: shell

    >>> teburu_kaikei[3].append(shokuji_dai['プリンとティラミス'])
    >>> teburu_kaikei[3].append(shokuji_dai['ドリンクバー'])

3番の席のお客さまの会計です。

.. code-block:: shell

    >>> sum(teburu_kaikei[3])
    580

このように辞書とリストを組み合わせることで、多少複雑な会計もPythonで扱えました。

練習：例にならって、直近の注文をリストで扱った練習に辞書を導入してみてください。

辞書については以上です。
本書でこの後登場するプログラムに辞書は登場しませんが、今後辞書と出会ったら、この項目を思い出してみてください。

もう少し踏み込んで知りたい方は、Python公式ドキュメントの中のチュートリアルをご覧ください：
https://docs.python.org/ja/3/tutorial/datastructures.html#dictionaries

.. ----- 以下は粗レビューにも入っていない -----

辞書
----------------

- 辞書も複数の変数をまとめて扱えるデータ構造

練習：注文の例の価格を使って、辞書を作ってみましょう（キー：ドリア、ドリンクバー、デザート）

- 変数の値が辞書になっていることが確認できる
- 変数nedanの型はdict（辞書も1つの型）

    >>> type(nedan)
    <class 'dict'>

- 変数を使っても辞書は作れる
- 変数に入っている値に置き換わる

.. code-block:: shell

    >>> ringo = 'りんご'
    >>> ringo_nedan = 100
    >>> {ringo: ringo_nedan, 'みかん': 298}
    {'りんご': 100, 'みかん': 298}

- キーと値のペアを複数並べなくても辞書を作れる
- 空の辞書（空のリストと同じように使う）

.. code-block:: shell

    >>> {}
    {}
    >>> type({})
    <class 'dict'>

- キーと値のペア1つからなる辞書

.. code-block:: shell

    >>> {'3章': 'nikkie'}
    {'3章': 'nikkie'}

- リストと違って辞書は「計算」できない（``+`` でつなげられない）

練習：変数を2回以上使って辞書を作ってみましょう（キーと値のペアは2個以上とします）

.. 辞書について頭出しとして簡単に書いた。以下は手短に済ませるために使わなかったアウトライン

複数の変数の扱い
================================

辞書で複数の変数を一度に扱う
------------------------------------------------

- 辞書を介して複数の変数の扱い方を紹介

..note:: 補足

    - 辞書を変数に入れていない場合は以下と同じ（リスト+[インデックス]でもよい）
    - 辞書も長くなりやすいので、変数に入れて繰り返しを避けることが多い

    .. code-block:: shell

        >>> {'りんご': 100, 'みかん': 298}['りんご']
        100

練習：数値計算のところでやった価格の計算、辞書から取り出した値を使って取り組んでみましょう

.. code-block:: shell

    >>> (nedan['りんご']*3 + nedan['みかん']) * 1.08
    645.84

- nedan['りんご'], nedan['みかん']はそれぞれが変数
    - → 辞書の値は変数として扱えて、キーで指し分けている

- 辞書の値の1つ1つは変数と同じなので代入できる
- 代入したキーに対応する値を除いて変化がない（キー'みかん'の値は変わらない）

.. note:: 注意

    - キーを指定せずに代入すると、辞書が消えてしまう

    .. code-block:: shell

        >>> nedan2 = {'りんご': 100, 'みかん': 298}
        >>> nedan2
        {'りんご': 100, 'みかん': 298}
        >>> nedan2 = 120
        >>> nedan2
        120

    - 変数への代入で上書きとなった

練習：辞書nedanからみかんの値段を50円安くしてみましょう

辞書の中身を編集する
------------------------------------------------

- 値の追加の逆の処理として、辞書からキーと値のペアを削除できる
- ``辞書名.pop(削除したいペアのキー)``
- popという処理はリストのときと似た動きをする

.. code-block:: shell

    >>> nedan.pop('りんご')
    120
    >>> nedan
    {'みかん': 298, 'メロン': 600}

- キー'りんご'とそれに対応する値120が削除された
- ``nedan.pop('りんご')`` で削除する値は取り出されている

.. code-block:: shell

    >>> nedan = {'りんご': 120, 'みかん': 298, 'メロン': 600}
    >>> sakujo_nedan = nedan.pop('りんご')
    >>> nedan
    {'みかん': 298, 'メロン': 600}
    >>> sakujo_nedan
    120

- ``nedan.pop('りんご')`` で取り出された値を変数に入れて確認した
