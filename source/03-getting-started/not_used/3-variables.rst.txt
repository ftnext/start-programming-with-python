変数
============================

.. 執筆中に図を参照するかもしれないので一時退避

変数を使って書いた ``banzai * 3`` というコードから ``"万歳！" * 3`` が計算されて、
変数 ``banzai`` が指している文字列が3回繰り返されて表示されました。

.. figure:: images/3/3-6_use_variable_string.png
    :align: center
    :width: 60%

.. 演算子の説明は詳しすぎると思われるのでいったんカット

代入で行われることを改めて説明すると、 ``=`` 記号の右側の値を左側の変数が指すようになります。
``=`` は代入という一種の計算（処理）をしているわけです（左側の数値と右側の数値を足す ``+`` と同様に処理をしています）。
ですので、＝は数学においては左側と右側が等しいことを表しますが、プログラミングでは等しいではなくて、代入を表します。
これはPythonに限らず、他のプログラミング言語でも代入には ``=`` が使われます。

.. 上と同様（変数自身が指す値を使った計算結果を代入して更新する書き方）

これは ``=`` の左側の変数の現在の値に ``=`` の右側の値を演算子で計算した結果を、``=`` の左側の変数に代入するということです。

.. 丁寧に例を出さなくても良さそうだったので変数の章の2節には移さずにカット

暗算できない場合の他にも便利なことがあります。
計算結果に名札が付いて変数で指すようになることで、**再利用** しやすくなります。

.. code-block:: python

    >>> seki * 3
    72
    >>> seki * 12
    288

変数を使わない場合、``24 * 3`` (1)や ``4 * 6 * 3`` (2)のように書くことになるでしょう。
変数を使うと、(1)や(2)より簡単に書けます。
(1)のように計算結果を使う場合は、計算結果を知る必要があります。
計算結果が暗算でわからない場合は書きにくい書き方ですね。
(2)のように計算式を再度使う場合は、計算式を繰り返す中で、値を間違えて入力して計算してしまう恐れがあります。

先ほどコラムで変数の名前について説明しました。
変数を使うと、計算結果が何を表すかが明確にできます。
変数の意味するものがはっきり分かるプログラムは読みやすいプログラムと言えます。
例として、1週間は何分かを変数に代入してみましょう。

.. code-block:: python

    >>> fun_isshuukan = 24 * 7 * 60

.. 練習問題(1)〜(3)を ``+=`` のような演算子とイコールの形で書き直し（解答は(3)以外はカットした）

解答

(1)

.. code-block:: python

    >>> c = 5
    >>> c -= 3
    >>> c
    2

(2)

.. code-block:: python

    >>> c *= 4
    >>> c
    8

.. column:: 「プログラム」や「コード」は同じもの

    プログラミングはプログラムを書くことです。
    書かれたプログラムは、コードと呼ばれることもあります。
    コードには対応する英単語の中には「電線（cord）」もあります。

    実はコンピュータが登場した当初は、配線をつなぎ変えてプログラミングをしていました。
    当時のコンピュータは、今のように小型ではなく大型です。
    プログラミングは、配線（コード）をつなぎ変えることと同じだったわけです。
    そこから、コードという言葉がプログラムも意味するようになりました。

    大型のコンピュータの時代の名残で、エンジニアは、プログラムを指してコードという言葉を使っています。

    .. TODO なにかの本で読んだ記憶ベース。要裏とり（cordとcodeなので、成り立ちにはもう少しあるのかも）
