関数
============================

「習うより慣れろ」の精神で、手を動かしていきましょう。

.. note:: 関数 ``len`` のヒミツ

    実は ``len`` は文字列に限らず、 *長さを持つモノ* を数えることができます。
    ここまでに登場した、整数、小数、文字列の中で長さを持つのは文字列だけですが、
    この本を読み進めていくと、他にも長さを数えられるものがあることが分かります。

文字数を数える関数を使ってみよう
--------------------------------

.. code-block:: shell

    >>> len('本書は、初心者に教える経験が豊富なプログラマによる、プログラミング入門書です。')
    39

本書の概要をもっと書かないといけませんね。

先ほどの概要の文字数の例では、長くなった概要を変数に代入すると便利です。

.. code-block:: shell

    >>> gaiyou = '本書は、初心者に教える経験が豊富なプログラマによる、プログラミング入門書です。初心者がつまずくポイントを実際に見てきた経験を基に、つまずかずにプログラミング入門できるように本書は執筆されました。'
    >>> len(gaiyou)
    97

長さはよさそうなので、あとは推敲です。

.. code-block:: shell

    >>> tochuu = '本書は、初心者に教える経験が豊富なプログラマによる、プログラミング入門書です。'
    >>> ima_no_mojisuu = len(tochuu)
    >>> ima_no_mojisuu
    39

関数を適用した結果を変数に代入しておき、後で再利用することはよく行われます。
残りの何文字書く必要があるか、確認してみましょう。

.. code-block:: shell

    >>> 100 - ima_no_mojisuu
    61

.. note:: 文字列に改行を含める方法

    概要などの文字数を数える際、文字列の中に改行を入れるとエラーが発生します。

    .. code-block:: shell

        >>> gaiyou = '本書は、初心者に教える経験が豊富なプログラマによる、プログラミング入門書です。  # doctest: +SKIP
          File "<stdin>", line 1
            gaiyou = '本書は、初心者に教える経験が豊富なプログラマによる、プログラミング入門書です。
                                                            ^
        SyntaxError: EOL while scanning string literal

    改行を入れるためにEnterキーを押したところ、Pythonは一連の入力が終わったものと判断しました。
    そして入力された内容を見ると、文字列の最初の ``'`` があるにも関わらず、最後の ``'`` がないため、
    文法エラー（``SyntaxError``）を発生させました。

    文字列には改行を入れられないわけではありません。
    Pythonの場合に、改行を入れられる文字列の書き方を紹介しましょう。
    文字列の始めのクォートを ``'''`` や ``"""`` のように3つ重ねます。
    そして文字列の終わりに初めと同じ3連続クォートをつけます。

    .. code-block:: shell

        >>> gaiyou = '''本書は、初心者に教える経験が豊富なプログラマによる、プログラミング入門書です。
        ... 初心者がつまずくポイントを実際に見てきた経験を基に、入門時につまずかないようにする工夫を散りばめて本書は執筆されました。'''
        >>> len(gaiyou)
        100

    ``'''`` を使ったところ、改行を入れても ``SyntaxError`` にはならず、文字数を数えられました。
    ``'''`` はインタラクティブシェルではないどこかで概要をまとめた後、インタラクティブシェルで文字数を確認する際に使うと便利です。
    ``'''`` で始めれば、改行を含む文字列をインタラクティブシェルに貼り付けても ``SyntaxError`` になりません。

    なお改行は、文字列の中では、改行を表す文字1つとして扱われます。
    ですので、推敲を加えずに改行だけを加えた場合、文字数が1文字増えます。

    .. code-block:: shell

        >>> gaiyou = '''本書は、初心者に教える経験が豊富なプログラマによる、プログラミング入門書です。
        ... 初心者がつまずくポイントを実際に見てきた経験を基に、つまずかずにプログラミング入門できるように本書は執筆されました。'''
        >>>
        >>> len(gaiyou)
        98

    筆者は決められた文字数の文章を書くとき、ここで紹介した方法でPythonに文字数を数えてもらっています。

    .. 三連引用符 ref: https://docs.python.org/ja/3/tutorial/introduction.html#strings

関数でよく見かけるエラー
--------------------------------

.. この段落は書きっぱなしになってしまっている

型によっては関数が機能しないというのは不便と感じるかもしれません。
ですが、プログラミングにおいては、型がもたらす利点がたくさんあります。
私も始めたときはピンとこなかったのですが、型によってデータの種類を制約していることがポイントです。
このあたりは本書の残りでお伝えできればと思っています。

.. note:: 変数を使った条件が成り立たない場合

    - 「2+3の計算結果と変数ni_tasu_sanに入っている値は等しいですか」という条件は一見正しそう
    - 一見正しそうな条件が成り立たない場合、変数の値が想定と違う（考え違いをしている）
    - 条件の直前でprint関数を使って変数の値を確認すると、考え違いに気づける

    .. code-block:: python

        print('プログラムを開始します')
        ni_tasu_san = 5
        ni_tasu_san = 6
        print(ni_tasu_san)  # 変数に入った値を確認
        if 2+3 == ni_tasu_san:
            print('変数ni_tasu_sanに2+3の計算結果が入っています')
        print('プログラムを終了します')

    .. code-block:: shell

        $ python if_bun.py
        プログラムを開始します
        6
        プログラムを終了します
        $

データの型を確認する関数 ``type``
----------------------------------------------------------------

私たちは ``2`` という値の種類を整数として認識します。
それに対して、Pythonにとっては ``2`` という値の種類は ``int`` です。
``type`` 関数では、ある値について、Pythonにとっての型を確認できます。

練習問題：
ここまでで登場した整数の値や小数の値を1つずつ挙げ、型を確認してみましょう。

整数の場合として、計算結果が整数の式を渡してみます：

.. code-block:: shell

    >>> type(7 * 52)
    <class 'int'>

計算結果の ``364`` について型が返され、整数であることが確認できました。

小数の場合も、計算結果が小数の式を渡してみます：

.. code-block:: shell

    >>> type(60 / 24)
    <class 'float'>

計算結果の ``2.5`` について型が返され、小数であることが確認できました。

練習問題：
ここまでで使った文字列を1つ挙げ、型を確認してみましょう。

.. code-block:: shell

    >>> type('威風' + '堂々')
    <class 'str'>

整数、小数の場合に計算式を渡したときと同様に、文字列の足し算（連結）が計算された結果について、型が返されています。

.. note:: エラーメッセージを読んでみる

    ``type`` 関数でPythonにとっての型（``int``, ``float``, ``str``）を知りました。
    これらを知ると、エラーメッセージがこれまでよりも読めるようになります。

    .. code-block:: shell

        >>> len(123)
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: object of type 'int' has no len()

    これまでに見た ``TypeError`` ですが、``int`` という型が出てきています。
    これは ``int`` という型（整数）には ``len`` 関数を適用できないということを表しているわけです。

    ``TypeError`` は型に関わるエラーですから、興味がある方はこの本を遡って、これまでに出会った ``TypeError`` を読んでみてください。

    .. TypeError https://docs.python.org/ja/3/library/exceptions.html#TypeError
        > 組み込み演算または関数が適切でない型のオブジェクトに対して適用された際に送出されます。

値を表示する関数 ``print``
----------------------------------------------------------------

.. columnネタ：対話モードの出力と ``print`` 関数の出力の違いについて

これを見て、「インタラクティブシェルに単に ``123`` と入力してEnterキーを押す場合と何が違うのだろう」と思われるかもしれませんね。

.. code-block:: shell

    >>> 123
    123

2節文字列のコラムでも触れましたが、インタラクティブシェルは「Pythonにとっての表示」をします。
整数 ``123`` はPythonにとっても ``123`` ということです。
これは私たちの整数の扱いと似ていますね。
小数も整数と同様です（興味があったら、私たちの小数の扱いと似ていることを確認してみてください）。

``print`` 関数による表示は、**私たちにとってわかりやすい** という特徴があります。
これは文字列を引数に渡すと分かります。

.. ref: https://docs.python.org/ja/3/reference/datamodel.html#object.__str__
    > 「オブジェクトの「非公式の (informal)」あるいは表示に適した文字列表現を計算するために、
     str(object) と組み込み関数 format(), print() によって呼ばれます」

インタラクティブに文字列 ``'こんにちは！'`` を入力してEnterキーを押した場合は、
Pythonにとって文字列であることを表すシングルクォートも表示されます。

.. code-block:: shell

    >>> 'こんにちは！'
    'こんにちは！'

``print`` 関数も、プログラマの思い込みによる間違いに気づくのに使われます。
例えば、次のようなケースです：

- 個数を表す変数の指す値が ``2`` だと思っているが、どうにも結果がおかしい
- ``print`` 関数を適用すると、その変数が指す値は ``5`` だった
- 値を変えているところがないかコードを確認すると、個数を表す変数の値を上書きしていた
- 変数名の入力間違いが原因で上書きしてしまっていた

このように、``print`` 関数は、プログラムで使われている変数の指す値の変化を掴むのに役立ちます。
``type`` 関数の結果が思った値と異なるときに ``print`` 関数で値を見る合わせ技も行います。

また、``print`` 関数に変数を使った計算式を渡して計算結果も確認します。
この使い方は、プログラムの途中でどんな処理をしているか理解するのに一役買います。
なお、計算結果を変数に代入して、その変数を ``print`` するのと同じです。

インタラクティブシェルの続きに入力して試してみましょう。

.. code-block:: shell

    >>> a = 4
    >>> b = 6
    >>> print(a * b)
    24
    >>> print(banzai * b)
    万歳！万歳！万歳！万歳！万歳！万歳！

関数を作ってみよう
--------------------------------

組み込み関数を繰り返し使うことでプログラムを書くことができます。
また、組み込み関数の結果を組み合わせて使ってプログラムを書くこともできます。

ここまでに紹介した組み込み関数はごく一部ですが、ドキュメントにはたくさんの種類が載っています
（このあとも本書で紹介していきますのでお楽しみに）。
「こんな処理をしたい」と作りたい処理があれば、組み込み関数の使い方を調べて組合せることで実現できるでしょう。

.. 関数の更新は対話モードだけの話（ファイルを使った話とは無関係）なので削ることにした

例えば、``aisatsu2`` 関数で名前の後ろの ``！`` を ``、`` に変えたいと思ったら、
同じ名前で関数を再度定義すればよいです。

    >>> def aisatsu2(namae):
    ...     print(namae + 'さん、')
    ...     print('ごきげんよう')
    ...
    >>> aisatsu2('susumuis')
    susumuisさん、
    ごきげんよう

変数には何回も値を代入でき、最後に代入した値を指すのでしたね。
それと似ていて、同名の関数を定義することができ、最後に定義された関数の定義が使われます。

関数の定義を使うと、組み込み関数を上書きすることも起こりえます。
``aisatsu`` 関数と同じ処理の関数を ``len`` という名前で作ってみます。
この例は試さなくても大丈夫です。

上書きする前は、``len`` 関数は文字数を返します。

.. code-block:: shell

    >>> len('susumuis')
    8

では上書きしてみましょう。

.. code-block:: shell

    >>> def len(namae):
    ...     print(namae + 'さん、ごきげんよう')
    ...
    >>> len('susumuis')
    susumuisさん、ごきげんよう

この例を試した方は、インタラクティブシェルに ``exit()`` と入力し、Enterキーを押しましょう。
インタラクティブを終了させます。
再度インタラクティブシェルを立ち上げると、``len`` 関数は文字数を返すように戻っています。

関数の返り値
--------------------------------

``aisatsu`` 関数を少し変更して、実際の引数に渡した人の名前が入った挨拶文を返すように変更します。
挨拶文、つまり文字列を返す関数にします。
関数の名前は ``aisatsu_bun`` とします。
実際の引数に人の名前を表す文字列が渡されるので、形式的な引数は、これまでの例と同様に ``namae`` を使います。

.. print関数を紹介したときの説明を前提にした文章

``print`` 関数を使った ``aisatsu`` 関数のときと似た表示になっています。
ですが、前後にシングルクォート ``'`` がある点が異なります。
``print`` 関数ではなく、インタラクティブシェルの機能によって表示されているため、Pythonにとっての出力となっています。
関数が返した値は文字列ですから、インタラクティブシェルの機能でシングルクォート付きで表示されました。

.. 関数を作る理由は階層構造を作って読みやすくするを軸に書き直した（参照用に移植）

ここまででプログラミングでは関数を作ることもできると体験しました。
では、なぜプログラミングでは、関数を自分で作るのでしょうか。

関数を作るということは、いくつかの処理に名前を付けてひとまとまりにすることです。
作った関数は、組み込み関数を使うときと同じように、引数を渡して呼び出すことができます。
``aisatsu2`` 関数では、``print`` 関数の呼び出し2回をひとまとまりにしました。
表示される結果は関数を使っても使わなくても同じです。
関数のいいところの1つは、**同じ処理を繰り返し書かずに済む** ことです。
繰り返し書かずに関数を書くことで、関数を変えるだけで処理の中身も変えられます。

最後にまとめます。

関数の使い所は処理をまとめるというところにあります。
組み込み関数を何回か呼び出すという処理を、自分に必要な関数としてまとめられます。
変数に関数の返り値を保存することで、関数の処理結果を再利用してプログラムを書くことができます。
