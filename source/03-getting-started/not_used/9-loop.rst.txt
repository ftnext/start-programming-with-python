反復
================

``while`` による繰り返し
--------------------------------

.. 説明が冗長との粗レビュー完走を受け、表を使ってリライトした。すぐ参照できるバックアップとして残す

では、``while`` 文を使ったプログラムを書いてみましょう。
Atomで ``renshu_while.py`` というファイルを新しく作ってください。

中身は以下のようにしましょう。

.. code-block:: python
    :caption: renshu_while.py
    :linenos:

    print('プログラムを開始します')
    i = 0
    while i < 10:
        print(i)
        i = i + 2
    print('プログラムを終了します')

どのように動くか見ていきましょう。

1行目でプログラム開始の旨が表示されます。
2行目では変数 ``i`` に ``0`` を代入しています。
そして3行目から5行目の ``while`` 文に差し掛かります。

``while`` 文を実行すると、まず条件式（ここでは ``i < 10``）を確認します。
条件式が ``True`` となる場合、インデントされた部分の処理が実行されます。
いま、``i`` が指す値は ``0`` ですから、``i`` は ``10`` より小さく、``i < 10`` は ``True`` となりますね。
インデントされた部分（4行目と5行目）の処理が続きます。

4行目では ``print`` 関数で変数 ``i`` の指す値（いまは ``0``）が表示されます。
5行目により、変数 ``i`` の指す値が ``2`` 増えた値に更新されます。
``i`` が ``2`` を指すようになりますね。
``while`` 文では、条件式に使われている変数（ここでは ``i``）の指す値を
``while`` に続く処理の部分の実行の中で変えることをよく行います。

``while`` に続く処理の部分（インデントされた部分）の処理が上から下へと終わりました。
インデントされた部分の処理が終わったら、**再び条件式を確認します**。
ここでは ``i`` が指す値は ``2`` に更新されています。
``i`` が ``2`` のとき、条件式 ``i < 10`` は ``True`` となりますね。
条件式が ``True`` となる場合、インデントされた部分（4行目と5行目）の処理が行われます。

5行目を実行すると、``i`` の指す値は ``4`` に更新されますね。
そして三度条件式の確認となります。

変数 ``i`` の値の変化をまとめます。

- ``i`` の指す値が ``4`` のとき、条件式は ``True`` となる。5行目の実行の中で ``i`` の指す値は ``6`` に更新される
- ``i`` の指す値が ``6`` のとき、条件式は ``True`` となる。5行目の実行の中で ``i`` の指す値は ``8`` に更新される

``i`` の指す値が ``8`` のとき、条件式 ``i < 10`` は ``True`` となりますね。
5行目を実行すると、``i`` の指す値は ``10`` に更新されます。
インデントされた部分の処理が終わったので、条件式を確認します。

いま ``i`` の指す値は ``10`` です。
このとき、条件式 ``i < 10`` は ``False`` となります。
条件式が ``False`` となったとき、インデントされた部分の処理が行われず、``while`` 文の後に続く処理の実行へと移ります。
6行目が実行されて、プログラム終了の旨が表示されます。
6行目のあとに続くコードがないので、プログラムが終了します。

``renshu_while.py`` を動かしてみましょう。

.. code-block:: shell

    $ python renshu_while.py
    プログラムを開始します
    0
    2
    4
    6
    8
    プログラムを終了します

ここまでの説明から動きを掴んでみましょう。
``0`` から始めて、``i`` の指す値が ``2`` ずつ増えながら表示されています。

``i`` の指す値が ``8`` のとき、``print`` 関数（4行目）が実行されて ``8`` と表示されています。
``i = i + 2`` （5行目）により、``i`` の指す値は ``10`` に更新されます。
``i`` の指す値が ``10`` のとき、条件式が ``False`` となるので、``while`` 文の実行は終了します。
4行目・5行目が実行されていないので、``10`` やそれ以降の表示がないわけです。

``for`` による繰り返し
--------------------------------

.. 説明が冗長との粗レビュー完走を受け、表を使ってリライトした。すぐ参照できるバックアップとして残す

「決まった回数、ある処理を繰り返す」は、「用意した値それぞれに対して処理を繰り返す」とも言えます。
``print('ごきげんよう')`` を3回繰り返すことは、以下のように変数 ``i`` の値を ``1, 2, 3`` の順で変えながらでも実現できます。

- ``i`` の指す値が ``1`` のときに、``print('ごきげんよう')`` を実行する
- ``i`` の指す値が ``2`` のときに、``print('ごきげんよう')`` を実行する
- ``i`` の指す値が ``3`` のときに、``print('ごきげんよう')`` を実行する

どちらのやり方でも「ごきげんよう」という行が3行表示されます。
変数の指す値を決まった範囲（``1, 2, 3``）で変えながら繰り返すには、Pythonでは2つの要素を使います。

リストは、変数 ``i`` の値を ``1, 2, 3`` の順で変える場合の ``1, 2, 3`` の順を指定するのに使われます。
リスト ``[1, 2, 3]`` を使うことで ``1, 2, 3`` の順を指定しています。

繰り返しでリストを使うポイントは、リストの値は順番を持っていることです。

では、``for`` 文を使ったプログラムを書いてみましょう。
Atomで ``renshu_for.py`` というファイルを新しく作ってください。

1行目の実行で、プログラム開始と表示されますね。
2行目の ``for i in [1, 2, 3]`` では、変数 ``i`` にリストの値を1つ代入します。
リストの値は順番を持っていて、この順番に沿って代入されます。
変数 ``i`` にまず代入されるのは、先頭にある ``1`` という値です。

変数 ``i`` が ``1`` を指す状態で、3行目の ``print`` 関数が実行されます。
「ごきげんよう」と1行表示されますね。

``for`` 文でインデントされた部分の処理が終わった場合、再度 ``for`` の行（2行目）に戻ります。
リストにある値のうち、次の値が ``i`` に代入されます。
リスト ``[1, 2, 3]`` で ``1`` の次にある値は ``2`` ですね。

変数 ``i`` が ``2`` を指す状態で、3行目が実行されます。
「ごきげんよう」がもう1行表示されます（表示は通算2行）。

インデントされた部分の処理が終わったので、三度 ``for`` の行に戻ります。
リスト ``[1, 2, 3]`` で ``2`` の次の値は ``3`` ですね。
``3`` が変数 ``i`` に代入されます。

変数 ``i`` が ``3`` を指す状態で、3行目が実行されます。
ここまでで「ごきげんよう」は全部で3行表示されています。

インデントされた部分の処理が終わり、``for`` の行に戻りました（4度目！）。
リスト ``[1, 2, 3]`` で ``3`` は末尾なので、次の値はありませんね。
リストの次の値がなくなったら、インデントされた部分は実行せずに、``for`` 文の次のコードに進みます。

4行目が実行され、終了と表示されました。
最後のコードが実行し終わり、プログラムが終了します。

3回という決まった回数の繰り返しは、3つの値からなるリスト ``[1, 2, 3]`` と ``for`` 文で実現されました。

.. イテレータの動きとして正確だが、長くなっているので一度移す。for文の説明に入れられるかも
    「はじめて実行する場合はリストの先頭の値が"次"の値となる」

リストを使った ``for`` 文についてまとめます。
``for`` 文では ``in`` の後ろにあるリストにまとめられた値を、先頭から始めて順番に変数に代入します。

- ``for`` 文を初めて実行する場合は、リストの先頭の値が変数に代入されて、インデントして書かれた処理を実行します。実行後、``for`` の行に戻ります
- 変数が現在指す値の次がリストにある場合、次の値が変数に代入されて、インデントして書かれた処理を実行します。実行後、``for`` の行に戻ります
- リストの末尾に至っていて続く値がない場合、インデントして書かれた処理は実行しません。``for`` 文のあとに続く処理の実行へ移ります

``for`` 文が上記のように動くことにより、決まった回数の繰り返しや、
リストのもつ複数の値それぞれへの同一処理の繰り返し適用が実現されます。

.. ----- 以下は粗レビューにも入っていない -----
.. 以下の九九表のネタはボツの認識

繰り返し
================

例2
----------------

九九の表の例（2重のfor文）
紙幅的に厳しい？

- 九九の1の段を作る
- 1×1=1, 1×2=2, ...

.. code-block:: python

    ichi_kara_kyu = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    for j in ichi_kara_kyu:
        print(1 * j)

.. code-block:: shell

    $ python kuku.py
    1
    2
    :（省略）
    9
    $

2の段も追加

.. code-block:: python

    ichi_kara_kyu = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    for j in ichi_kara_kyu:
        print(1 * j)
    for j in ichi_kara_kyu:
        print(2 * j)

.. code-block:: shell

    $ python kuku.py
    1
    2
    :（省略）
    16
    18
    $

出力形式を変更（1の段だけに戻す）

.. code-block:: python

    ichi_kara_kyu = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    kuku_dan = []
    for j in ichi_kara_kyu:
        kuku_dan.append(1 * j)
    print(kuku_dan)

.. code-block:: shell

    $ python kuku.py
    [1, 2, ..., 9]  # TODO：あとで差し替え
    $

インタラクティブシェルで確認

.. code-block:: shell

    >>> gakki = ['チューバ', 'ユーフォニアム', 'コントラバス']
    >>> '、'.join(gakki)
    'チューバ、ユーフォニアム、コントラバス'

- 文字列.join(リスト)
- リストの各値を文字列でつないでひとつながりの文字列とする

再度インタラクティブシェルで確認

- centerを思い出す

.. code-block:: shell

    >>> '1'.center(3)
    ' 1 '

- 文字列1の左右に半角スペースが入り、全体で3文字分になった
- centerの仲間：rjust

.. code-block:: shell

    >>> '1'.rjust(3)
    '  1'

- 全体で3文字分になったが、文字列1の左側にだけ半角スペースが入る
- 九九の表として出力するのにjoinとrjustを使う

もう一つインタラクティブシェルで確認

- 数値を文字列にするにはstr関数を使う
- 数値にrjustは使えない

.. code-block:: shell

    >>> 1.rjust(3)
      File "<stdin>", line 1
        1.rjust(3)
            ^
    SyntaxError: invalid syntax

- str(数値)すると文字列になる
- 文字列であればrjustが使える

.. code-block:: shell

    >>> str(1)
    '1'
    >>> type(str(1))
    <class 'str'>
    >>> str(1).rjust(3)
    '  1'

1の段と2の段を揃えて出力する

.. code-block:: python

    ichi_kara_kyu = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    kuku_dan = []
    for j in ichi_kara_kyu:
        seki = 1 * j
        seki_moji = str(seki).rjust(2)
        kuku_dan.append(seki_moji)
    kuku_gyo = ' '.join(kuku_dan)
    print(kuku_gyo)
    kuku_dan = []
    for j in ichi_kara_kyu:
        seki = 2 * j
        seki_moji = str(seki).rjust(2)
        kuku_dan.append(seki_moji)
    kuku_gyo = ' '.join(kuku_dan)
    print(kuku_gyo)

.. code-block:: shell

    $ python kuku.py
      # TODO：出力結果あとで差し替え
    $

- 1の段の処理と2の段の処理を見比べる
- 違いは ``seki = 1 * j`` と ``seki = 2 * j``
- 以下のように書けるということ

.. code-block:: python

    ichi_kara_kyu = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    for i in ichi_kara_kyu[:2]:
        kuku_dan = []
        for j in ichi_kara_kyu:
            seki = i * j
            seki = str(seki).rjust(2)
            kuku_dan.append(seki)
        kuku_gyo = ' '.join(kuku_dan)
        print(kuku_gyo)

.. code-block:: shell

    $ python kuku.py
      # TODO：出力結果あとで差し替え
    $

- 3の段以降も表示するにはスライスを外す（2行目）

.. code-block:: python

    ichi_kara_kyu = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    for i in ichi_kara_kyu:
        kuku_dan = []
        for j in ichi_kara_kyu:
            seki = i * j
            seki = str(seki).rjust(2)
            kuku_dan.append(seki)
        kuku_gyo = ' '.join(kuku_dan)
        print(kuku_gyo)

.. rjustなどもメソッドについてドキュメントを案内する案もあったが、ひとまずはドキュメントを案内しない方向性で詳細化した
