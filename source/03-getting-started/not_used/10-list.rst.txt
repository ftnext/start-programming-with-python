リストで複数の値を扱う
================================================

リストというデータ型
--------------------------------

.. クラスに言及するところがあれば、そこで使う

プログラミングでは、データの型が用意されていれば、その型の値を変数に代入できます
（この本では扱いませんが、実はデータの型を自分で作ることもできちゃいます！）

.. 本の中で使っているところが浮かばないので、一時退避（網羅が目的ではない）

一風変わったリストも見ておきましょう。
いまの段階では「こんなこともできるのか」と眺めていただければかまいません
（使い道は本書を読み進めていくと分かります）。

値を1つも並べなくてもリストは作れます。
何も値が含まれない、空のリストです。

.. code-block:: shell

    >>> []
    []
    >>> type([])
    <class 'list'>

また、1つだけの値からでもリストは作れます。

.. code-block:: shell

    >>> [1]
    [1]
    >>> type([1])
    <class 'list'>

リストにまとめた値のうち個々の値を扱う
----------------------------------------------------------------

.. 立ち入らずに説明してもいいのではと思えた

.. note:: リストを変数に入れることが多い理由（課題）

    変数が指していないリストを使って ``リスト[インデックス]`` という書き方を試してみましょう。

    .. code-block:: shell

        >>> ['チューバ', 'ユーフォニアム', 'コントラバス'][0]
        'チューバ'
    
    リストのインデックス0が指す要素が表示されていますね。
    ですが、他のインデックスを指定しようと思ったら、このリストをもう一度書かなければいけません。

    リストを変数に代入することで、同じリストを繰り返し書かなくてもよくなります。
    一般にリストは長くなりやすいので、リストを変数に代入する方が扱いやすいです。
    また、変数を使うことは、指す値に名前を付けることでもあり、コードの意味が分かりやすくなります。

.. 反復で同じ話をしているので重複ということでカット（3回printを呼び出す例）

インデックスを使ってリストの中の個々の変数を扱う方法を学びました。
インデックスを使うことで、反復で作ったファイルは以下のように書き換えられると気づいた方もいるかもしれませんね。

.. code-block:: python
    :caption: renshu_for.py
    :linenos:

    chosha_tachi = ['susumuis', 'nao_y', 'nikkie']
    print(f'{chosha_tachi[0]}さん、こんにちは')
    print(f'{chosha_tachi[1]}さん、こんにちは')
    print(f'{chosha_tachi[2]}さん、こんにちは')

変数 ``chosha_tachi`` が指すリストの要素数が少ない場合は、たしかに上記のようにインデックスを指定して書くこともできます。
ですが、リストの要素数が増えると、インデックスを指定するのが大変になります（長さが100のリストを考えてみてください）。
そのため、リストの要素1つ1つに同じ処理を適用する場合は、``for`` 文を使うことが適しています
（リストを指す変数を使って ``renshu_for.py`` を書いてみました）。

.. code-block:: python
    :caption: renshu_for.py
    :linenos:

    chosha_tachi = ['susumuis', 'nao_y', 'nikkie']
    for chosha in chosha_tachi:
        print(f'{chosha}さん、ごきげんよう')

反復を使えば、変数 ``chosha_tachi`` が指すリストの長さによらず、わずか3行で書くことができます。

リストを操作する
--------------------------------

.. appendに留めるためにカット
    （Pythonのtupleや他のプログラミング言語のRead onlyな配列では変更できないため、+で計算してつなげる）

まず、リストについても「計算」ができます。
2つのリストを ``+`` で「足す」ことで、2つのリストをつなげた新しいリストができます。

.. code-block:: shell

    >>> [1, 2, 3] + [4, 5]
    [1, 2, 3, 4, 5]

計算にはリストを指す変数も使えます。
この場合も新しいリストができ、変数が指すリストには影響はありません。

.. code-block:: shell

    >>> kazu_list = [1, 2, 3]
    >>> kazu_list + [4, 5]
    [1, 2, 3, 4, 5]
    >>> kazu_list
    [1, 2, 3]

変数が指すリストを変更するには、変数の節で見た ``+=`` を使います。

.. code-block:: shell

    >>> kazu_list += [4, 5]
    >>> kazu_list
    [1, 2, 3, 4, 5]

変数 ``kazu_list`` が指す値が、もともと指していたリストに ``[4, 5]`` というリストをつなげたリストに更新されました。
変数の節で見たように、``kazu_list = kazu_list + [4, 5]`` という書き方でも同じ結果になります。

練習：ここまでで登場したリストからお好きなもの2つを選び、``+`` でつなげてみましょう。

.. note:: ``append`` を使わなくても末尾に追加できる

    リストを ``+`` でつなげられることを使っても、要素を末尾に追加できます。
    追加したい要素だけからなるリストを作り、``+`` でつなげればいいですね。

    .. code-block:: shell

        >>> gakki_list2 = ['チューバ', 'ユーフォニアム', 'コントラバス']
        >>> gakki_list2 += ['トランペット']
        >>> gakki_list2
        ['チューバ', 'ユーフォニアム', 'コントラバス', 'トランペット']

    2つの方法を紹介しましたが、要素をリストの末尾につなげる場合は、本書では ``append`` を使います。

.. insertはこの本の残りで登場しないので本文からカット

リストに要素を追加するもう1つの方法を紹介します。
``リスト.insert(追加したい位置のインデックス, 追加したい値)`` と書くと、指定したインデックスの要素の直前に要素が追加できます。
要素の追加に伴い、追加された要素以降に元からある要素はインデックスが1つずれます。

..  list.insert(i, x) 指定した位置に要素を挿入します
    https://docs.python.org/ja/3/tutorial/datastructures.html

.. code-block:: shell

    >>> gakki_list = ['チューバ', 'ユーフォニアム', 'コントラバス']
    >>> gakki_list
    ['チューバ', 'ユーフォニアム', 'コントラバス']
    >>> gakki_list[1]
    'ユーフォニアム'

先頭から2番目（インデックス ``1``）に ``'オーボエ'`` を追加します。

.. code-block:: shell

    >>> gakki_list.insert(1, 'オーボエ')
    >>> gakki_list
    ['チューバ', 'オーボエ', 'ユーフォニアム', 'コントラバス']

要素の追加に伴い、元のインデックスが ``1`` 以降の要素はインデックスが1ずつ大きくなります。

.. code-block:: shell

    >>> gakki_list[1]
    'オーボエ'
    >>> gakki_list[2]
    'ユーフォニアム'

.. figure:: images/10/10-6_index_when_insert.png
    :align: center

``insert`` に指定するインデックスですが、インデックスの範囲を超えてもエラーにはなりません。

- 長さ以上の正の整数でインデックスを指定すると、末尾に追加されます（``append`` と同じ挙動）
- ``-(長さ+1)`` 以下の負の整数でインデックスを指定すると、先頭に追加されます

.. code-block:: shell

    >>> gakki_list.insert(10, 'ティンパニー')
    >>> gakki_list.insert(-6, 'バリトンサックス')
    >>> gakki_list
    ['バリトンサックス', 'チューバ', 'オーボエ', 'ユーフォニアム', 'コントラバス', 'ティンパニー']

練習：``insert`` を使って ``gakki_list`` の好きなインデックスに好きな楽器を1つ追加してみましょう。

.. 削除の方はpopメソッドに留める（delは新しい文なので説明が長くなるのを懸念）

もう1つの削除の方法は、インデックスと ``del`` を使います（``del リスト[インデックス]``）。
``pop`` の場合と同様に、指定したインデックスの要素を削除できます。

.. https://docs.python.org/ja/3/tutorial/datastructures.html#the-del-statement

.. code-block:: shell

    >>> gakki_list2 = ['チューバ', 'ユーフォニアム', 'コントラバス']
    >>> del gakki_list2[1]
    >>> gakki_list2
    ['チューバ', 'コントラバス']

``del`` を使って、インデックス ``1`` の要素 ``'ユーフォニアム'`` を削除しました。
リストの要素は変わり、削除された要素以降の正のインデックスは1ずつ小さくなっています。

``del`` を使う際に範囲外のインデックスを指定した場合は、``IndexError`` が発生します（エラーにより削除は実行されません）。

``del`` を使う際にインデックスの指定し忘れには注意が必要です。
``del リスト`` を実行すると、リストを指す変数が削除されます（変数がないので、``NameError`` となります）。

.. code-block:: shell

    >>> del gakki_list2
    >>> gakki_list2
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'gakki_list2' is not defined

練習：``del`` を使って ``gakki_list`` から要素を1つ削除してみましょう。

リストの使いどころ：会計を例に
------------------------------------------------

.. sum関数は他で登場しないので、執筆優先度を下げてnot_usedへ移動（採用する場合は関数の説明に表を使うこと）

note:: リストで表した注文金額を合計するもう一つの方法

    リストにまとめた数値は、組み込み関数 ``sum`` を使うことでも合計できます。

    .. code-block:: shell

        >>> goukei = sum(chumon_kingaku)
        >>> f'合計{goukei}円です'
        '合計880円です'
    
    複数の数値をまとめたリストでは ``sum`` 関数を使うと簡単に合計を求めることができます。
    ``sum`` について詳しく知りたい方は、関数の節で紹介した組み込み関数の一覧で探してみてください。

    .. https://docs.python.org/ja/3/library/functions.html#sum

.. ----- 以下は粗レビューにも入っていない -----
.. リストのスライスは書籍内で使っていないので、執筆の優先度を下げた（リストのメソッドの理解を深めるためには有用）

リストの一部をリストとして取り出す（スライス）
------------------------------------------------

- ``リストを代入した変数名[インデックス開始:インデックス終わり]``
    - インデックス開始は含む
    - インデックス終わりは含まない（インデックス終わりの1つ手前まで）

.. code-block:: shell

    >>> gakki[0:2]
    ['チューバ', 'ユーフォ']

.. code-block:: text

    インデックス
        0          1            2
    ['チューバ', 'ユーフォ', 'コントラバス']

- インデックス2の'コントラバス'は含まれず、手前（インデックス1）の'ユーフォ'まで
- ``gakki[0:2]`` という指定でインデックス0と1がリストとして取り出された

.. code-block:: shell

    >>> type(gakki[0:2])
    <class 'list'>

練習（わからなくてもOK）

gakkiから['ユーフォ', 'コントラバス']を取り出してみましょう（インデックス1と2を取り出すにはどう指定すればいいでしょうか？）

答え：インデックス開始を1、インデックス終わりを3と指定する

.. code-block:: shell

    >>> gakki[1:3]
    ['ユーフォ', 'コントラバス']

- スライスでは、はじめから取り出す際のインデックス0の指定を省略できる
- また終わりまで取り出す際のインデックス（gakkiの例では3）の指定も省略できる

    >>> gakki[:2]
    ['チューバ', 'ユーフォ']
    >>> gakki[1:]
    ['ユーフォ', 'コントラバス']
