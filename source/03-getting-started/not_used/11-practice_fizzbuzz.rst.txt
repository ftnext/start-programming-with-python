順次・分岐・反復の力試し（FizzBuzz）
================================================

1から30までを順に表示する
--------------------------------

.. rangeを1つの引数だけで呼ぶ場合は本書（とくに5章）で扱っていないと思われるのでnot_usedに移動

なお、``range`` 関数自体は1つの引数だけで呼び出すこともできます。
この場合、引数は終わりの値を表します。
返り値は0から始まるリストのようなものとなりますが、引数は返り値には含まれません。
``range(30)`` とすると、0から29までの整数のリストと同じようなものが作れます。

.. rangeからlistへの変換も使わないのでnot_usedに移動

ここでは使いませんが、もしリストにしたい場合は ``range`` 関数の返り値を ``list`` 関数に渡します。

.. code-block:: shell

    >>> type(list(range(1, 31)))
    <class 'list'>

3の倍数かつ5の倍数のとき、FizzBuzzを表示する
------------------------------------------------

.. ブール演算子 and は4章以降で現れないようなので本文から削る

最後に、条件式で「かつ」を表す方法を紹介します。
3の倍数かつ5の倍数を表す方法を知らなかったので、数学の知識を使って15の倍数として処理を書きました。
3の倍数かつ5の倍数は、3の倍数であるか（``i % 3 == 0``）という計算結果と
5の倍数であるかという計算結果を ``and`` という計算をして表すことができます

``and`` は比較演算子による計算結果についての計算に使われます（ブール演算子と呼ばれます）。
``and`` を使った計算結果は ``True`` か ``False`` のどちらかになります。
``and`` の左右に来る比較演算子の計算結果は、``True`` と　``False`` の2通りですから、
``and`` がどのような値を返すのか、すべての場合を列挙してみましょう。

.. ブール演算子 https://docs.python.org/ja/3/reference/expressions.html#boolean-operations

.. code-block:: shell

    >>> True and True
    True
    >>> True and False
    False
    >>> False and True
    False
    >>> False and False
    False

``and`` を使った計算結果は、``and`` の左右に ``True`` があるときのみ ``True`` となります。
これは日本語における「かつ」と一致します。
そのため、3の倍数かつ5の倍数は ``i % 3 == 0 and i % 5 == 0`` と表せます。
``i % 3 == 0`` と ``i % 5 == 0`` がともに ``True`` となるとき、その数 ``i`` は「3の倍数であり、かつ、5の倍数」です。

``and`` を使って書き直すと、以下のようになります。

.. code-block:: python
    :caption: fizzbuzz.py
    :linenos:

    for i in range(1, 31):
        if i % 3 == 0 and i % 5 == 0:
            print('FizzBuzz')
        elif i % 3 == 0:
            print('Fizz')
        elif i % 5 == 0:
            print('Buzz')
        else:
            print(i)

2行目の条件式を変更しました。
紙面では省略しますが、動作確認するとこれまで通りFizzBuzzが解けていることが分かります。
