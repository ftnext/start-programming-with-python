順次
============================

さて、この節からはインタラクティブシェルを離れ、ファイルにPythonのコードを書いていきます。
インタラクティブシェルは逐次結果が分かって便利ですが、長いプログラムを書くのにあまり向いていません。
そこでインタラクティブシェルの代わりにファイルを使います。
Pythonの文法に沿って用意したファイルをPythonに実行してもらい、計算結果を確認します。

.. 2章で説明済みなので、ファイルを作るまでの手順はカット

それでは、インタラクティブシェルを終了しましょう。
終了の仕方を覚えていますか？
``quit()`` と入力し、Enterキーを押すのでしたね。

.. code-block:: python

    >>> quit()  # doctest: +SKIP
    $

インタラクティブシェルが終了したことは、行の先頭が ``>>>`` ではなくなったことで分かります。
macOSのターミナルの場合は、行の先頭が ``(..省略..)$`` になり、
WindowsのPowershellの場合は ``(..省略..)>`` となります。
行の先頭が ``>>>`` となっているときだけが、インタラクティブシェルが起動しているときです。

.. コマンドラインでのディレクトリの作成はカット（2章でプロジェクトを開いているAtomで作ればいい）

ファイルの編集には、テキストエディタを使います。
この本では、Atomというテキストエディタを使っていきます（2章でインストールしましたね）。
Atomで ``1-3`` ディレクトリを開きましょう。

1. Atomを起動します
2. メニューバーから File → Open... の順でクリックします

.. figure:: images/5/5-1_file_open.png
    :align: center

3. Finderやエクスプローラーのような画面が出てきます。 ``1-3`` ディレクトリを探しましょう。
4. ``1-3`` ディレクトリを選択したら「開く」を押します

.. figure:: images/5/5-2_open_1-3_dir.png
    :align: center

はじめてのプログラムのファイル
--------------------------------

.. 2章での作り方はファイルツリーの右クリック

Atomからファイルを作ります。

1. メニューバーから File → New File の順でクリックします

.. figure:: images/5/5-3_new_file.png
    :align: center

2. untitledと表示され、入力できるようになります

.. figure:: images/5/5-4_untitled.png
    :align: center

3. メニューバーから File → Save As ... で名前を付けて保存します

.. figure:: images/5/5-5_save_as.png
    :align: center

4. 今回は ``hajimete.py`` としましょう。

.. figure:: images/5/5-6_save_hajimetepy.png
    :align: center

4で保存してファイル名を付けて保存して、ファイルの作成完了です。
ファイル ``hajimete.py`` ができました。
ここまで進めると、Atomで ``hajimete.py`` を編集できる状態になっています

.. figure:: images/5/5-7_empty_hajimetepy.png
    :align: center

.. 2章で説明済みなので、保存手順もカット

保存の手順

1. メニューバーから File → Save の順でクリックします。

.. figure:: images/5/5-9_save_file.png
    :align: center

保存されると、Atomでは、ファイル名の右の青い丸が消えます
（青い丸が出ているということはAtomが「まだ保存していないよ」と言っているわけです）。

.. figure:: images/5/5-10_unsaved_marker.png
    :align: center

ファイルの保存はこれから先何回も繰り返します。
Atomに限らずエディタでは、何回も繰り返す操作は、マウス操作だけでなく、キーボード操作からも行えます。
保存操作は、

- Windowsでは「コントロールキー」と「Sキー」の同時押し
- macOSでは「コマンドキー」と「Sキー」の同時押し

で実行できます。
WordやExcelでキーボード操作から保存したことがある方は「同じ操作だ！」と気づいたかもしれませんね。

実は、マウス操作で File → Save と操作したときに、macOSでは ``:コマンドマーク:S`` と表示されていました
（``:コマンドマーク:`` は「コマンドキー」を表します）。
Windowsでは ``Ctrl + S`` （TODO：要確認）と表示されます（Ctrlは「コントロール(Control)」キーの略称です）。
Atomをはじめ、エディタでもよく使われる操作はキーボードの操作方法が案内されます。

.. 説明が冗長のために削った部分

コマンドライン（Windowsの方はPowershell、macOSの方はターミナル）で以下を入力してください
（先頭の ``$`` とそれに続く半角スペースは入力不要です。``python`` から入力してください）

(2)本章ではこれ以降、実行結果をmacOSの場合に揃えて示します。
コマンドラインの表示として、macOSの場合の ``$`` を使うのが、プログラマには一般的だからです。

.. コメント付きコードがなくても理解できると考え、練習問題の解説の中に含めていない

.. code-block:: python
    :caption: hajimete.py
    :linenos:

    a = 4
    b = 6
    print(a * b)
    banzai = '万歳！'  # 変数 banzai に '万歳！' を代入
    print(banzai * 3)  # banzai * 3 の計算結果を表示

.. note:: Atomでも「戻せる」

    再度「コマンドキー + Zキー」または「コントロールキー + Zキー」を押すと、
    その前の編集（左側の ``print(`` の削除）も元に戻ります。

    .. figure:: images/5/5-14_undo2.png
        :align: center

関数と順次
============================

.. Atomで空のファイル作成手順（2章で説明済みなので使わない）

復習としてAtomで新しく空のファイルを作る方法を案内します。
繰り返せば覚えるので、できそうな方は方法を見ずにやってみて、わからなくなったら確認するのをオススメします。

1. メニューバーから File → New File
2. メニューハーから File → Save As ...

実は手順2は、キーボード操作（「コントロールキー + Sキー」または「コマンドキー + Sキー」）でも可能です
（初めて保存するので、ファイルに名前を付ける必要があるのです）。

.. 「関数」の章の、なぜ関数という話題に取り込めるかも

関数を使うと、ファイルの一番上から下へという流れが複雑になるので、わかりにくく思うかもしれません。
ですが、前節でもお伝えしましたが、いくつかの処理に名前を付けて関数としてひとまとまりにすることで、同じ処理を繰り返し書かなくて済むという利点があります。
同じ処理を繰り返し書くと、処理の中身を変えるのに、複数の箇所を変えなければならず、コードの変更が大変になります。
同じ処理を繰り返し書かなくてもいいということに比べたら、「関数の定義にさかのぼって上から実行される」という動作は一度慣れるだけで済むので、そこまで大変ではありません。
関数を実行すると、関数の定義にさかのぼって実行されるということを押さえておきましょう。

.. 関数の章から削ったので使わないに移動

``aisatsu.py`` の5行目では、``aisatsu_bun`` 関数の返り値を画面に出力するために、``print`` 関数の引数に渡しています。
4章では、以下のようにしていましたね。

.. code-block:: python

    >>> bun = aisatsu_bun('susumuis')  # doctest: +SKIP
    >>> print(bun)  # doctest: +SKIP

これを変数を使わずに1行で書いたのが ``print(aisatsu_bun('susumuis'))`` です。

.. 言及する必要がなくなったので移植（方向性として控えておきたい）

``aisatsu.py`` を書き換える前後で、挨拶文を出力するという機能は変わりません。
違うのは出力のやり方です。
関数で出力する方法と、関数が返す値を出力する方法の2通りを見ました。

.. 「書いたほうがいい」というトピックだと思うので、優先度を下げて他を書き上げる
