================================================================
複数の値をまとめて扱う
================================================================

.. 元のタイトルは「3大構造以外にプログラマーが使うもの」

.. FizzBuzzの後のコラムと重なるのでカット

全てのプログラムは、順次・分岐・反復という3つの構造で構成されます。
これらを押さえていればどんなプログラムの構造も把握できますが、
何をするプログラムなのかを詳しく把握するには、3大構造 **以外の事柄** も必要になることがあります。

.. TODO: programmer_thinking で使うために退避

- プログラマーの慣習（再利用、命名）

複数の値をリストにまとめる
================================================

.. 他の言語は知らない前提なので、他の言語と比較するような「Pythonでは」という説明は削除

プログラミング言語の中には、配列としてまとめられるのはデータの種類が揃っている場合のみという制約をもつものもあります。
Pythonでは、まとめるデータの種類を揃えなくてもリストとして扱えます。

.. column:: 練習

    リストに慣れるために、自由にリストを作ってみてください。
    作りたいリストが浮かばないという方は、以下の中から2つを作ってみてください。

    - 整数をまとめたリスト
    - 小数をまとめたリスト
    - 文字列をまとめたリスト
    - 複数種類のデータの値をまとめたリスト

リストを変数で指す
--------------------------------

.. 変数と言えば気付けると思うのでカット

変数 ``kazu_list`` に別のリスト ``[a, b]`` を代入して、指すリストを変更することもできます。

.. code-block:: python

    >>> kazu_list = [a, b]
    >>> kazu_list
    [4, 6]

.. gakki_listという具体での説明を残し、抽象的（一般的）な説明はカット

- 0と正の値は **先頭から数えた番号** として使います

    - 先頭が ``0``
    - 前から2番めが ``1``
    - 前から3番めが ``2``
    - （同様に続く）

- 負の値は **末尾から数えた番号** として扱います

    - 末尾が ``-1``
    - 後ろから2番めが ``-2``
    - 後ろから3番めが ``-3``
    - （同様に続く）

.. 評価で説明できるようにしたことで不要になった説明をカット

この書き方の ``リスト`` の部分は、リストを指す変数も使えます
（一般にリストは長くなるので、都度書かずに変数で指すことが多いです）。

.. リストの要素の参照は変数と同じの原文を退避

``リスト[インデックス]`` は変数と同じです。
対話モードは変数が指す値を表示するので、``gakki_list[0]`` のように入力すると ``'チューバ'`` と表示されました。
リストは **複数の変数をまとめたもの** です。
インデックスを使って個々の変数を指定することで、複数の値が扱えるわけです。

.. advanced:: インデックスに指定できない整数を指定するとエラー

    .. 説明が詳しすぎるように感じたのでカット

    ファイルを使っている場合は、``len`` 関数の返り値を ``print`` 関数に渡しましょう

リストを変更する
================================================

リストの要素を変更する
--------------------------------

.. 説明がまわりくどい印象なのでカット

``リスト[インデックス] = 新しい値`` と書けば、そのインデックスが新しい値を指すように変更できます。
これは変数に代入して、変数が指す値を更新するのと同じことです。

.. 分量を減らすためにカット（同じ要素を正負2つのインデックスで指定できることは説明済み）

``gakki_list`` では、インデックス ``1`` の要素は ``-2`` とも指定できますね。
``gakki_list[-2] = 'ユーフォ'`` としても同じ結果が得られます。

.. column:: インデックスの指定し忘れに注意！

    .. Pythonに関連する言及はカット

    Pythonでは変数が指す値の型に制限がないため、リストを指していた変数を文字列を指すように変更できます。

リスト自体を変更する
--------------------------------

リストに要素を追加する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. len関数は advanced にしているので本文で言及しない

リストの末尾に ``'トランペット'`` が追加されました。
変数 ``gakki_list`` の要素が増え、長さが変わっています。

.. code-block:: python

    >>> len(gakki_list)
    4

リストの使い所
================================================

.. 他の言語は知らない前提なので、他の言語と比較するような説明は削除

.. advanced:: 「配列」という言葉

    配列はどんなプログラミング言語でも使えますが、配列の呼び名や文法は言語によって異なります。

.. タプルの説明は最小限に留める

.. advanced:: 複数の値のもう1つの扱い方、タプル

    タプルも変数に代入できます。

    .. code-block:: python

        >>> gakki_tuple = ("チューバ", "ユーフォニアム", "コントラバス")
        >>> gakki_tuple
        ('チューバ', 'ユーフォニアム', 'コントラバス')

    .. 例で見せるので、説明はカット

    リストと同様に、数値や文字列、それらを混ぜてタプルを作ることができます。

    .. コードの紹介はカットした

    .. code-block:: python

        >>> len(gakki_tuple)
        3

    .. code-block:: python

        >>> gakki_tuple[0]  # 先頭の要素を指定
        'チューバ'

    .. code-block:: python

        >>> gakki_tuple[3]
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        IndexError: tuple index out of range

    .. 使い分けはあまりはっきりしていないのではないか

    例えば、複数の楽器名は、途中で浮かんだものを追加できるように、リストの方が向いていそうですね。
    例えば、出版したあと、著者が増えたり減ったりする変更はほとんどないので、著者名はタプルで表してもいいかもしれません。
