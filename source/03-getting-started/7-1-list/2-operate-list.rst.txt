リストを変更する
================================================

リストは複数の値をまとめただけでなく、「変更」できます。

* リストの個々の要素を変更する
* リスト自体を変更する（要素の追加／削除）

リストの要素を変更する
--------------------------------

インデックスで指定した要素に **別の値を代入する** ことで、その要素を変更できます。
``リスト[インデックス]`` には変数のように指す値がありますが、それを更新できます。

例として ``gakki_list`` の ``"ユーフォニアム"`` を ``"ユーフォ"`` に変更してみます。
ユーフォニアムという楽器は、縮めて「ユーフォ」と呼ばれます。

.. code-block:: python

    >>> gakki_list[1]  # ((変更する前の値を確認します))
    'ユーフォニアム'
    >>> gakki_list[1] = "ユーフォ"
    >>> gakki_list[1]
    'ユーフォ'

リスト全体を表示しましょう。
インデックス ``1`` の要素が指す値は更新されていますが、
他の要素が指す値（チューバやコントラバス）は更新されていませんね。

.. code-block:: python

    >>> gakki_list
    ['チューバ', 'ユーフォ', 'コントラバス']

練習問題
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

コントラバスも、縮めた呼び方「コンバス」に変えてみましょう。

.. answer::

    .. code-block:: python
    
        >>> gakki_list[-1] = "コンバス"
        >>> gakki_list
        ['チューバ', 'ユーフォ', 'コンバス']

.. column:: インデックスの指定し忘れに注意！

    要素を変更する時に、過ってインデックスを指定し忘れると、**変数が指す値をリストから文字列に更新** してしまいます。
    変数がリストを指さなくなるということです。

    .. code-block:: python

        >>> gakki_list2 = ["チューバ", "ユーフォニアム", "コントラバス"]  # ((別のリストを作って確認))
        >>> gakki_list2
        ['チューバ', 'ユーフォニアム', 'コントラバス']
        >>> gakki_list2 = "ユーフォ"
        >>> gakki_list2
        'ユーフォ'

    リストの要素を変えたい場合は、インデックス自体の指定し忘れに注意しましょう。

リスト自体を変更する
--------------------------------

リストに要素を追加する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

楽器はまだまだありますから、 ``gakki_list`` に追加したいですよね。
``リスト.append(追加したい値)`` と書くと、**リストの末尾に値を追加** できます。
appendという英単語は「追加する」という意味です。

.. list-table:: リストに対して使える、末尾に値を追加する関数
    :align: center

    * - 箱の名前
      - ``append``
    * - 箱は何をするか
      - リストの末尾に要素を追加する
    * - 箱に入れるもの
      - リストに追加したい値
    * - 箱から出てくるもの
      - なし

トランペットを追加してみます。

.. code-block:: python

    >>> gakki_list  # ((要素を追加する前の確認))
    ['チューバ', 'ユーフォ', 'コンバス']
    >>> gakki_list.append("トランペット")
    >>> gakki_list
    ['チューバ', 'ユーフォ', 'コンバス', 'トランペット']

要素が4つに増えたことで、インデックスに指定できる値の範囲も ``-4`` から ``3`` までに変わりました。
追加した要素をインデックスを使って指定します。

.. code-block:: python

    >>> gakki_list[3]  # ((-1 と指定してもよい))
    'トランペット'

.. https://docs.python.org/ja/3/glossary.html#term-method
    「(メソッド) クラス本体の中で定義された関数」
    メソッドは特殊な関数という理解（『Python実践入門』も参照した）

``append`` のように **特定の型の値についてのみ適用できる関数** を「メソッド」と呼びます。
:numref:`programming_practice` 「:ref:`programming_practice`」以降では、リスト以外の型のメソッドも紹介します！

練習問題
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``append`` を使って ``gakki_list`` に好きな楽器を1つ追加してみましょう。
楽器名の例：オーボエ、フルート、ホルン、トロンボーン、クラリネット

.. answer::

    .. code-block:: python

        >>> gakki_list.append("オーボエ")
        >>> gakki_list
        ['チューバ', 'ユーフォ', 'コンバス', 'トランペット', 'オーボエ']

.. advanced:: ``append`` を使って100個の要素のリストを作る

    .. 例自体は list(range(100)) の方が望ましいことは承知している。developmentでトランプデッキを作る前に紹介しておきたい意図

    100個のように、多くの要素を持つリストは ``append`` を **繰り返し使って** 作れます。

    まず要素を持たないリスト（空のリスト）を用意します。

    .. code-block:: python

        >>> list_100 = []

    そして、要素の追加を反復します。

    .. code-block:: python

        >>> for i in range(100):
        ...     list_100.append(i)
        ...

    対話モードで ``for`` 文を書く際は、改行して現れる ``...`` の表示の後に、再度 :kbd:`Enter` キーを押す必要があります。

    長さを求めると、100個の要素を持つことが確認できます（前節の「発展」参照）。
    これは0〜99までの整数のリストです。

    .. code-block:: python

        >>> len(list_100)
        100

    **空のリストを用意し、繰り返し** ``append``。
    これを使えば、数千、数万の要素を持つリストも作れますね。

リストから要素を削除する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

追加以外に削除もできます。
``リスト.pop(削除したい要素のインデックス)`` で、**指定したインデックスの要素を削除** できます。
popという英単語は「ポンと出す」という意味です。
指定したインデックスの要素が **取り出され** （返り値）、リストからは消えます。

.. list-table:: リストに対して使える、指定したインデックスの要素を取り出す関数
    :align: center

    * - 箱の名前
      - ``pop``
    * - 箱は何をするか
      - 指定したインデックスの要素を取り出し、リストから削除する
    * - 箱に入れるもの
      - 取り出したい要素のインデックス（指定しない場合は末尾を指定したことになる）
    * - 箱から出てくるもの
      - 取り出した要素

ユーフォニアム（インデックス ``1`` の要素）を取り出してみます。

.. code-block:: python

    >>> gakki_list2 = ["チューバ", "ユーフォニアム", "コントラバス"]
    >>> gakki_list2.pop(1)  # ((インデックス1の要素が返り値になっている))
    'ユーフォニアム'
    >>> gakki_list2
    ['チューバ', 'コントラバス']

取り出された要素以降の正のインデックスは1ずつ小さくなります。

.. figure:: images/10/10-7_index_when_pop.drawio.png
    :align: center

    ``"ユーフォニアム"`` がリストからなくなり、要素と対応するインデックスが変わる

``pop`` は **引数を指定せずに** 呼び出せます（``gakki_list2.pop()``）。
その場合、**末尾の要素** が取り出されて、リストから削除されます。

引数に範囲外のインデックスを指定すると、処理系は ``IndexError`` を出します。

練習問題
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``pop`` を使って ``gakki_list`` から要素を1つ削除してみましょう。

.. answer::

    参考例として末尾の要素を削除しました。
    お好きなインデックスを指定して試してみてください。

    .. code-block:: python

        >>> gakki_list.pop()
        'オーボエ'
        >>> gakki_list
        ['チューバ', 'ユーフォ', 'コンバス', 'トランペット']
