.. _list:

================================================================
複数の値をまとめて扱おう
================================================================

どんなプログラムも、順次・分岐・反復で構成されると学んできました。
構造を掴んだ後は、各部でどんな処理をしているのか、詳しく知りたくなりますよね。
そんなときに知っていると役に立つ事項を、この章と次章で紹介します。

本章では、**複数の値の扱い方** を学びましょう。
対話モードで手を動かしながら読み進めてください。

複数の値をリストにまとめる
================================================

リストを作る
--------------------------------

:numref:`loop` 「:ref:`loop__for`」で、リストを「値をまとめた値」と紹介しました。
数値をまとめたリスト（``[1, 2, 3]``）や、
文字列をまとめたリスト（``["susumuis", "nao_y", "nikkie"]``）を覚えていますか。

**型が揃っていなくても** リストに値をまとめられます。

.. code-block:: python

    >>> [1990, 175.2, "nikkie"]  # ((整数、小数、文字列からなるリスト))
    [1990, 175.2, 'nikkie']

リストを作るときの ``[1, 2, 3]`` は **式で、評価した結果がリスト** です。
これまで扱ってきた式と同じように、**変数が使えます** 。
評価結果は、変数が指す値がまとまったリストです。

.. code-block:: python

    >>> a, b = 4, 6
    >>> [a, b]
    [4, 6]

リストの型
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. リストは「値をまとめた値」なので、型も「リスト」と表記しないようにしている

リストを表す型は、``list`` （リスト）です。

.. code-block:: python

    >>> type([1, 2, 3])  # (([1, 2, 3]という値の型を確認))
    <class 'list'>

リストを作るときに使う ``[]`` （**角括弧、ブラケット**）で、作る値がリストだと **指定** しています。
そのため、まとめる値がどんな型でも、リストであれば常に型は ``list`` です。

.. code-block:: python

    >>> type([1990, 175.2, "nikkie"])
    <class 'list'>

リストを変数で指す
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

数値や文字列と同じように、リストも **変数に代入できます**。

.. code-block:: python

    >>> kazu_list = [1, 2, 3]

リストを指していても、そもそも変数なので、**関数の引数に使えます**。

.. code-block:: python

    >>> type(kazu_list)
    <class 'list'>
    >>> print(kazu_list)  # ((引数のリストが表示される))
    [1, 2, 3]

練習問題
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. 自由にリストを作り、変数に代入してください。まとめる値の型を揃えても、揃えなくてもかまいません
2. 変数が指す値の型を確認しましょう
3. 変数が指しているリストを確認しましょう

.. answer::

    1では、``kazu_list`` を作ったとします。

    2は ``type`` 関数に渡せばいいですね。

    3は ``print`` 関数に渡す、もしくは対話モードなので、変数を評価すればいいです。

    .. code-block:: python

        >>> kazu_list
        [1, 2, 3]

リストの個々の値を扱う
--------------------------------

リストにまとめられた個々の値を「要素」と呼びます。
リストの特徴は、**要素が順番を持つ** ことです。
:numref:`loop` 「:ref:`loop__for`」で説明したように、一番左が先頭の要素で、一番右が末尾の要素です。

.. ref: https://docs.python.org/ja/3/tutorial/introduction.html#lists

インデックス
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**何番目の要素かを指定** することで、個々の要素を扱えます。
何番目かの指定には、「インデックス」という **番号** を使います。
インデックスは整数で、正の値も負の値も取れます。

楽器名のリストを使ってインデックスに慣れましょう。

.. code-block:: python

    >>> gakki_list = ["チューバ", "ユーフォニアム", "コントラバス"]
    >>> gakki_list
    ['チューバ', 'ユーフォニアム', 'コントラバス']

- 0と正の値は **先頭から数えた番号**
- 負の値は **末尾から数えた番号**

.. list-table:: 楽器名のリストのインデックス
    :align: center

    * - 楽器名（要素）
      - 先頭から数えたインデックス
      - 末尾から数えたインデックス
    * - ``"チューバ"``
      - ``0``
      - ``-3``
    * - ``"ユーフォニアム"``
      - ``1``
      - ``-2``
    * - ``"コントラバス"``
      - ``2``
      - ``-1``

.. figure:: images/10/10-3_list_index.drawio.png
    :align: center

    インデックスには前からと後ろからの2通りがある

.. 図10-3の説明の仕方の参考
..    インデックス
..        0             1               2
..    ['チューバ', 'ユーフォニアム', 'コントラバス']
..       -3            -2              -1

インデックスで要素を指定する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

リストの要素は ``リスト[インデックス]`` という書き方で指定します。
これも式で、評価結果はインデックスに対応する要素です。

.. code-block:: python

    >>> ["チューバ", "ユーフォニアム", "コントラバス"][0]
    'チューバ'

``リスト`` の部分は、**リストを指す変数** も使えます。
変数を使うと、この式はまず変数が評価されます。
試しに ``gakki_list`` が指すリストから、先頭（インデックス ``0``）の要素を指定してみましょう。

.. code-block:: python

    >>> gakki_list[0]  # ((["チューバ", "ユーフォニアム", "コントラバス"][0] と同じ))
    'チューバ'

負のインデックスを使って、末尾の要素（インデックス ``-1``）を指定します。

.. code-block:: python

    >>> gakki_list[-1]
    'コントラバス'

.. 「変数 hoge が指すリストの要素」という書き方が冗長に感じ、ショートカットした言い方を導入する意図

``リスト[インデックス]`` という書き方は、リストを指す変数で書くことがほとんどです。
この書き方に慣れると、「リスト ``gakki_list`` の先頭の要素 ``gakki_list[0]``」とも考えられますね。

また、``リストを指す変数[インデックス]`` は **変数を書いたのと同じ** とも言えます。
インデックスのところの ``gakki_list`` の図をもう一度見てください。
``gakki_list`` のインデックス ``0`` （``gakki_list[0]``） **が指す** 値が ``"チューバ"`` です。
他のインデックスも値を指します。
つまり、リストを指す変数は、インデックスを指定することで、複数の変数として使えるのです。

練習問題
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. ``gakki_list`` の要素 ``"ユーフォニアム"`` を正のインデックスで指定してみましょう
2. 続いて、 ``gakki_list`` から ``"コントラバス"`` も正のインデックスで指定してみましょう
3. 負のインデックスを使って、``gakki_list`` の要素を1つ指定してみましょう

.. answer::

    .. code-block:: python

        >>> gakki_list[1]  # ((1の解答))
        'ユーフォニアム'
        >>> gakki_list[2]  # ((2の解答))
        'コントラバス'
        >>> gakki_list[-2]  # ((3の解答))
        'ユーフォニアム'

    インデックスの表や図と合わせて確認し、インデックスに慣れてくださいね。

.. column:: プログラマーは0から数え始める

    インデックスとそれを使った要素の指定を紹介しました。
    日常生活でものを数えるとき、1、2、3と1から数え始めますが、
    プログラミングでは（前からの） **インデックスは0から** 始まります。

    プログラマーの世界では、**最初を表すインデックスが0** なのです。
    これは決まりですから、慣れるのが一番です。
    プログラミングに取り組むときは、「0から数え始める」と考え方を切り替えましょう。

    ``リスト[1]`` と書いてしまい、先頭の要素が指定できないというのは、初めはみな経験します。
    日常生活の中で、最初は1というのが染み付いているのです。

.. column:: インデックスの指定には正負2通りのやり方がある

    同じ要素を、正のインデックスでも負のインデックスでも指定できます。
    リストは先頭から末尾への順番で扱うことが多いので、0以上の整数を使った方法はよく使われます。
    ですが、「後ろから2番めの要素」のように、**後ろのほうが考えやすい時があり**、そのときはマイナスの整数の出番です。
    2通りのうちどちらを使ってもいいので、考えやすい方を使うのをおすすめします。

.. advanced:: リストの「長さ」とインデックス

    リストは **要素の数** を「長さ」として持ちます。
    3つの要素を持つリスト ``gakki_list`` を ``len`` 関数に渡してみましょう。

    .. code-block:: python

        >>> len(gakki_list)
        3
    
    リストの長さは、**インデックスに指定できる整数の範囲** を決めています。

    - 先頭から指定する場合、インデックスは ``0`` 以上、``長さ-1`` 以下
    - 末尾から指定する場合、インデックスは ``-長さ`` 以上、``-1`` 以下

    インデックスに指定できるのは ``-長さ`` 以上、``長さ-1`` 以下の整数です。
    **長さと等しい整数は指定できない** ので注意しましょう。

.. advanced:: インデックスに指定できない整数を指定するとエラー

    インデックスに指定できない整数を指定した場合、処理系は ``IndexError`` を出します。
    ``gakki_list`` の指すリストを例に、インデックスに指定できる整数の範囲外の値（``3`` や ``-4``）を試してみましょう。

    .. ref: https://docs.python.org/ja/3/library/exceptions.html#IndexError

    .. code-block:: python

        >>> gakki_list[3]
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        IndexError: list index out of range
        >>> gakki_list[-4]
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        IndexError: list index out of range

    「list index out of range」は、リストのインデックス(index)が範囲外(out of range)という意味です。

    ``IndexError`` を見かけたら、``len`` 関数でリストの長さを確認し、指定できる範囲内のインデックスを指定していたか確認しましょう。
