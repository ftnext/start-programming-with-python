関数をもう少し詳しく知ろう
========================================================

関数を表す用語
--------------------------------

関数を言い表すときに使われる用語を紹介します。

.. ここで導入する引数は、実引数（実際の引数）。関数を呼び出す側の言葉。実引数は渡される

``()`` を通して関数に入れられるものを **引数** （ひきすう）と呼びます。

引数という言葉を使うと、 ``len("こんにちは")`` というプログラムの実行は、次のようにも言い表されます。

- ``len`` 関数に引数 ``"こんにちは"`` を **渡す**
- ``"こんにちは"`` を引数に ``len`` 関数を **呼び出す**

また、関数が処理の結果を出すことを、関数が値を **返す** とも言い表します。
``len`` 関数は引数の文字列の長さを返します。

関数が返す値のことを **返り値** （かえりち）や **戻り値** （もどりち）と呼びます。

.. figure:: images/4/4-7-function_petit_summary.png
    :align: center
    :width: 80%

    関数にまつわる用語まとめ

関数は式
--------------------------------

.. variables 章で式自体も文と述べている -> 関数を呼び出す式も文

これまでの章で演算子を使った式を知りましたね。
実は、**関数も式** です。
演算子を使わない式もあるのです。

関数（式）の評価結果は、**関数の返り値** です。
例えば ``len("こんにちは")`` を評価すると、``len`` 関数の返り値 ``5`` が評価結果になります。

関数の結果を変数に代入する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

演算子を使った式と同じように、**関数の評価結果の値を変数に代入** できます。

.. code-block:: python

    >>> mojisuu = len("こんにちは世界")
    >>> mojisuu
    7

変数 ``mojisuu`` （文字数）に、``len`` 関数を適用した結果が代入されました。

関数を適用した結果に名前を付けたり、一時保存したりする目的で使います。

.. figure:: images/4/4-6-len_store_variable.drawio.png
    :align: center

    関数が出した結果を変数に代入する

関数に変数を入れる（式の評価の順序）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

関数の引数に変数を使う場合について見てみましょう。

.. code-block:: python

    >>> a = "こんにちは世界"
    >>> len(a)
    7

``len(a)`` という式の評価には **順番** があります。

1. まず、関数の引数（式）が評価されます。ここでは、``a`` が評価されて ``"こんにちは世界"`` となります。
2. 次に関数の呼び出し ``len("こんにちは世界")`` が評価されます。
3. ``len("こんにちは世界")`` の評価結果 ``7`` が ``len(a)`` の評価結果となります。

.. figure:: images/4/4-5-len_pass_variable.drawio.png
    :align: center

    箱に入るのは変数の指す値

練習問題
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

以下のプログラムを上から順番に実行した時、``len(banzai * 3)`` の返す値は何になりますか？
まずは対話モードを使わずに考え、その後対話モードで確認してください。

.. code-block:: python

    >>> banzai = "万歳！"
    >>> len(banzai * 3)  # doctest: +SKIP

.. answer::

    評価順により

    1. 引数（式 ``banzai * 3``）を評価して ``"万歳！万歳！万歳！"``
    2. ``len("万歳！万歳！万歳！")`` を評価して ``9`` （9文字）
    3. ``len(banzai * 3)`` の返す値は ``9``

    .. code-block:: python

        >>> banzai = "万歳！"
        >>> len(banzai * 3)
        9

.. advanced:: Pythonの組み込み関数

    この章で紹介した ``len`` 関数や ``type`` 関数は、Pythonの **組み込み関数** と呼ばれます。
    組み込み関数は数が多く、筆者たちもすべてを事細かく把握していません。
    ではどうしているかというと、分からないことがあったら **そのたびに** 組み込み関数の **使い方を調べ** ています。
    組み込み関数を覚えるのではなく、使い方の **調べ方を覚える** ことをおすすめします。

    PCでブラウザーを開き、以下を入力してください。
    https://docs.python.org/ja/3/library/functions.html

    .. figure:: images/4/4-8-python-functions-document.png
        :align: center

        組み込み関数の一覧ドキュメント
    
    組み込み関数の一覧から ``len()`` をクリックすると、 ``len`` 関数の説明が現れます。

    .. figure:: images/4/4-9-len_document.png
        :align: center

        ``len`` 関数のドキュメント
    
    このように、組み込み関数の使い方が分からなくなったら調べられます。
    Pythonに限らず、プログラミング言語には、あらかじめ用意された関数があります。
    それらの使い方は、**ドキュメントで調べられます** 。

    なお、``len`` 関数のドキュメントを読んでよく分からなくても心配ありません。
    ドキュメントはPythonに慣れた人向けに書かれているからです。
    「オブジェクト」「シーケンス」「コレクション」といった言葉は、Pythonの学習を進めていく中で徐々に意味がつかめてきます。
    意味をつかんだ語が増えるにつれて、ドキュメントを読めるようになっていきます。

.. column:: ◯文字以内で書く時に ``len`` 関数が便利

    日常生活で◯文字以内で文章を書くことはたびたびありますよね（例えば本書の説明文を100文字で書く）。
    そんなときに私は、対話モードを立ち上げて ``len`` 関数を使います。
    
    今書いている文章の文字数を変数に代入します。
    そして ``len`` 関数を呼び出し、今の文字数を確認します。
    100文字との差を求めて「もっと書かなきゃ」「ここを削ろう」などと推敲しています。
