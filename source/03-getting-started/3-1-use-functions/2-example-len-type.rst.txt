関数を使ってみよう
========================================================

文字列の長さを数える関数
--------------------------------

文字列は文字の並びですから、何文字あるか数えることができます。
例えば、 ``"こんにちは"`` という文字列の場合は、「こ」「ん」「に」「ち」「は」の5文字ですね。

文字列が何文字か数えるという処理はよく使うので、関数として用意されています。

.. list-table:: 何文字か数える関数
    :align: center

    * - 箱の名前
      - ``len``
    * - 箱は何をするか
      - 文字列が何文字か数える
    * - 箱に入れるもの
      - 文字列
    * - 箱から出てくるもの
      - 整数（文字数を表す）

では ``len`` 関数を使ってみましょう。
対話モードに ``len("こんにちは")`` と入力してEnterキーを押すと、文字数が表示されます。

.. code-block:: python

    >>> len("こんにちは")
    5

箱の名前 ``len`` にカッコ ``()`` を続けます。
箱に入れるもの（ここでは ``"こんにちは"``）は、カッコの中に書きます。
Enterキーを押すと、箱が処理をして、文字数（``5`` 文字）が出てきます。

.. figure:: images/4/4-3-len_box_image.drawio.png
    :align: center
    :width: 60%

    文字列 ``"こんにちは"`` を箱に入れる

別の文字列を入れると、``len`` 関数から出てくる長さは変わります。
文字列の繰り返しを使って用意した20文字の文字列を入れてみましょう。

.. code-block:: python

    >>> len("ー" * 20)
    20

文字列の長さ ``20`` 文字と結果が出ていますね。
式を箱に入れる場合、評価された値が入ります。

.. 「引数式は全て、呼び出しを試みる前に評価されます。」
    https://docs.python.org/ja/3/reference/expressions.html#calls

.. figure:: images/4/4-4-len_pass_expression.drawio.png
    :align: center

    箱に入るのは評価された値

練習問題
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ここまでで使った文字列を1つ思い出し、``len`` 関数で長さを求めてみましょう
（思い出せない場合は、好きな言葉でかまいません）。

.. answer::

    .. code-block:: python

        >>> len("さしもしらじな" + "もゆるおもひを")
        14

値の型を確認する関数
--------------------------------

:numref:`value_integer_string` 「:ref:`value_integer_string`」で取り上げた、型（値の種類）を確認する処理も、関数として用意されています。

.. list-table:: 型を確認する関数
    :align: center

    * - 箱の名前
      - ``type``
    * - 箱は何をするか
      - 引数に渡した値の型を返す
    * - 箱に入れるもの
      - 値
    * - 箱から出てくるもの
      - 型

では、``type`` 関数を使って型を確認しましょう。
整数と文字列を入れてみます。

.. code-block:: python

    >>> type(2)
    <class 'int'>
    >>> type("もゆるおもひを")
    <class 'str'>

:numref:`value_integer_string` の中の「:ref:`value_integer_string__types`」で紹介した型（``int``, ``str``）が出ていますね。

.. figure:: images/4/4-11-type_box_image.drawio.png
    :align: center
    :width: 60%

    関数 ``type`` の結果は型

練習問題
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``type`` 関数で浮動小数点数の型を確認してみましょう。

.. answer::

    .. code-block:: python

        >>> type(1.08)
        <class 'float'>

    浮動小数点数を表す型は ``float`` と分かりました（floating（浮動）の省略です）。

.. column:: 関数でよく見かけるエラー2つ

    1つ目は関数の名前の打ち間違いです。
    変数の打ち間違いと同じように、処理系は ``NameError`` を出します。

    .. code-block:: python

        >>> lem("こんにちは")
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        NameError: name 'lem' is not defined
    
    関数を使っていて、``NameError`` に出会ったら、**関数の名前を打ち間違えていないか** 確認しましょう。

    もう1つのエラーは、型に関係するエラーです。
    ``len`` に整数を入れてみたらどうなるでしょうか。

    .. code-block:: shell

        >>> len(123)
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: object of type 'int' has no len()

    整数を ``len`` 関数に入れられないために、処理系は ``TypeError`` を出しました。

    関数で ``TypeError`` が出たら、その関数が処理できない型を入れています。
    できない使い方をしているということなので、諦めましょう（別の方法での実現を考えます）。
    どこかを修正すれば出なくなる ``NameError`` と異なります。
    ここでは、関数によっては **箱に入れられない値がある** ことを、頭の片隅に留めておいてください。
