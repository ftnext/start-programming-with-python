.. _use_functions:

============================
関数でまとまった処理を扱おう
============================

.. プログラムをプログラミング言語処理系に処理させる（＝プログラムの実行）
    「処理」という言葉で、文に対する処理系の振る舞いを表している

変数に代入し、それを使った式を評価するといった一連の文を書けるようになりましたね。
プログラミングでは、代入してから式を評価のような **一連の文をまとめて1つの処理にできます**。
この章から :numref:`define_functions` 「:ref:`define_functions`」までで、*文がまとまった処理* について学びましょう。

プログラミングでは、**ひとまとまりにした処理** のことを **関数** （かんすう）と呼びます。
この章では、プログラミング言語が用意した関数を使えるようになりましょう。
対話モードにプログラムを入力しながら読み進めてください。

関数とは
============================

処理をする箱
--------------------------------

関数には「数」という字が付きますが、数値ではありません。
まとまった **処理** を指します。

関数は「函数」（かんすう）とも書かれます。
「函」という字は、 **箱** を意味します。
つまり、函数（関数）は、何らかの箱ということです。

関数は、**入れられたものを決まった手順で処理し、結果を出す箱** です。
箱には、どんな処理かが分かるように名前が付いています。
箱の中身がどうなっているかは、外から見えません。
ですが、プログラマーは中身を詳細に知らなくても処理の結果を利用できます。

関数の4要素

- 箱の名前
- 箱は何をするか
- 箱に入れるもの
- 箱から出てくるもの

.. figure:: images/4/4-1-function_is_box.png
    :align: center
    :width: 80%

    入力した値を箱が処理し、結果が出てくる

関数のイメージ：自動販売機
--------------------------------

身近なものでは、例えば自動販売機が関数に近いです。
自動販売機を関数だと思うと、こんな箱です：

.. list-table:: 自動販売機という関数
    :align: center

    * - 箱の名前
      - 自動販売機
    * - 箱は何をするか
      - 飲み物を販売する
    * - 箱に入れるもの
      - お金、飲み物の指定
    * - 箱から出てくるもの
      - 飲み物、おつり

.. figure:: images/4/4-2-vending_machine_metaphor.png
    :align: center
    :width: 80%

    お金を入れ、飲み物を指定すると、飲み物とおつりが出てくる

私たちは自動販売機の中身やどう動いているかを事細かに知りませんが、自動販売機を使って飲み物が買えますね。
    
関数のイメージが少しでもつかめたでしょうか。
百聞は一見にしかず、次は実際に関数を使ってみましょう。

.. column:: 箱の「機能」

    皆さんがこの節で出会った「関数」は、英語では function と言います。
    辞書で function を引いてみると、「機能」という訳語があることに気づくでしょう。
    実は、functionを「関数」と訳したことで、少し分かりづらくなってしまっています。

    何か **機能をもった箱** があると想像してください。
    その箱にものを入れると、機能を適用した結果が返ってきます。
    入れたものに対して、機能を働かせた結果を返す、そんな箱が関数です。
