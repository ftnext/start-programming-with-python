.. _programmer_thinking__naming:

名前は重要
================================================

プログラムの3大構造を学ぶ中で、変数や関数名は、日本語をローマ字にして付けました。
例えば ``aisatsu_bun`` 関数は「挨拶文（あいさつぶん）」のローマ字表記です。

実用的なプログラムを作る前に、**名前を付ける際の考え方** を知りましょう。
また、**英単語をつないだ** 名前の付け方も紹介します。

名前にはよい／悪いがある
------------------------------------------------

実はプログラマーは、プログラムを書くよりも **他人が書いたプログラムを読む時間の方が多い** です。
プログラムを読んで理解するときには、変数や関数名といった名前が手がかりになります。
**名前を具体的にする** ことで、プログラムを理解するまでの時間を短くできます。

よい名前とは、他のプログラマーがプログラムを読んで **理解するまでの時間を短くする** 名前です。
よい名前は具体的な名前です。
変数であれば、**指す値の意味を示す名前**、関数であれば、**処理の内容を示す名前** がよい名前です。

例えば、``a = 1080`` の変数 ``a`` はよい名前でしょうか？
指している値 ``1080`` がどんな意味か分かりづらいですよね。
仮に、この値は合計を意味しているとしましょう。
``goukei = 1080`` と書き換えると、``1080`` という値が合計であることが伝えられます

「自分のプログラムを他のプログラマーに見せる機会がないから関係ない」とは考えないでください。
プログラムを読んで理解するプログラマーには、**数週間〜数カ月先の（どんなプログラムかを忘れた）あなた自身** も含まれます。
未来の自分がプログラムをすぐに把握できるように、意味を説明する名前を付けていきましょう。
ここまでに登場したローマ字表記の名前も、意味を説明するような名前を選んでいました。

.. column:: よい名前についてもっと知る

    よい名前を付けることは簡単そうに聞こえて奥が深いです。
    プログラマーも苦労してきたようで、先人たちが数々の指針を残しています。
    
    よい名前を付けたい場合、自己流でやるよりは、**先人の残した指針を参考にする** のをおすすめします。
    例えば『リーダブルコード』という本で、先人の指針を学べます。

変数や関数の名前は英単語で付ける
------------------------------------------------

ここまで、名前をローマ字表記で付けたのは、初めてプログラミングをする上での障壁を小さくするための工夫です。
プログラマーは一般に、**英単語を組合せて** 名前を付けます。
本書の残りで登場するプログラムも、変数や関数名が英単語に変わります。

.. 英文法ができるに越したことはない（参照できる情報が増えるので）。
    ただ英文法ができるようになるのに時間がかかるので、英単語を最低限カバーするように伝える
    （読者がやりたいのはプログラミングであって、英文法ではない）

「英単語」と聞いて、「英語に自信がない」と思うかもしれませんが、心配いりません。
プログラムは英文ではないので、英文法の知識は必須ではありません。
**英単語をつなげればいい** のです。

.. https://youtu.be/kHLYfe-hTTw?t=131
    「〇〇するやーつ」→英語化

名前は理解するまでの時間を短くすることが重要です。
なので、**まず日本語で** 具体的な名前を考えましょう。
具体的な名前が決まったら、**単語ごとに英語に置き換え** ます。
このとき、インターネット上の辞書サイトや、PCに内蔵された辞書アプリ（macOSの「辞書.app」など）の助けを得られます。

.. 『自走プログラマー』2:関数名ではより具体的な意味の英単語を使おう　辞書サイトの紹介もある
    https://jisou-programmer.beproud.jp/%E9%96%A2%E6%95%B0%E8%A8%AD%E8%A8%88/2-%E9%96%A2%E6%95%B0%E5%90%8D%E3%81%A7%E3%81%AF%E3%82%88%E3%82%8A%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E6%84%8F%E5%91%B3%E3%81%AE%E8%8B%B1%E5%8D%98%E8%AA%9E%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86.html

英文法としての誤りを心配する必要はありません。
十分具体的な英単語をつないだら、文法的に間違っていたとしても、プログラムを理解するまでの時間は短くなります。

.. column:: 英単語の意味を調べる習慣を付けよう

    この本の目的はプログラミング入門ですから、英単語にどうしても苦手意識がある場合は、ローマ字表記の名前を使えばよいでしょう。
    ですが、プログラミングに取り組む中では、英単語を完全に避けて通ることはできません。
    例えば、ライブラリにある関数は、英単語で命名されていますし、皆さんから見て先輩のプログラマーたちは英単語で命名します。

    英単語への苦手意識を払拭できると、プログラミングでも恩恵が得られます。
    中学校や高校で習う英文法をやり直す必要はありません。
    **英単語の意味を個々に調べて** 意味をつかめばいいのです。
    
    意味を調べる習慣が付くと、ライブラリにある関数名から処理内容がつかめます。
    また、他のプログラマーと一緒にプログラムを書く機会にも飛び込んでいきやすくなるでしょう。
    英単語の意味を掴むようにすることで、プログラムを通したコミュニケーションができるようになるのです。

例：挨拶のプログラムを書き変える
------------------------------------------------

以上を踏まえ、:file:`aisatsu.py` を書き直します。
ローマ字表記で具体的な名前になっているので、英単語に置き換えます。
「挨拶をする」は英語でgreetなので、ファイル名も :file:`greet.py` に変えます。

.. literalinclude:: codes/7-2/greet.py
    :language: python
    :caption: greet.py
    :linenos:

.. list-table:: 英単語を使って ``aisatsu.py`` を書き換え
    :align: center

    * - 変数／関数の役割
      - これまでのローマ字表記
      - 英単語を使った表記
    * - 挨拶の言葉を返す
      - ``aisatsu_bun``
      - ``greeting`` （挨拶の言葉という意味）
    * - 名前を表す
      - ``namae``
      - ``name``

ここまでに登場したプログラムを英単語を使って書き直すと練習になるでしょう。
また、ここまでのプログラムを何も見ずにスラスラと書けるようになれば、よい名前付けの習慣が身に付いています！

.. advanced:: 命名での単語のつなぎ方

    複数の単語を組合せて名前を付ける時、本書では **アンダースコアでつないで** きました（例：``aisatsu_bun``）。
    この記法は、胴の長い蛇（snake）のように見えるため、「スネークケース」と呼ばれます。

    単語をそのままつなげると、区切りが分からず読みにくいですよね（例： ``greentea``）。
    そのため、つなぎ方を考える必要があり、スネークケース以外のつなぎ方も考案されてきました。

    * **ハイフン** でつなぐ：``green-tea`` （ケバブケース）
    * 続く単語の **先頭の文字を大文字にして** つなぐ：``greenTea`` （キャメルケース）

    キャメル（camel）はラクダのことで、大文字がラクダのコブのように見えることから呼ばれています。

    スネークケース、ケバブケース、キャメルケース、どれが使われるかはプログラミング言語ごとに異なります。
    Pythonを書く場合は、スネークケースが多いです。

    .. ref: https://en.wikipedia.org/wiki/Naming_convention_(programming)#Examples_of_multiple-word_identifier_formats
        スネークケース、キャメルケース（Java）、ケバプケース（Lisp）

.. column:: 繰り返し読まないプログラムなら、よい名前にこだわらなくてもいい

    具体的な名前を付けるのは、読んだときにプログラムをすぐに把握できるようにするためです。
    もしそのプログラムを繰り返し読むことがないのなら、具体的な名前にこだわらなくてもよいでしょう。

    繰り返し読まないプログラムの例は、**新しく知ったことを対話モードで試すとき** です（:numref:`fork` のコラム参照）。
    新しく知った関数や書き方を把握するのが目的で、後から読み返すわけではありません。
    そんなとき、私は ``a`` や ``b`` のような「悪い」変数を使います。
    ただし、把握した後にファイルに書くときは、指す値を具体的に示すよい名前になるように注意を払います。

.. 申し送り：紙面に余裕があれば、関数の名前の付け方（変数との違い。動詞か名詞か）のコラムを書いてもいいかも
