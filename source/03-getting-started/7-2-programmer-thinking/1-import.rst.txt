.. _programmer_thinking:

================================================
プログラマーの考え方を知ろう
================================================

この章では、実用的なプログラムを作る上で押さえておくと役に立つ話題を2つ紹介します。

- プログラムの再利用
- 命名

それぞれの話題でプログラマーの考え方を押さえたら、次章からはいよいよ実用的なプログラムを作ります。

プログラムを再利用する
================================================

皆さんの手元には、これまでに書いてきたプログラム（Pythonのファイル）がありますね。
例えば、:numref:`in_order` の「:ref:`in_order__practice`」では、
渡した名前の人への挨拶文を返す関数 ``aisatsu_bun`` を :file:`aisatsu.py` に作りました。

それでは、別のプログラムを書いている時に、
``aisatsu_bun`` 関数が返すのと全く同じ挨拶文を返す関数を使う必要があるとなったら、どうしますか？

``aisatsu_bun`` 関数をコピー&ペーストして、別のプログラムに定義するというやり方も浮かびますね。
ですが、プログラマーの考え方としては、すでにある ``aisatsu_bun`` 関数を **再利用する** ことを考えます。

.. aisatsu.py は 4-in-order/3-handle-input.rst.txt を終えた後の状態（codes/4-3/aisatsu.py）

.. literalinclude:: codes/7-2/aisatsu_4_3.py
    :language: python
    :caption: 現在の aisatsu.py
    :linenos:

再利用の手順は2段階です。

1. :file:`aisatsu.py` を **読み込む**
2. ``aisatsu_bun`` 関数を呼び出す

1の読み込みについて解説します。
読み込んだ後の呼び出しは、関数の呼び出しと共通です。

プログラムを読み込む
------------------------------------------------

``import`` 文
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

読み込むには ``import`` 文を使います。
プログラマーは、プログラムを読み込むことを「プログラムをインポートする」とも言います。

``import プログラム名`` と書くと、指定したプログラムを読み込めます（例：``import aisatsu``）。
プログラム名の拡張子は不要です。

対話モードで試してみましょう。
カレントディレクトリが ``basic`` であることを確認してから、対話モードを起動してください。

:file:`aisatsu.py` を読み込みます。
ファイルを読み込む処理系は、まずその **ファイルを実行** します。

.. code-block:: python

    >>> import aisatsu  # doctest: +SKIP
    名前を入力してください：

処理系が :file:`aisatsu.py` を実行し、5行目の ``input`` 関数で入力待ちになりました。
名前を入力すると、残りが実行され、読み込みは完了します（``print`` 関数による表示があります）。

.. code-block:: python

    >>> import aisatsu  # doctest: +SKIP
    名前を入力してください：nikkie
    nikkieさん、ごきげんよう^o^
    >>>

対話モードのプロンプトが再度現れたら、読み込み完了です。
``import`` 文を実行すると、処理系は :file:`aisatsu.py` を ``aisatsu`` という **名前で扱える** ようになります。
:file:`aisatsu.py` の ``aisatsu_bun`` 関数は、``aisatsu.aisatsu_bun`` とドットでつないで呼び出せます。

.. inputが実行されるモジュールを読み込めないので、doctestはSKIP

.. code-block:: python

    >>> aisatsu.aisatsu_bun("nao_y")  # doctest: +SKIP
    'nao_yさん、ごきげんよう^o^'
    >>> aisatsu.aisatsu_bun("susumuis")  # doctest: +SKIP
    'susumuisさん、ごきげんよう^o^'

``aisatsu_bun`` 関数を再利用できました！

読み込むときに実行しない処理を指定する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``aisatsu.py`` の読み込みで名前の入力が求められるのは少し使いづらいですよね。
そこで、``import`` で **読み込むときには実行しないという分岐を追加** します。

.. literalinclude:: codes/7-2/aisatsu.py
    :language: python
    :emphasize-lines: 5
    :caption: aisatsu.py
    :linenos:

``aisatsu.py`` を変更したら、対話モードを一度終了してから再度開いて ``import`` します。

.. doctestを実行するディレクトリにaisatsu.pyがあれば、import可能

.. code-block:: python

    >>> import aisatsu
    >>> aisatsu.aisatsu_bun("susumuis")
    'susumuisさん、ごきげんよう^o^'

名前を入力せずに読み込めました！

追加した分岐について説明します。
これは **ファイルをコマンドラインから実行したときのみ** 実行される分岐です。

条件に使われている ``__name__`` は **変数** です。
前後にアンダースコアが2つずつ付いていますが、変数であることは変わりません。
この変数は、Pythonファイルが持つ特別な変数です。

- コマンドラインからPythonファイルを実行する時、そのファイルの ``__name__`` が指す値は、文字列の ``"__main__"`` と一致します
- Pythonファイルを ``import`` する時、そのファイルの ``__name__`` が指す値は、文字列の ``"__main__"`` とは一致しません

``import`` でファイルを実行するときは **分岐を通らない** ので、名前の入力が求められないのです。

.. https://docs.python.org/ja/3/reference/import.html#__name__
.. https://docs.python.org/ja/3/library/__main__.html

.. ref: https://docs.python.org/ja/3/tutorial/modules.html#executing-modules-as-scripts
.. https://docs.python.org/ja/3/tutorial/modules.html
    「モジュールの中では、(文字列の) モジュール名をグローバル変数 __name__ で取得できます」

コマンドラインで実行したときの挙動は変わっていません。

.. code-block:: shell

    > python aisatsu.py
    名前を入力してください：nikkie
    nikkieさん、ごきげんよう^o^

``if __name__ == "__main__":`` という分岐は、Pythonのファイルの中でよく使われます。

.. advanced:: 読み込みの別のやり方： ``from import``

    別の ``import`` のやり方も紹介します。
    ``from プログラム名 import 関数名`` と書くと、読み込んだ関数をドットでつながず **そのままの名前で** 呼び出せます。

    対話モードを開き直してから以下を実行してください。

    .. code-block:: python

        >>> from aisatsu import aisatsu_bun
        >>> aisatsu_bun("nao_y")
        'nao_yさん、ごきげんよう^o^'
    
    ``from import`` という書き方でも ``aisatsu.py`` が **実行されることは変わりません**。
    この書き方で読み込むと、``aisatsu.py`` の ``aisatsu_bun`` 関数を ``aisatsu_bun`` という名前で扱えます。
    どちらも使われるので、2通り頭に入れておくと、この後出てくるプログラムが読みやすいでしょう。
    
    .. https://docs.python.org/ja/3/reference/simple_stmts.html#the-import-statement

再利用してプログラムを書く
------------------------------------------------

学んだ ``import`` を使って、関数を別のプログラムで再利用してみましょう。
:file:`aisatsu.py` の ``aisatsu_bun`` 関数を別のプログラムで使います。
``import`` を使うファイルは :file:`aisatsu.py` と同じディレクトリ（``basic``）の中に作ってください。

.. literalinclude:: codes/7-2/example_reuse.py
    :language: python
    :caption: 再利用の例
    :linenos:

再利用するのは、あなたが作ったプログラムだけにとどまりません。
**他のプログラマーが作ったプログラム** も再利用できます。

プログラマーが再利用できるように公開されたプログラムは「ライブラリ」と呼ばれます。
**プログラミング言語には、よく使う処理がライブラリとして用意** されています。
Pythonにも「標準ライブラリ」があります。
Pythonと一緒にインストールされるので、皆さんの環境はすでに標準ライブラリは使える状態です。

.. column:: ライブラリは作品集と似ている

    ライブラリという言葉には、**作品集** という意味もあります。
    作品集を入手するように、ライブラリもインストールして入手する必要があります。

    作品集が1つ1つの作品から成るように、ライブラリも「モジュール」が集まってできます。
    モジュールは、プログラムが書かれた **ファイル** です。

    .. https://docs.python.org/ja/3/tutorial/modules.html
        「モジュールは Python の定義や文が入ったファイル」
    
    ``import`` 文を使うと、ライブラリにあるモジュール（ファイル）に書かれた関数や型を使えます。
    作品集の中の作品から、特定の部分を参照するイメージです。

標準ライブラリに用意されたモジュールから、関数や型を ``import`` するだけで、様々な処理が使えます。
:numref:`programming_practice` 「:ref:`programming_practice`」 以降で登場するプログラムをお楽しみに。

.. advanced:: 標準ライブラリ以外のライブラリ

    プログラミング言語に用意されたライブラリ以外にも、**プログラマーが公開しているライブラリ** がたくさんあります。
    標準ライブラリだけでもかなり多くのことができますが、
    標準ライブラリ以外のライブラリ（サードパーティーライブラリ）を使えば、文字通りあらゆることができる印象です。

    サードパーティーライブラリは、**ライブラリごとにインストール** して、あなたの環境で使える状態にする必要があります。
    プログラマーの世界には、「パッケージマネージャー」と呼ばれる、インストールを手伝ってくれるソフトウェアがあります。  # noqa
    サードパーティーライブラリを使う必要が生じたら、使い方を調べたり、質問したりしましょう。

    .. パッケージを使わないというルールに反するが、パッケージマネージャという語を出さざるを得ないと思われる。pipだけでなくnpmなども想定（これは共著者にNOQAと伝えるためのコメント）

.. column:: なぜ関数をコピー&ペーストしなかったのか

    ``aisatsu.py`` を読み込む代わりに「``aisatsu_bun`` 関数をコピーして、
    使いたいファイルにペーストすればいいのではないか」と思ったかもしれませんね。
    なぜそうしなかったのか、その理由は、似たコードが増えてしまうからです。

    **似たコードが増えると、変更が大変になります**。
    例えば ``aisatsu_bun`` 関数の返り値に含む顔文字を変更するとしましょう。
    コピー&ペーストで増やした全ての ``aisatsu_bun`` 関数を変更しなければなりません。
    1つ1つの修正は単純だと思うかもしれませんが、作業箇所が多いほど、作業漏れなどミスしやすくなります。

    このように、コピー&ペーストは、プログラムの **変更しやすさを失わせ** てしまいます。
    変更しやすい状態を保つため、コピー&ペーストをせずに ``import`` で読み込みます。
    これならば ``aisatsu_bun`` 関数の返り値を変えることになっても、読み込み元1箇所だけの変更で済みます。

    プログラマーの世界には、DRY（ドライ。乾燥という意味のドライともかけている）という格言もあります。
    Don't repeat yourself「**繰り返してはならぬ**」の略です。
    繰り返しによる悪影響はみな知っているのです。

.. column:: ライブラリを使うのに気後れする必要はない

    プログラマーの世界には、ライブラリを **他のプログラマーが使えるように公開する文化** があります。
    この裏にあるのは、「自分にとって便利なライブラリは、他の誰かにとっても便利」という考え方です
    （関連：:numref:`env` の「オープンソース」のコラム）。
    なので、プログラミングを始めたばかりでも、**凄腕プログラマーが開発した便利なライブラリ** をあなたのプログラムの中で使えます。

    もしかすると、「まだまだ学び始めの自分が使っていいのか」と気後れするかもしれませんね。
    敬意は必要ですが、**遠慮は不要** です。
    **感謝を胸に**、積極的に使いましょう。
    ライブラリを使うと、あなたがプログラミングでできることが一気に増えます！
    この姿勢は「巨人の肩に乗る」と呼ばれ、プログラマーの世界で奨励されます。

    .. 巨人の肩に乗る https://ja.wikipedia.org/wiki/%E5%B7%A8%E4%BA%BA%E3%81%AE%E8%82%A9%E3%81%AE%E4%B8%8A

    もらいっぱなしが気になるのなら、いつの日かあなたの書いたプログラムが、
    **他の誰かの課題を解決するという形で、コミュニティにお返し** すればいいのです。
    他の誰かは、先を行く凄腕プログラマーに限らず、あなたの後に続く初学者でもいいのです。

    ライブラリを使う際の心構えとして「お客さまにならない」ことをおすすめします。
    ライブラリは完成した製品ではなく、**プログラマーコミュニティのみんなで開発中** のプログラムです。
    なにか問題に気づいたら、苦情を言うのではなく、「一緒に修正しよう」という姿勢で関わりましょう。
