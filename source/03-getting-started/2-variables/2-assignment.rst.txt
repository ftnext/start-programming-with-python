代入
============================

.. 代入の説明の次案「変数を使って、値に名前を付けることを代入と言います」

ここでプログラミングの用語を1つ紹介します。
``a = 4`` のように、値に名札を付けることを **代入** （だいにゅう）と言います。
「変数 ``a`` に ``4`` を代入する」プログラムと説明されます。

.. ref: https://docs.python.org/ja/3/reference/simple_stmts.html#assignment-statements
    「代入文は、名前を値に (再) 束縛したり、変更可能なオブジェクトの属性や要素を変更したりするために使われます」

.. figure:: images/3/3-8-2_assignment.drawio.png
    :align: center
    :width: 30%

    代入は、値に名札を付けること

.. 代入は「名前への束縛」の1つの方法
    https://docs.python.org/ja/3/reference/executionmodel.html#binding-of-names
    「代入が行われるときの代入対象の識別子」

.. 「変数を定義する」の裏付け
    https://docs.python.org/ja/3/tutorial/introduction.html#numbers
    「変数が "定義" されていない (つまり値が代入されていない) 場合」
    英語ではdefine

変数に値を代入することを「変数を定義する」や「変数を初期化する」とも言います。
前の節のコラムで紹介した ``NameError`` は、値を代入していない変数を使おうとした場合のエラーです。

文で動作を指示する
------------------------------------

.. ステートメント statement（スーパー大辞林）
    「コンピューターのプログラム言語で記述された文。コンピューターに動作を指示する」

``a = 4`` のような代入のプログラムについて少し掘り下げてみましょう。

.. https://docs.python.org/ja/3/reference/executionmodel.html#structure-of-a-program
    Pythonプログラムの最小単位は"ブロック"
    「Python プログラムはコードブロックから構成されます。ブロック (block) は、一つのまとまりとして実行される Python プログラムテキストの断片です。」

.. 「単純文とは、単一の論理行内に収められる文です」
    https://docs.python.org/ja/3/reference/simple_stmts.html
    論理行 ref: https://docs.python.org/ja/3/reference/lexical_analysis.html#logical-lines
    物理行がテキストで書かれたコードと思われる

対話モードに式を入力すると、評価した結果が表示されましたね。
それに対して、``a = 4`` を対話モードに入力したときは、何も表示されませんでした。

.. 対話モードでは「式文」
    https://docs.python.org/ja/3/reference/simple_stmts.html#expression-statements

``a = 4`` が何かというと、「文」です。
文は、**処理系に動作を指示** します。
``a = 4`` は処理系に代入するように指示しているのです。
その結果、``a`` が ``4`` の名札となります。

皆さんはすでに2種類の文を知っています。
1つは代入、もう1つは対話モードに入力した **式自体** です。
``5 + 7`` のような式も、処理系に **評価を指示** するので文なのです。
この後の章では、これら以外の文も登場しますよ。

プログラムは様々な文を組み合わせて書かれます。
処理系がやっていることは、**文を実行する**、ただそれだけです。

評価結果に名前を付ける
------------------------------------

式を使うと、評価結果を変数に代入できます。
``4 * 6`` という掛け算の結果を変数 ``seki`` に代入してみましょう。

.. code-block:: python

    >>> seki = 4 * 6
    >>> seki
    24

式（掛け算）がまず評価されて、その結果が ``seki`` に代入されました
（掛け算の計算結果を積と言うことから、この名前にしました）。
**式の評価が先** に行われ、**評価した結果の値に名前が付く** という順番です。

.. figure:: images/3/3-8_assignment.drawio.png
    :align: center
    :width: 40%

    評価した結果に、名前を付ける

式には変数も使えますから、ある変数を使った式の評価結果を別の変数に代入できます。
すでに ``4`` を代入した変数 ``a`` を使った例です。

.. code-block:: python

    >>> a
    4
    >>> seki2 = a * 6
    >>> seki2
    24

``a * 6`` の評価結果が、変数 ``seki2`` に代入されました。

.. figure:: images/3/3-9_assign_result.drawio.png
    :align: center
    :width: 40%

    変数を使った式の評価結果に別の名前を付ける

桁が大きくて **暗算できない場合** に、式を使った代入は便利です。

.. code-block:: python

    >>> ookii_seki = 3600 * 24 * 365

.. 1年が何秒にあたるかの計算の例

``3600 * 24 * 365`` の評価結果をプログラマーが暗算できなくても問題ありません。
この積には ``ookii_seki`` という名前が付いているので、この変数を使えば続きの計算に進めます。

代入の使い所
------------------------------------

式に加えて代入も使うことで、プログラマーができることは広がります。

1. 評価結果を再利用できる
2. 名前を使うことで分かりやすい式にできる

前項の ``ookii_seki`` のように評価結果に名前が付くと、``ookii_seki`` を使った別の式を書けますね。
このように **評価結果を再利用** できます。
名前を付けながら評価を積み重ねていき、最後には欲しい結果に至れます。

評価結果の再利用だけを考えると ``a`` や ``b`` のような名前でもいいと思うかもしれません。
ですが、時間が経って何についての処理かをあなたが忘れてしまった場合に備えて、**評価結果が何を表すか明確にする名前** を付けることが重要です
（:numref:`programmer_thinking` 「:ref:`programmer_thinking__naming`」もお楽しみに）。

例として、分かりやすい式を使って、1年（365日）は何秒かを求めてみます。
1日は24時間で、1時間は3600秒ですね。
まず1日の秒数を求め、その値を代入した変数を使って、1年の秒数を求めます。

.. code-block:: python

    >>> ichinichi_byou = 3600 * 24
    >>> ichinen_nichi = 365
    >>> ichinen_byou = ichinichi_byou * ichinen_nichi

1日の秒数に1年の日数を掛けて、1年の秒数を求めました。
途中の評価結果を変数に代入して、何を求めているかを示しながら、求める答えまで計算しています。
後で見返した時、変数を手がかりにして、「1年の秒数を求めているプログラムだ」と思い出せますね。
