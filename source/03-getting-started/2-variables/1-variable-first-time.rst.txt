.. _variables:

====================================
値を変数で扱おう
====================================

値と演算子から式を書き、処理系が評価した結果を確認できるようになりましたね。
プログラマーは、値に *名前を付けて* 扱います。
この章では、値に名前を付けたり、名前を使った式を書けるようになりましょう。

前章から引き続き、対話モードにプログラムを入力しながら読み進めてくださいね
（コマンドラインの先頭に ``>>>`` と表示されていれば準備完了です）。

変数で値に名前を付けよう
============================

数値に名前を付ける
------------------------------------

まずは数値に名前を付けてみます。

.. code-block:: python

    >>> a = 4

.. image:: images/3/3-2_variable_terminal_shot.png
    :align: center

.. a = 4: 名前aにオブジェクト4を束縛
    名前aは変数
    言い回し：aという変数、変数a（「変数の名前a」はちょっと違うと思う）

Enterキーを押すと、対話モードには何も表示されずに、再度プロンプトが現れます。
これで ``4`` という数値に ``a`` という名前が付きました。

対話モードに名前 ``a`` を入力してみましょう。

.. code-block:: python

    >>> a
    4

.. image:: images/3/3-2-2_terminal_variable_value.png
    :align: center

.. https://docs.python.org/ja/3/reference/expressions.html#atom-identifiers
    「名前があるオブジェクトに束縛されている場合、名前 atom を評価するとそのオブジェクトになります。」

``a`` も式です。
この式の評価結果は、``a`` という名前が指す ``4`` となります。

.. 識別子・名前・変数は同じものと理解（変数==名前）
    https://docs.python.org/ja/3/reference/lexical_analysis.html#identifiers
    「識別子 (または 名前 (name)) は（略）」
    https://docs.python.org/ja/3/reference/executionmodel.html#binding-of-names
    （一部抜粋）「その名前はグローバル変数 (global variable) です」
    → 変数と名前は同じものと考えると、「変数の名前」は変な言い回しなので、リライトした

.. 上のコメントを踏まえ、「変数（名前）を値の名札として扱います」という言い回しで説明していく

ここで見た ``a`` のように、値に付ける名前を「**変数** （へんすう）」と言います。
プログラミングでは、変数を **値の名札** として使います。

.. 名札：名前を記した札
    名札として紐付ける（名前束縛）は、プログラミング言語処理系による

.. figure:: images/3/3-1_nameplate_image.drawio.png
    :align: center
    :width: 40%

    ``a`` と書かれた名札を、整数の ``4`` に付けた

変数は **値そのもののように扱えます**。
試しに、変数 ``a`` を使った式を書いてみましょう。

.. code-block:: python

    >>> a * 6
    24

変数を評価した結果は、変数が指す値になります。
式 ``a * 6`` の評価では、変数 ``a`` が指す ``4`` が使われて、``4 * 6`` が評価されました。

.. figure:: images/3/3-3_use_variable.drawio.png
    :align: center
    :width: 40%

    名札が付いている値が評価に使われる

続いて、数値 ``6`` に ``b`` という別の名前を付けます。

.. code-block:: python

    >>> b = 6
    >>> b
    6

変数 ``a`` と ``b`` がそれぞれ指す値を掛けてみましょう。

.. code-block:: python

    >>> a * b
    24

``a`` が指す値 ``4`` と ``b`` が指す値 ``6`` の積 ``4 * 6`` が評価されました。

.. figure:: images/3/3-4_use_variables.drawio.png
    :align: center
    :width: 40%

    ``a`` と ``b`` は別々の名札

練習問題
------------------------------------

変数に慣れる練習です。
``a`` や ``b`` を使った式（掛け算以外）を対話モードで評価してください。
そして、変数が指す値で評価されているか確認してみてください。

例えば ``33 - a`` のように変数を1つだけ使ってもいいですし、``a - b`` のように変数を2つ使ってもいいです。

.. column:: アルファベットは文字列にも変数にもなる

    ``a`` や ``b`` といった変数（名前）を使ってきました。
    アルファベットを使っていますが、``a`` や ``b`` は文字列ではないことに注意してください。

    **シングルクォートやダブルクォートを付けないアルファベットの並びは、変数** になります。
    ``c = "c"`` のように、文字列 ``"c"`` に ``c`` という名前を付けることもできます。

文字列に名前を付ける
------------------------------------

文字列に名前を付けるときも、数値のときと同様です。
プログラミングでは、どんな型の値でも変数で名前を付けることができます。

変数 ``banzai`` を文字列 ``"万歳！"`` の名札にしてみます。

.. code-block:: python

    >>> banzai = "万歳！"
    >>> banzai
    '万歳！'

.. figure:: images/3/3-5_string_value.drawio.png
    :align: center
    :width: 40%

    文字列にも名札を付けられる

変数 ``banzai`` は値そのもののように扱えますから、文字列の繰り返しを評価してみます。

.. code-block:: python

    >>> banzai * 3
    '万歳！万歳！万歳！'

``"万歳！" * 3`` が評価されていますね。

繰り返しの回数を表す整数にも変数を使ってみましょう。

.. code-block:: python

    >>> banzai * b
    '万歳！万歳！万歳！万歳！万歳！万歳！'

``"万歳！" * 6`` が評価されました！
変数にはだいぶ慣れましたか？

本書ではしばらくの間、**ローマ字表記の変数** を使います（例： ``goukei``、``goukei_kingaku``）。

.. column:: NameErrorを見かけたら、変数を入力し間違えていないか見直そう

    変数を使い始めると、``NameError`` というエラーによく出会うようになります。
    これは、その変数が名札として使えず、プログラムを実行できなかったことを表します。
    具体的には、**変数を入力し間違えている** 場合です。

    試しに、``banzai`` という変数を入力し間違えてみましょう。

    .. code-block:: python

        >>> banzai
        '万歳！'
        >>> baznai * 3
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        NameError: name 'baznai' is not defined

    ``banzai`` を ``baznai`` と間違えたところ、処理系は ``NameError`` を出しました。
    ``"万歳！"`` の3回繰り返しは実行されていません。

    **変数の入力間違いを直せば**、``NameError`` は現れません。

    .. code-block:: python

        >>> banzai * 3
        '万歳！万歳！万歳！'

    .. ref: https://docs.python.org/ja/3/library/exceptions.html#NameError
        「ローカルまたはグローバルの名前が見つからなかった場合に送出されます。」

.. advanced:: 変数に使える文字の決まり

    変数には、**アルファベットの大文字・小文字、アンダースコア** （``_``） **、数字** が使えます（例：``banzai_3sho``）。
    制約は、先頭が数字で始められない（例：``3banzai`` とできない）ことだけです。
    変数を表す文字の長さに制限はなく、好きなだけ長くできます：``boku_ga_kangaeta_saikyou_no_hensu_mei``。
    変数のアルファベットの大文字小文字は区別されます（``banzai`` と ``BANZAI`` と ``Banzai`` と ``BanZai`` は変数としては別物ということです）。

    .. 変数名のルール（識別子）：https://docs.python.org/ja/3/reference/lexical_analysis.html#identifiers
        「大文字と小文字の A から Z、アンダースコア _、先頭の文字を除く数字 0 から 9 です。」
