代入で変数を活用する
============================

この節では、プログラマーが使う代入のやり方2つを見ていきます。

1. 同じ変数に繰り返し代入する
2. 自身を使った式で変数を更新する

特に2はよく使われます。

同じ変数に繰り返し代入する
------------------------------------

同じ変数に複数回代入できます。
その変数は **最後に代入した値を指す** 名前となります。

整数 ``4`` を指す変数 ``a`` で試してみましょう。

.. code-block:: python

    >>> a
    4
    >>> a = 2
    >>> a
    2

変数 ``a`` は最後に代入した値 ``2`` を指すようになりました。
``a`` はもう ``4`` の名札ではありません。

次の式では、（ ``4 * 6`` ではなくて） ``2 * 6`` が評価されます。

.. code-block:: python

    >>> a * 6
    12

**1つの変数は1つの値の名札** です。
``2`` にも ``4`` にも同名の ``a`` という名札は付けられません。
変数は、最後に代入した値を指します。
それまでに指していた値のことは一切指さなくなると考えてください。

.. figure:: images/3/3-11_assign_multiple_times.drawio.png
    :align: center
    :width: 40%

    名札 ``a`` は ``4`` から外れ、代わりに ``2`` の名札となる

自身を使った式で変数を更新する
------------------------------------

同じ変数に繰り返し代入を利用して、**自身を使った式を評価した結果で変数の指す値を更新** できます。
これは初めて見たとき、少し面食らうかもしれません。
プログラミングではよく使われる書き方ですので、慣用句だと思ってください。
理解が追いつかないように感じたときは、対話モードで何回か練習して手で覚えてみましょう。

例として、``5`` を指す変数 ``c`` を用意します。
``c + 2`` は ``5 + 2`` が評価されて ``7`` となりますね。

.. code-block:: python

    >>> c = 5
    >>> c + 2
    7

プログラミングでは、次のような書き方をすることができます。
*変数* ``c`` *に、式* ``c + 2`` *を評価した結果を代入* します。

.. code-block:: python

    >>> c = c + 2
    >>> c
    7

``c = c + 2`` でやっていることは、先ほど見た例の ``seki2 = a * 6`` でやっていることと同じです。
``seki2 = a * 6`` では、式 ``a * 6`` を評価した結果を変数 ``seki2`` に代入します。
それと同じように、式 ``c + 2`` **を評価した結果を変数** ``c`` **に代入** しているのです。
変数 ``c`` は最後に代入した値 ``7`` を指すようになります。

.. figure:: images/3/3-13_assign_self.drawio.png
    :align: center
    :width: 40%

    ``c + 2`` の評価結果に、新たに ``c`` という名前を付ける

.. 実行は value_integer_string 章で紹介した（プログラムをプログラミング言語処理系に処理させる）
    プログラムは式や文を組合せて書かれる。1つの式や文もプログラム。1つの式や文を「実行」と言っていい

``c = c + 2`` のように、変数を使った式を変数自身に代入する場合、何回実行したかで結果が変わることに注意しましょう。
``c`` が指す値が2ずつ増えていきます！

.. code-block:: python

    >>> c = 5
    >>> c = c + 2
    >>> c
    7
    >>> c = c + 2
    >>> c
    9

これに対して、``seki2 = a * 6`` は連続で何回実行しても ``seki2`` が指す値は変わりません。
ただし、毎回はじめに ``c = 5`` と初期化すると、``c`` の指す値は常に ``7`` になります。

.. column:: 代入の慣用句との思い出

    ``c = c + 2`` という書き方を初めてみたとき、私はすんなりと理解できませんでした。
    理解する上でポイントだったのは、代入の ``=`` は、**数学で等しいを表す** :math:`=` **（イコール）とは別物** という気付きです。

    大学のプログラミングの授業で何回か、この書き方の説明を受けたのですが、数式のイコールと違うことに気付くのに私はかなり時間がかかりました。
    説明を聞いてもすっきり理解できない期間は、**何度も書いて手で覚える** ようにしていました（大学では単位を取らなければなりませんからね）。
    
    もし皆さんも、プログラミングで説明を読んでも腑に落ちないときがあれば、手を動かして、対話モードの結果を都度確認しながら、少しずつ理解を深めていきましょう。

練習問題
------------------------------------

代入の「慣用句」に慣れるために練習問題を用意しました。
プログラムは対話モードで入力するとします。

(1) 変数 ``c`` に ``5`` を代入した後で、``c = c - 3`` を実行すると、``c`` が指す値はいくつでしょうか。

(2) (1)の後に、``c = c * 4`` を実行すると ``c`` が指す値はいくつでしょうか。

(3) 変数 ``kakutodani`` に `"さしもしらじな"` を代入した後で、
``kakutodani = kakutodani + "もゆるおもひを"`` を実行すると、``kakutodani`` が指す値は何でしょうか。

.. answer:: (1)

    ``5 - 3`` の評価結果が ``c`` に代入されて ``2`` となります。

    .. code-block:: python

        >>> c = 5
        >>> c = c - 3
        >>> c
        2

.. answer:: (2)

    ``2 * 4`` の評価結果が ``c`` に代入されて ``8`` になります。

    .. code-block:: python

        >>> c = c * 4
        >>> c
        8

.. answer:: (3)

    .. 対話モードの文字列を本文で取り上げるときは、シングルクォートに統一しているように思われる

    ``"さしもしらじな" + "もゆるおもひを"`` の評価結果が代入されて、``'さしもしらじなもゆるおもひを'`` となります。

    .. code-block:: python

        >>> kakutodani = "さしもしらじな"
        >>> kakutodani = kakutodani + "もゆるおもひを"
        >>> kakutodani
        'さしもしらじなもゆるおもひを'

この章では、変数という新しい概念と出会いました。
よく分からないところがあっても、あまり気にしないでくださいね。
書いてあることが全部分かるまで、先を読んではいけないということはありません。
先に進む中で納得することもあります。
また、繰り返し手を動かす中で、「こういうことだったのか！」と納得する瞬間が訪れることもあります。

初めてプログラミングに取り組むというだけで大きな挑戦です。
いくつか分からない箇所があったとしても、「それ以外は分かった！」という成果を持って、次に進みましょう。

.. advanced:: 代入を使って変数自身を更新する結果になる別の書き方

    .. 累算代入文 https://docs.python.org/ja/3/reference/simple_stmts.html#augmented-assignment-statements
        「x += 1 のような累算代入式は、 x = x + 1 のように書き換えてほぼ同様の動作にできますが、厳密に等価にはなりません。」

    ``c = c + 2`` と同じ結果になる別の書き方を紹介します。

    .. code-block:: python

        >>> c = 5
        >>> c += 2
        >>> c
        7
    
    ``c += 2`` という書き方をしました。
    ``+=`` の部分は、演算子（ここでは ``+``）と代入のイコール ``=`` をつなげて書きます。
    **整数、浮動小数点数、文字列では、2つの書き方は同じ結果** となります。
    しかし厳密には動作が異なり、値の型によっては同じ結果にはなりません（この後登場する「リスト」という型の場合）。

    .. figure:: images/3/3-14_plus_assign.drawio.png
        :align: center
        :width: 40%

        ``c = c + 2`` と同じ結果になる

    先ほどの練習問題(1)〜(3)を ``+=`` のような演算子とイコールの形で書き直して練習してみましょう。

    (3)のように長い名前の場合は、この書き方だとスッキリしますね。

    .. code-block:: python

        >>> kakutodani = "さしもしらじな"
        >>> kakutodani += "もゆるおもひを"
        >>> kakutodani
        'さしもしらじなもゆるおもひを'

.. advanced:: 複数の変数に同時に代入する

    **複数の変数に一度に代入する** こともできます。

    .. code-block:: python

        >>> d, e = 3, 5

    これは、変数 ``d`` に ``3`` 、``e`` に ``5`` を同時に代入する書き方です。
    このプログラムを実行すると ``d`` も ``e`` も値を指すようになります。

    .. figure:: images/3/3-15_assign_multiple_variables.drawio.png
        :align: center
        :width: 40%

        2つの値に同時に名前を付ける

    .. code-block:: python

        >>> d
        3
        >>> e
        5
        >>> d * e
        15

    2つの変数に限らず、3つ以上の変数にも同時に代入できます。
    同時に代入する書き方のルールは以下のようになります：

    - ``=`` の左側に変数をカンマで区切って並べます（例： ``d, e``）
    - ``=`` の右側に値や変数、それらを使った式を、カンマで区切って並べます（例： ``3, 5``）

    重要な点は、``=`` の **左側と右側に並べる数は同じにする** ということです。
