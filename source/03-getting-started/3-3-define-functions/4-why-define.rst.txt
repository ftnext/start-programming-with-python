なぜ処理をまとめるのか
============================

引数を渡せる関数や、返り値のある関数の作り方が分かりましたね。
皆さんが知っている関数を組合せて、自分だけの関数を作れるようになっています！

プログラマーは、**処理のまとまりで関数を作り、それを使ってプログラムを書き** ます。
なぜ関数を作って処理をまとめるのかを考えてみましょう。

プログラムに階層構造を作る
----------------------------------------------------------------

関数を使って処理をまとめる理由は、プログラムに **階層構造** を持たせるためです。

:numref:`variables` 「:ref:`variables`」では、途中の結果を変数に代入しながら計算しましたね。
複雑な計算をするプログラムでは、変数に代入しながら書き続けると、100行、1000行を超えることもあるでしょう。
100行、1000行のプログラムは、何も工夫しないと、読んだり書いたりする **プログラマーにとってどんな処理なのかが分かりにくく** なります。

.. 粒度はIT用語 ref:https://e-words.jp/w/%E7%B2%92%E5%BA%A6.html
    -> 抽象度に変更してみる（『プリンシプル・オブ・プログラミング』では「抽象レベル」）

そこで、処理を抽象度ごとに **階層構造** を持たせた箇条書きにして考えます。

* 処理A

  * 文 a-1
  * 文 a-2
  *  :

* 処理B
* 処理C

**抽象的** に見れば、処理A、処理B、処理Cを順番にやっていると **概要をつかめます**。
このとき、処理のそれぞれに立ち入る必要はありません。
この処理A、B、Cが関数に相当します。
関数の名前から大枠を掴んだあとで、各処理を構成する文を具体的に見ていけばよくなります。

階層構造がなければ、プログラマーはすべてのプログラムを読んで頭の中で階層構造を組み立てなければなりません（それも毎回です！）。
関数を使って階層構造を作れば、プログラムの中で **必要な部分だけを読んで把握** できます。

.. ref: 『プリンシプル・オブ・プログラミング』2.5 SLAP「コードと書籍のアナロジー」

うまく階層構造が付けられた関数たちは、その中の一部を別の用途でも **再利用** できます。
関数にまとめることで、同じ処理を繰り返し書かずに済むわけです。
熟練したプログラマーほど、再利用のしやすさにこだわって関数を作ります。

.. 申し送り：辞書（スーパー大辞林）より：与えられた引数によって動作を変える
    触れられるところがあったら触れる
    ``flag=False`` のように渡すと処理が変わるような関数を想定していると思われる

.. advanced:: 関数の中でのみ使える変数

    ``aisatsu2`` 関数に渡した値は、**関数の処理でのみ有効な変数** ``namae`` に代入されます。
    ``aisatsu2("nikkie")`` という呼び出しは、変数 ``namae`` に ``"nikkie"`` を代入し、関数の続く処理を実行します。
    言い換えると、``aisatsu2`` 関数の外側に同名の ``namae`` 変数があったとしても、
    関数の内側の変数 ``namae`` と外側の ``namae`` は **区別される** ということです。

    .. code-block:: python

        >>> namae = "nikkie"
        >>> namae
        'nikkie'
        >>> def aisatsu2(namae):
        ...     print(f"{namae}さん、ごきげんよう")
        ...
        >>> aisatsu2("susumuis")
        susumuisさん、ごきげんよう
        >>> namae
        'nikkie'
    
    関数の内側の変数 ``namae`` に ``"susumuis"`` が代入されて処理が実行されましたが、
    関数の外側の変数 ``namae`` が指す値は変わっていませんね。

    同じ名前の変数 ``namae`` であっても、関数の中で使われているかいないかで別々のものとして扱います。
    この仕組みは、「変数の **スコープ**」と呼ばれ、プログラミング言語における重要な概念です。

    .. scopeの言及箇所
        - チュートリアル 4章 https://docs.python.org/ja/3/tutorial/controlflow.html#default-argument-values
        - 用語集 nested scope https://docs.python.org/ja/3/glossary.html
        - Q&A https://docs.python.org/ja/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value

.. advanced:: 引数の2通りの見方

    引数には、「実際の引数」と「形式的な引数」があります。
    プログラミングの用語で、それぞれ、「実引数（じつひきすう）」「仮引数（かりひきすう）」と呼びます。
    
    **実際の引数** （実引数）は、**関数を呼び出す立場** からの見方です。
    実際の引数は **具体的な値** です（例： ``4`` や ``"こんにちは"`` など）。
    実際の引数として指定した変数や式は、まず評価されて具体的な値になってから関数に渡ります。
    本文ではこちらの意味で引数という語を使ってきました。

    **形式的な引数** （仮引数）は、**関数を定義する立場** からの見方です。
    形式的な引数は、カッコの中に書いた **変数** で、関数の中でのみ有効です。
    関数の処理を書く上で、形式的にでも **渡される値を表す変数** があると書きやすいのです。
    形式的な引数には、関数呼び出しで渡された実際の引数が代入されます（代入されるまでは何も値を指していません）。
    形式的な引数が複数あるときは、同じだけ実際の引数を渡す必要があり、渡した順に対応して代入されます。

    .. ref: https://docs.python.org/ja/3/faq/programming.html#what-is-the-difference-between-arguments-and-parameters
    .. idea: https://twitter.com/ftnext/status/1165255702144638976?s=20
        - formal: 形式的な（仮引数）
        - actual: 実際の（実引数）
        「実引数'hoge'を仮引数wordとして渡す」という説明がしっくりくる
    
    以下は、形式的な引数を ``namae`` として ``aisatsu2`` 関数を定義し、
    実際の引数として変数 ``namae`` を渡す例です（指す値 ``"nikkie"`` が渡されます）。

    .. code-block:: python

        >>> def aisatsu2(namae):
        ...     print(f"{namae}さん、ごきげんよう")
        ...
        >>> namae = "nikkie"
        >>> aisatsu2(namae)
        nikkieさん、ごきげんよう

    形式的な引数と実際の引数が同じ名前だからうまく動いているのではありません。
    ``aisatsu2(namae)`` という呼び出しで、**実際の引数が形式的な引数に代入される** のでうまく動いています。
    実際の引数に指定する変数は何でもよく、 ``hissha`` のように変えられます。
    ``aisatsu2(hissha)`` という呼び出しで、問題なく動きます。

    .. 最後の例を確認するコード

        .. code-block:: python

            >>> hissha = "nikkie"
            >>> aisatsu2(hissha)
            nikkieさん、ごきげんよう

.. advanced:: 実際の引数には2種類ある

    .. tel_templateのPath.open(mode=..., encoding=...)などでキーワード引数が登場する前の頭出し
        理解するには、デフォルト値（オプション引数）も関わってくるが、ページの制約もあるので、網羅は目指さない
        例えば aisatsu3(mei="香織", sei="田中") は紹介しない

    .. https://docs.python.org/ja/3/glossary.html#term-argument
        「実引数には２種類あります」
    
    .. https://docs.python.org/ja/3/tutorial/controlflow.html#keyword-arguments
    
    ``aisatsu3`` 関数の呼び出しで実際の引数を指定する方法は、実はいくつかあります。

    .. code-block:: python

        >>> aisatsu3("田中", "香織")
        田中 香織さん、ごきげんよう
        >>> aisatsu3("田中", mei="香織")
        田中 香織さん、ごきげんよう
        >>> aisatsu3(sei="田中", mei="香織")
        田中 香織さん、ごきげんよう
    
    実際の引数には2種類あります。

    * **位置引数**：実際の引数だけを指定した場合
    * **キーワード引数**：``形式的な引数=実際の引数`` と指定した場合

    指定の仕方は異なりますが、渡される値は同じですから、**関数の動きは変わりません**。
    
    注意点として、キーワード引数を位置引数の前に使うことはできません（続く例のように処理系はエラーを出します）。
    **位置引数 → キーワード引数の順** という決まりがあります。

    .. https://docs.python.org/ja/3/library/doctest.html#what-about-exceptions
        Tracebackヘッダを作らずに、SKIPして対応（読者が見ないTracebackは紙面にもないほうがいいという判断）

    .. code-block:: python

        >>> aisatsu3(sei="田中", "香織")  # doctest: +SKIP
          File "<stdin>", line 1
        SyntaxError: positional argument follows keyword argument
