.. _define_functions:

============================
関数を作って処理をまとめよう
============================

プログラミング言語に用意された関数を使えるようになりましたね。
プログラミングでは、**関数を自分で作れます** ！
「関数を定義する」とも言います。

この章では、関数の作り方を紹介します。
対話モードに入力しながら読み進めてください。

関数を作ってみよう
============================

決まった挨拶を表示する関数
--------------------------------

「皆さん、ごきげんよう」と挨拶を表示する関数を作ってみましょう。

.. list-table:: 決まった挨拶を表示する関数
    :align: center

    * - 箱の名前
      - ``aisatsu1``
    * - 箱は何をするか
      - 「皆さん、ごきげんよう」と表示する
    * - 箱に入れるもの
      - なし
    * - 箱から出てくるもの
      - なし

関数は次のように書きます：

.. code-block:: python

    >>> def 関数の名前():  # ((defの後に半角スペースが1つ入ります))  # doctest: +SKIP
    ...     関数にまとめる文（の並び）  # ((先頭に半角スペース4つを忘れずに！))

.. https://docs.python.org/ja/3/tutorial/controlflow.html#defining-functions
    The statements that form the body of the function start at the next line, and must be indented.

処理系が関数の呼び出しを処理する中で、**関数にまとめた文が処理され** ます。

ここで作る関数の名前は ``aisatsu1`` とすでに決めています。
「皆さん、ごきげんよう」と表示したいので、``print`` 関数を使った式の出番ですね。

決まった挨拶を表示する関数を作る
--------------------------------

では、``aisatsu1`` 関数を作ります。
まず対話モードに ``def`` で始まる行を入力しましょう。

.. code-block:: python

    >>> def aisatsu1():  # doctest: +SKIP

``:`` （コロン）まで入力したらEnterキーを1回押します。

.. code-block:: python

    >>> def aisatsu1():  # doctest: +SKIP
    ...

2行目に入力できるようになりました。
``print`` 関数を使った式を書く行です。
すぐに書き始めるのではなく、**半角スペース4つを入れてから** 書いてください。

.. code-block:: python

    >>> def aisatsu1():  # doctest: +SKIP
    ...     print("皆さん、ごきげんよう")

2行目を入力した後、Enterキーを1回押すと、続く行が入力できるようになります。

.. code-block:: python

    >>> def aisatsu1():  # doctest: +SKIP
    ...     print("皆さん、ごきげんよう")
    ...

``aisatsu1`` 関数にまとめる処理は1行だけなので、何も入力せずにEnterキーを1回押してください。

.. code-block:: python

    >>> def aisatsu1():
    ...     print("皆さん、ごきげんよう")
    ...
    >>>

``>>>`` で始まる行が再び現れました。
これは、``aisatsu1`` 関数が作られたことを意味します。

作った ``aisatsu1`` 関数を呼び出してみましょう。
箱に入れるものはないので、呼び出すときはカッコ ``()`` を付けるだけです。

.. code-block:: python

    >>> aisatsu1()
    皆さん、ごきげんよう

``aisatsu1`` 関数にまとめた式 ``print("皆さん、ごきげんよう")`` が評価されていますね。

.. figure:: images/4/4-17-function_no_parameters.drawio.png
    :align: center
    :width: 60%

    決まった処理をする箱（何も入れずに呼び出せる）

関数を作るときのポイント
--------------------------------

関数を作るときは、2つのポイントがあります。

.. https://docs.python.org/ja/3/reference/compound_stmts.html#function-definitions

1. ``def`` で始める行
2. 処理の行は先頭に半角スペース4つを入れる

1つ目は、``def`` で始める行 ``def aisatsu1():`` です。

* ``aisatsu1`` という名前の関数を作ることを表します。
* 関数に入れるものがないことは、空のカッコ ``()`` で表します。
* 閉じたカッコの後のコロン ``:`` は忘れやすいので気を付けてください。

.. Pythonチュートリアルによると「definition」
    https://docs.python.org/ja/3/tutorial/controlflow.html#defining-functions

``def`` は、definition（定義）の短縮形です。

コロンを忘れると、処理系は ``SyntaxError`` を出します。
対話モードの履歴をさかのぼり、コロンを追加して解消できます。

2つ目は、関数にまとめる文の先頭に半角スペースを入れて **字下げ** したことです。
字下げは **インデント** とも呼ばれます。
関数にまとめる文が複数あるときは、どの文も同じだけインデントします。

.. スーパー大辞林によると、インデント＝字下げ

``def`` の行だけでは、関数にまとめる処理が定義されていません。
**インデントした行が関数の処理** になります。
``aisatsu1`` 関数の処理は、インデントした行の文（式） ``print("皆さん、ごきげんよう")`` です。

.. print関数は「式文」にある「プロシジャ」
    https://docs.python.org/ja/3/reference/simple_stmts.html#expression-statements

``aisatsu1`` 関数を呼び出すと、文 ``print("皆さん、ごきげんよう")`` が実行され、この式が評価されます。
関数呼び出しが処理系に評価されるときに、**インデントした行の文が実行されるようにまとめた** わけです。

.. 「関数の実行」の部分（シンボルテーブルの用意）
    https://docs.python.org/ja/3/tutorial/controlflow.html#defining-functions
    ユーザ定義関数「関数のコードブロックに引数リストが渡され、実行されます。」
    https://docs.python.org/ja/3/reference/expressions.html#calls

関数定義は文の1種です。
式自体や代入の文と異なり、関数定義という文の中に **別の文を含められる** のが特徴です。
別の文を含められることをコロンで示しています。
別の文はインデントを使って含めます。

.. https://docs.python.org/ja/3/reference/compound_stmts.html
    「各節のヘッダは一意に識別するキーワードで始まり、コロンで終わります。」
