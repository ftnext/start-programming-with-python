引数を渡せる関数を作ってみよう
========================================================

前節で作った関数 ``aisatsu1`` は、引数を渡せない関数でした。

次のように書くと、**引数を渡せる関数** を定義できます：

.. 引数は「実引数」の意味で導入している。書式の説明では、仮引数を変数と呼んでいる

.. code-block:: python

    >>> def 関数の名前(変数1, 変数2, ...):  # ((カッコの中に書きます))  # doctest: +SKIP
    ...     関数にまとめる文（の並び）  # ((変数を使った処理が書けます))

渡したい引数の数だけカッコの中に **変数** を書きます。
複数の引数を渡したい場合、カッコの中の変数はカンマ ``,`` で区切ります。

関数にまとめた処理には、カッコの中の変数が使えます。
関数呼び出しを評価するとき、この変数に **引数が代入** されます。

1つの引数、複数の引数の順で例を見ていきましょう。

引数に指定した人への挨拶を表示する関数
----------------------------------------------------------------

.. list-table:: 指定した人への挨拶を表示する関数
    :align: center

    * - 箱の名前
      - ``aisatsu2``
    * - 箱は何をするか
      - 「〇〇さん、ごきげんよう」と挨拶を表示する
    * - 箱に入れるもの
      - 文字列（「〇〇」の部分に入る人の名前）
    * - 箱から出てくるもの
      - なし

この関数に入れるものは1つですね。
関数のカッコの中の変数は ``namae`` にします。

「〇〇さん、ごきげんよう」の表示は、:numref:`input_output` 「:ref:`input_output`」の練習問題で扱いましたね。
``f`` を付けて始めた文字列については、「:ref:`input_output`」の発展（TODO：Xページ参照）を確認してください。

.. code-block:: python

    >>> def aisatsu2(namae):
    ...     print(f"{namae}さん、ごきげんよう")
    ...
    >>>

作った ``aisatsu2`` 関数を呼び出してみましょう。
本書の筆者の名前を渡します。

.. code-block:: python

    >>> aisatsu2("susumuis")
    susumuisさん、ごきげんよう
    >>> aisatsu2("nao_y")
    nao_yさん、ごきげんよう

渡した引数が ``namae`` に代入されて、``print(f"{namae}さん、ごきげんよう")`` が評価されていますね。
この仕組みを使って、関数の処理自体は **変数** を使って **抽象的** に書き、**引数** として渡した **具体的な値** について処理するわけです。

ぜひ引数として自分の名前を渡して ``aisatsu2`` 関数を呼び出してみてください。

.. figure:: images/4/4-16-create-aisatsu-function.drawio.png
    :align: center

    関数の定義と、できる関数との対応

引数に指定した姓と名を元に、挨拶を表示する関数
----------------------------------------------------------------

関数に入れるものを1つから2つに増やした例です。

.. list-table:: 姓と名を指定した人への挨拶を表示する関数
    :align: center

    * - 箱の名前
      - ``aisatsu3``
    * - 箱は何をするか
      - 「〇〇さん、ごきげんよう」と挨拶を表示する。「〇〇さん」は、「姓 名さん」とする
    * - 箱に入れるもの
      - 文字列2つ（1つ目が姓、2つ目が名）
    * - 箱から出てくるもの
      - なし

「〇〇さん」の部分は、姓と名の文字列を半角スペースでつなぐことにします。

.. code-block:: python

    >>> sei, mei = "田中", "香織"
    >>> sei + " " + mei
    '田中 香織'

半角スペースは、見やすくするために入れました。

ここまでで確認したことを元にすると、``aisatsu3`` 関数は次のようになります。

.. code-block:: python

    >>> def aisatsu3(sei, mei):
    ...     namae = sei + " " + mei
    ...     print(f"{namae}さん、ごきげんよう")
    ...
    >>>

複数行に渡る処理は、**すべての行を同じだけインデント** します。

呼び出してみましょう。
カンマで区切った変数と引数は、**同じ位置にあるものどうしが対応** して代入されます。

.. code-block:: python

    >>> aisatsu3("田中", "香織")
    田中 香織さん、ごきげんよう

``aisatsu3("田中", "香織")`` と呼び出すと、

* 最初の引数 ``"田中"`` が変数 ``sei`` に代入され、
* 2番めの引数 ``"香織"`` が変数 ``mei`` に代入されて、

関数の処理が実行されます。

**複数渡した引数には順番がある** ことがポイントです。
``aisatsu3("香織", "田中")`` と呼び出すと、``sei`` に代入されるのは ``"香織"`` になります。

.. column:: インデントに関するエラー

    関数を作るときのインデントは、初めのうちは間違えやすい箇所です。
    インデントがなかったり、揃っていなかったりすると、処理系は ``IndentationError`` を出します。
    見かけたら **インデントを忘れていないか、インデントが揃っているか**、確認しましょう。

    .. IndentationError: 「正しくないインデントに関する構文エラーの基底クラス」
        https://docs.python.org/ja/3/library/exceptions.html#IndentationError

    (1)インデントを忘れてしまった場合

    .. code-block:: python

        >>> def aisatsu2(namae):  # doctest: +SKIP
        ... print(f"{namae}さん、ごきげんよう")
          File "<stdin>", line 2
            print(f"{namae}さん、ごきげんよう")
                ^
        IndentationError: expected an indented block

    (2)インデントが少ない行がある場合

    .. code-block:: python

        >>> def aisatsu3(sei, mei):  # doctest: +SKIP
        ...     namae = sei + " " + mei
        ...   print(f"{namae}さん、ごきげんよう")  # ((インデントが少ない行))
          File "<stdin>", line 3
            print(f"{namae}さん、ごきげんよう")
                                      ^
        IndentationError: unindent does not match any outer indentation level

    (3)インデントが多い行がある場合

    .. code-block:: python

        >>> def aisatsu3(sei, mei):  # doctest: +SKIP
        ...     namae = sei + " " + mei
        ...       print(f"{namae}さん、ごきげんよう")  # ((インデントが多い行))
          File "<stdin>", line 3
            print(f"{namae}さん、ごきげんよう")
            ^
        IndentationError: unexpected indent

.. column:: 関数のインデント、タブか半角スペースか

    インデントについて「半角スペースを4つ入れましょう」と伝えました。
    実は、半角スペースの数は何個でもかまいません。
    インデントに使われる半角スペースの数が揃っていれば、処理系は ``IndentationError`` を出しません。

    また、Tab（タブ）キーを使ってもインデントできます。
    ですが、Pythonを書くプログラマーの間では、インデントに **半角スペース** を使うのが慣習です。
    
    .. ref: https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces
        > Spaces are the preferred indentation method.

    本書のおすすめは、**インデントに半角スペース4つを使う** ことです。
    この数は、Pythonを書くプログラマーの間で一般的です。
