============================
関数を作って処理をまとめよう
============================

.. Pythonに特化した内容なので、一時退避。なぜ関数にまとめるかで取り出せるかも

Pythonの場合は、組み込み関数を組合せて、まとまった処理をする関数を自作できます。
例えば、〇文字以内で文章をまとめるときに使う関数として、 ``len`` 関数で文字列の長さを数え、 ``print`` 関数で残り何文字列かを表示するといったものが考えられます。

例：定型の挨拶を表示する関数
--------------------------------

.. 定型の挨拶を表示する関数を最初の例としたので、引数や複数の処理に言及している行はカット

関数の中で使う変数は必須ではありません。
決まった文章を表示する関数は、変数を使わずに書けます（定義では空のカッコ ``():`` を使います）。
この箱は、何も入力しなくても機能を適用する箱です。

複数回 ``print`` 関数を使って、決まった文章を表示するような場合に、引数を使わない関数としてまとめるといったことが考えられます。

例：挨拶を表示する関数を作る
--------------------------------

.. 他のプログラミング言語の話題は出さない方針のためカット

関数を作るとき、Pythonでは ``def`` （define（定義する）の短縮形）を使います。
他のプログラミング言語では異なり、関数（function）は楽しみに満ちているからと ``fun`` を使うなど様々です。

.. Kotlinのドキュメントで見かけた記憶（原文がすぐには見つからず）

.. 他のプログラミング言語の話題は出さない方針のため以下もカット

この **字下げ** （インデント）がPythonで関数を書く際のポイントです。
（他のプログラミング言語ではインデントを使わずに、関数の中の処理を ``{}`` で囲みます）

.. input_output章で手を動かしているのでカット

「〇〇さん、ごきげんよう」という挨拶の表示には ``print`` 関数を使いましょう。
〇〇の部分は変数を使います。
変数の指す文字列（名前）と ``"さん、ごきげんよう"`` を連結して、``print`` 関数で表示すればよさそうですね。
変数に代入された値が変わったら、挨拶の中の名前も変わります。

.. code-block:: python

    >>> namae = "susumuis"
    >>> print(namae + "さん、ごきげんよう")
    susumuisさん、ごきげんよう
    >>> namae = "nao_y"
    >>> print(namae + "さん、ごきげんよう")
    nao_yさん、ごきげんよう

変数 ``namae`` を使った ``print(namae + "さん、ごきげんよう")`` というコードが ``aisatsu`` 関数でも使えそうですね。

.. 最初の関数は引数なしにした。引数ありの例は最初に書式説明したので、重複しないようにカット

関数名の後の ``(namae):`` は、この関数が1つだけ引数を持つことを表します。
``namae`` は ``aisatsu`` 関数の中で使える変数です。

例：挨拶を表示する関数の別バージョン
----------------------------------------------------------------

.. 次の章の順次の内容と思われるのでカット

2行ある ``print`` 関数が書いた順で実行されていますね。

.. column:: インデントに関するエラー

    .. （コメントだが）Pythonについての記述はカット

    .. インデントを揃えるPythonはきれい好きと言えるかもしれませんね。

.. column:: 関数のインデント、タブか半角スペースか

    .. エディタの設定に言及している。対話モードでは該当しないと思われるのでカット

    Tabキーを1度押すと、半角スペース4つ分に相当するインデントが入ります。

    .. 何個でもいいことと本書のオススメは伝えたので、脱線的な情報はカット

    ただし、Googleなどの企業では、所属するプログラマーがPythonのコードを書くルールとして、
    インデントは半角スペース2つを掲げています。
    半角スペース2つでインデントされたコードを読む機会もあるかもしれませんね。

プログラムに階層構造を作る
----------------------------------------------------------------

.. 長くなっているのでカットした

階層構造が付けられたコードは、言ってみれば、本と同じです。
本における最大の粒度は章で、章だけを見ることでどんな本かの大枠が分かります。
気になる章はその中の節だけを見たり、目ぼしい節にだけ目を通すことで、いま必要な情報を手に入れられます
（なお本は章、節、項と、関数の中で別の関数を使うような形で構造化されています）。

.. ref: 『プリンシプル・オブ・プログラミング』2.5 SLAP「コードと書籍のアナロジー」

.. 関数の章から3つ切り出したので、元のまとめは該当しない。まとめに入れられるかもしれないので一時退避
    各章の終わりのまとめは、今のところ書いていない

この章では、関数を学びました。
関数は箱で、入力した引数を処理し、結果の値を返すこともあります（返り値）。
Pythonに用意された組み込み関数を使ったり、自分で関数を作ってみたりしました。

プログラミングでやりたいことを達成しようとするときは、手順を階層構造で考えてから、関数を作っていきます。
この後は、関数の中で処理を制御する方法について学び、複雑な処理の関数を作れるようになりましょう。
