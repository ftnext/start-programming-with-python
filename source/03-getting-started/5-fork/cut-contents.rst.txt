============================
3大構造 二. 分岐
============================

.. 比較演算子を使わなくてもif文は書けるのでカット。比較演算子はここでの説明に必要という事情がある

プログラミング言語では、次の2つの要素で分岐を実現します。

1. 比較演算子
2. ``if`` 文

比較演算子
============================

例：年齢が20歳以上と言えるか
------------------------------------

.. 本文では変数を使った例だけにするのでカット（実用上も変数を使った式が中心なので、知りたい人だけが読む「発展」にする）

「25歳は20歳以上」を表す式は次のようになります。

.. code-block:: python

    >>> 25 >= 20  # doctest: +SKIP

Enterキーを押して、評価させましょう。

.. code-block:: python

    >>> 25 >= 20
    True

25歳は20歳以上と言えますよね。
人間の判定と同じように、処理系も ``True`` と評価しました。

続いて、「19歳は20歳以上」を表す式の場合です。

.. code-block:: python

    >>> 19 >= 20
    False

19歳は20歳以上とは言えませんね。
処理系も ``False`` と評価しました。

.. 変数を使った例をすぐ出すのでカット

``>=`` に慣れるために、25歳や19歳以外の数値で計算を試してみてください。

- 年齢が20歳のときは、20歳以上と言えます
- 年齢が17歳のとき、20歳以上とは言えません

変数と比較演算子
------------------------------------

.. 評価を使って書き直し、項目を立てなくなった

比較演算子の計算には変数を使うこともできます。
変数 ``nenrei`` の指す値が20以上かどうか計算してみましょう。

まずは20歳以上の場合です。

.. code-block:: python

    >>> nenrei = 25
    >>> nenrei >= 20
    True

続いて20歳以上ではない場合です。

.. code-block:: python

    >>> nenrei = 19
    >>> nenrei >= 20
    False

続く節で紹介する ``if`` 文では、変数の指す値で処理を分岐させるために、変数と比較演算子がよく使われます。

``if`` 文
============================

.. 説明を見直した結果、重複となった文章。バックアップとして残す

``if`` , ``elif``, ``else`` の開始位置は揃えます。

処理A, 処理B, 処理Cの行には **インデント** （字下げ）をして、開始位置を揃えます。

``if`` に続く条件（条件1）と、その後に続く処理（処理A）は必ず必要です。
それに対して ``elif`` や ``else`` に続く条件や処理は、なくても ``if`` 文としては動作します。

Python以外のプログラミング言語では、``elsif`` や ``elseif`` のように書くこともあります。

.. int関数の紹介をforkの練習問題まで遅らせるので、まだ確認できない

（順次の章で紹介した ``input`` 関数を使って年齢をコマンドラインから指定できるようにしてもいいですね）

.. コメントを書きこんだファイルとフローチャートを見比べるためにカット

.. figure:: images/7/7-1_simple_if.drawio.png
    :align: center

    条件が成り立つときだけ4行目を実行

.. figure:: images/7/7-2_simple_if_flow.drawio.png
    :align: center
    :width: 60%

    単純な ``if`` 文は、条件が成り立つときだけ処理が実行される

``if ... else ...``
------------------------------------

.. コメントを書きこんだファイルとフローチャートを見比べるためにカット

.. figure:: images/7/7-3_if_else.drawio.png
    :align: center

    インデントした部分（4行目と6行目）が分岐している

.. figure:: images/7/7-4_if_else_flow.drawio.png
    :align: center
    :width: 60%

    ``if`` と ``else`` で分岐した処理はどちらかしか実行されない

``if ... elif ... else ...``
------------------------------------

.. コメントを書きこんだファイルとフローチャートを見比べるためにカット

.. figure:: images/7/7-5_if_elif_else.drawio.png
    :align: center

    ``if`` , ``elif`` , ``else`` で3通りに分岐している

.. figure:: images/7/7-6_if_elif_else_flow.drawio.png
    :align: center

    ``if`` , ``elif`` , ``else`` で分岐した処理のいずれかが実行される

.. file_rename 以降で複数の elif は登場しないのでカット

.. column:: 複数の ``elif``

    ``if`` は1つだけ、``else`` は最大1つですが、``elif`` はいくらでも使うことができます。
    ``if`` で作った分岐に、``else`` や ``elif`` の分だけ、枝分かれが追加されます。

    ``if`` の条件が ``False`` のときに限り、上にある ``elif`` の条件から確認されます。

    - ``elif`` の条件が ``True`` であれば、その ``elif`` の処理が実行されます
    - ``elif`` の条件が ``False`` であれば、次の ``elif`` に進みます

    全ての ``elif`` の条件が ``False`` であれば、``else`` の処理が実行されます。

    2つ目の ``elif`` の処理が実行される例を用意しました。

    .. literalinclude:: codes/5-2/nenrei_kakunin_column1.py
        :language: python
        :caption: nenrei_kakunin.py
        :linenos:

    .. code-block:: shell

        $ python nenrei_kakunin.py
        年齢確認のプログラムを開始します
        お酒が買える年齢ではありません。成人まであと1年です
        プログラムを終了します

    ``nenrei`` に代入する値に応じて、実行される処理は以下のように変わります。

    .. list-table:: 2つの ``elif`` を保つ場合
        :align: center

        * - ``nenrei`` に代入する値
          - ``nenrei > 20`` （``if`` の条件）
          - ``nenrei == 20`` （1つ目の ``elif`` の条件）
          - ``nenrei == 19`` （2つ目の ``elif`` の条件）
          - 実行される処理
        * - ``25``
          - ``True``
          - 確認されない
          - 確認されない
          - 4行目（25歳はお酒が買える年齢です）
        * - ``20``
          - ``False``
          - ``True``
          - 確認されない
          - 6行目（成人おめでとう！お酒が買える年齢です）
        * - ``19``
          - ``False``
          - ``False``
          - ``True``
          - 8行目（お酒が買える年齢ではありません。成人まであと1年です）
        * - ``17``
          - ``False``
          - ``False``
          - ``False``
          - 10行目（17歳はお酒が買える年齢ではありません）

    .. figure:: images/7/7-7_multi_elif.drawio.png
        :align: center

        4通りの分岐

.. column:: ``if`` ... ``elif`` ...

    ``if`` 文で ``else`` は必須ではないので、``if`` と ``elif`` 1つだけでも ``if`` 文は動作します。

    .. literalinclude:: codes/5-2/nenrei_kakunin_column2.py
        :language: python
        :caption: nenrei_kakunin.py
        :linenos:

    - ``if`` の条件式が ``True`` であれば、``if`` に続く処理が実行されます
    - ``if`` の条件式が ``False`` のとき、``elif`` に続く条件を確認します

        - ``elif`` の条件式が ``True`` のときは、``elif`` に続く処理が実行されます
        - ``elif`` の条件式が ``False`` のときは、処理は実行されません（上記の例）

    .. code-block:: shell

        $ python nenrei_kakunin.py
        年齢確認のプログラムを開始します
        プログラムを終了します
    
    ``nenrei`` が指す値は ``19`` ですから、``nenrei > 20`` も ``nenrei == 20`` も ``False`` です。
    ``else`` があれば ``else`` に続く部分が実行されますが、``else`` がないので実行する部分がないというわけです。

    .. figure:: images/7/7-9_if_elif.drawio.png
        :align: center

        2通りに分岐（``else`` にあたる分岐がない）

順次と分岐の練習（計算アプリを作る）
================================================

.. int関数の話はforkの練習問題で初出にする（kakakuの例はカット）

.. column:: 数値を入力する場合は注意が必要

    入力された金額から、消費税込みの価格を計算して表示するプログラムを書く場合には注意が必要です。

    .. doctestを通すためのコード

        .. code-block:: python

            >>> kakaku = "500"

    .. code-block:: python

        >>> kakaku = input("価格を入力してください：")  # doctest: +SKIP
        価格を入力してください：500
        >>> kakaku * (1 + 0.1)
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        TypeError: can't multiply sequence by non-int of type 'float'

    処理系が出した ``TypeError`` は、文字列（``str``）と浮動小数点数（``float``）の掛け算ができないことを伝えています。
    入力した500（円）という金額は文字列として ``kakaku`` に代入されているために、そのままでは税込価格が計算できません
    （型を確認したければ ``type`` 関数を使ってみてください）。

    .. 略（int関数の紹介は本文に取り込んだ）

    ``int`` 関数で **文字列を整数に変換** することで、先ほどの ``TypeError`` は解消します。

    .. code-block:: python

        >>> kakaku = input("価格を入力してください：")  # doctest: +SKIP
        価格を入力してください：500
        >>> int(kakaku) * (1 + 0.1)
        550.0

練習問題1：間違えたことをフィードバックする計算アプリ
----------------------------------------------------------------

.. column:: 練習問題1 正解例

    .. コードを読めると思うので、カット

    間違えた旨は「残念」という言葉で、正解はf文字列を使って変数 ``seikai`` が指す値を文字列に入れて表示しています。

練習問題2：惜しい間違いをフィードバックする計算アプリ
----------------------------------------------------------------

.. 厳密な説明だが、練習問題を解くのに必須ではないのでカット

2つの数の差の絶対値は、2つの数のうち大きい方から小さい方を引いた値と一致します。

.. column:: 練習問題2 正解例

    .. 練習問題1で伝えているのでカット

    「惜しい間違いと表示する」には解釈の余地があるので、正解例と一言一句一致していなくても大丈夫です。

.. 練習問題の最後のまとめは不要

この章では、プログラムの3大構造の分岐を学びました。
Pythonでは比較演算子と ``if`` 文で分岐を実現します。
プログラムに書かれた処理は全て実行されるのではなく、枝分かれして実行されます。

.. バグはblackjack章で紹介。本文では型が違うので一致しないと述べた

.. column:: 絶対に正解できないバグに注意

    ``keisan.py`` で ``input`` 関数の返り値が代入される変数 ``nyuryoku`` は文字列です
    （「順次」の章で ``input`` を紹介したときに説明しましたね）。
    整数 ``132`` を指す変数 ``seikai`` と等しいことを確認するには、``int(nyuryoku)`` と整数に変換する必要があります。

    もし ``int`` 関数を忘れて、``==`` で比較するとどうなるでしょうか。
    対話モードで試してみます。

    .. code-block:: shell

        >>> "132" == 132
        False

    **データの型が文字列と整数とで異なる** ため、値として一致するとは言えません（``False`` が返ります）。
    つまり、``if`` の条件式が ``nyuryoku == seikai`` だと、データの型が揃わないために、
    正解を入力していても ``False`` となってしまいます。
    ``int`` 関数を忘れると絶対に正解できないということです。

    .. code-block:: shell

        >>> int("132") == 132  # int関数で整数に変換するので、一致すると言える
        True
    
    ここで紹介した ``int`` 関数忘れのように、プログラムが動作しない箇所のことを **バグ** と呼びます。
    バグはコードの書き誤りが原因ですが、コードを書く上で「ここはこう動く」と思い込んでしまっているために、
    ときにはバグの原因が皆目見当がつかないことがあります（そして、あまりにも些細なミスであることもしばしばです）。
    なお、私よりもはるかに経験・実績豊富な先輩プログラマーも解消できないバグで徹夜するような経験はつきものだそうです。
    バグに出会ったときは、**なにか思い違いをしていないか**、コードを一つ一つ確認しましょう。

    .. 上記は中嶋聡さんを想定 『なぜ、あなたの仕事は終わらないか』

    なお、手元の『スーパー大辞林』によると、コンピューターが登場したばかりの頃、回路に虫（バグ bug） の蛾が挟まって
    動作不良を起こしたことからバグというようになったそうです。
