``if`` 文
============================

分岐を実現する ``if`` 文の全体像は以下のようになります。

.. code-block:: python

    if 条件1:
        処理A
    elif 条件2:
        処理B
    else:
        処理C

if文も文の1種です。
関数定義と同じように、別の文を含められる文です（処理A〜Cの部分）。

.. 申し送り：構成洗い出し中に「if文は、条件が成り立つかどうかプログラミング言語に質問している」という案があった
    説明がくどくなっているというフィードバックを受けたので、この案は使わずに以下を書いている

年齢確認を例に、``if`` 文を構成する要素を少しずつ紹介します。
``if`` 文を使って、どのように処理を分岐させられるか、一歩ずつ見ていきましょう。

Atomで ``nenrei_kakunin.py`` というファイルを作ってください。

単純な ``if`` 文（``if`` のみ）
------------------------------------

最初に ``if`` 文の **最小限の構成要素** を紹介します。
条件に従って、**処理を実行する／しない** と分岐します。

.. code-block:: python

    if 式1:  # ((ifの後に半角スペースが1つ入ります。また、コロンを忘れずに！))
        処理A（文（の並び））  # ((先頭のインデントを忘れずに！))

``if`` で始まる行の ``式1`` は、**分岐の条件** です。
条件には、比較演算子を使った式が使われます。

- ``式1`` の評価結果が ``True`` となる（つまり、条件が成り立つ）とき、処理Aが実行されます
- ``式1`` の評価結果が ``False`` となる（条件が成り立たない）とき、処理Aは実行されません

最小限の ``if`` 文を :file:`nenrei_kakunin.py` に書いてみましょう。

.. literalinclude:: codes/5-2/nenrei_kakunin_step1_true.py
    :language: python
    :caption: nenrei_kakunin.py
    :linenos:

ファイルを実行して、処理系に ``if`` 文を実行させましょう。

.. code-block:: shell

    > python nenrei_kakunin.py

macOSでは :command:`python3` に読み替えが必要です。
詳しくは :numref:`in_order` の「:ref:`in_order__command_reference`」を確認してください。

入力したら :kbd:`Enter` キーを押しましょう。

.. code-block:: shell

    > python nenrei_kakunin.py
    年齢確認のプログラムを開始します
    25歳はお酒が買える年齢です
    プログラムを終了します

順次により、処理系はファイルの1文目から実行します。
変数 ``nenrei`` は ``25`` を指すので、 3行目の ``if`` 文の条件 ``nenrei >= 20`` は ``True`` ですね。
4行目にある ``print(f"{nenrei}歳はお酒が買える年齢です")`` が実行されました。

今度は、条件が ``False`` となる場合を見てみましょう。

.. literalinclude:: codes/5-2/nenrei_kakunin_step1_false.py
    :language: python
    :caption: nenrei_kakunin.py
    :emphasize-lines: 2
    :linenos:

ファイルの2行目で代入する値を変えました。

.. code-block:: shell

    > python nenrei_kakunin.py
    年齢確認のプログラムを開始します
    プログラムを終了します

4行目の処理は実行されていませんね。

.. 書き込むと余白がなくなってしまうので、同色の囲みで対応を示すようにした（TODO：紙面に白黒で出すとなるともっと工夫がいるかも）

.. figure:: images/7/7-11_simple_if_code_flow.drawio.png
    :align: center

    単純な ``if`` 文では、条件が ``True`` の場合のみ処理が実行される

``if`` だけを使うと、**条件が成り立つときだけ処理を実行する** という分岐が作れます。

``if ... else ...``
------------------------------------

続いて、``else`` （エルス）を追加してみましょう。
条件が **成り立つ時の処理、成り立たない時の処理と分岐** します。

.. code-block:: python

    if 式1:
        処理A（文（の並び））
    else:  # ((コロンを忘れずに！))
        処理C（文（の並び））  # ((先頭のインデントを忘れずに！))

処理系は、条件（``式1``）に従って、**処理Aか処理Cを実行** します。

- ``式1`` の評価結果が ``True`` のとき、処理Aが実行されます（*処理Cは実行されません*）
- ``式1`` の評価結果が ``False`` のとき、処理Cが実行されます（*処理Aは実行されません*）

``nenrei_kakunin.py`` に ``else`` を追加しましょう。

.. literalinclude:: codes/5-2/nenrei_kakunin_step2_false.py
    :language: python
    :caption: nenrei_kakunin.py
    :emphasize-lines: 5-6
    :linenos:

処理系に実行させます。

.. code-block:: shell

    > python nenrei_kakunin.py
    年齢確認のプログラムを開始します
    19歳はお酒が買える年齢ではありません
    プログラムを終了します

式 ``nenrei >= 20`` は ``False`` となるので、ファイルの6行目が実行されましたね！
4行目は実行されていません。

条件が ``True`` となる場合も見ておきましょう。

.. literalinclude:: codes/5-2/nenrei_kakunin_step2_true.py
    :language: python
    :caption: nenrei_kakunin.py
    :emphasize-lines: 2
    :linenos:

4行目が実行され、6行目は実行されません。

.. code-block:: shell

    > python nenrei_kakunin.py
    年齢確認のプログラムを開始します
    25歳はお酒が買える年齢です
    プログラムを終了します

.. figure:: images/7/7-12_if_else_code_flow.drawio.png
    :align: center

    ``if`` と ``else`` を使うと、条件が ``True`` の場合と ``False`` の場合とで処理が分岐する

``if`` だけを使うと、条件が成り立つときだけの分岐でした。
``if`` と ``else`` を使うと、条件が成り立たない時の分岐が加わります。
ただし、条件に応じて、**どちらかしか実行** されません。

.. column:: if 文で出されるエラー

    ``if`` 文を書き間違えたときに、処理系が出すエラーと解決方法について知っておきましょう。

    (1) ``if`` や ``else`` の行のコロン忘れ

    処理系は ``SyntaxError`` を出します。

    .. code-block:: shell

        > python nenrei_kakunin.py  # ((ifの行のコロンを忘れました))
          File "nenrei_kakunin.py", line 3
            if nenrei >= 20
                        ^
        SyntaxError: invalid syntax
    
    ``SyntaxError`` を見かけたら、**コロンを忘れていないか** 確認しましょう。

    (2) 処理の行のインデント忘れ

    (3) 処理を複数行書いた時にある行だけインデントが揃っていない

    (2)と(3)の場合、処理系は ``IndentationError`` を出します。
    :numref:`define_functions` 「:ref:`define_functions`」のコラム「インデントに関するエラー」と同じです。
    **インデントが揃っているか** 確認してください。

    .. 処理Aと処理Cとでインデントが揃っていなくても動くが、あえて触れない（この本ではインデントは半角スペース4個で揃える）

``if ... elif ... else ...``
------------------------------------

``elif`` （エルイフ）を追加すると、初めに示した構成要素が全て登場しますね。
``elif`` は **新たな条件と分岐先の処理を追加** します。

.. code-block:: python

    if 式1:
        処理A（文（の並び））
    elif 式2:  # ((elifの後の半角スペースが1つ入ります。また、コロンを忘れずに！))
        処理B（文（の並び））  # ((先頭のインデントを忘れずに！))
    else:
        処理C（文（の並び））

2つの条件（``式1`` と ``式2``）に従って、実行される処理はA, B, Cの **3つに分かれ、どれか1つが実行され** ます。

- ``式1`` の評価結果が ``True`` のとき、処理Aが実行されます（*処理B、Cは実行されません*）
- ``式1`` の評価結果が ``False`` のとき、``式2`` を **評価** します

    - ``式2`` の評価結果が ``True`` のとき、処理Bが実行されます（*処理Cや処理Aは実行されません*）
    - ``式2`` の評価結果が ``False`` のとき、処理Cが実行されます（*処理Bや処理Aは実行されません*）

``nenrei_kakunin.py`` に ``elif`` を追加しましょう。

.. literalinclude:: codes/5-2/nenrei_kakunin.py
    :language: python
    :caption: nenrei_kakunin.py
    :emphasize-lines: 2-3,5-6
    :linenos:

ファイル3行目の ``if`` に続く条件 ``nenrei > 20`` は ``False`` ですね。
ファイル5行目の ``elif`` に続く条件が評価されます。

ファイルを実行しましょう。

.. code-block:: shell

    > python nenrei_kakunin.py
    年齢確認のプログラムを開始します
    成人おめでとう！お酒が買える年齢です
    プログラムを終了します

``elif`` の条件 ``nenrei == 20`` は ``True`` ですから、6行目が実行されました。

``elif`` とは else if の縮まった形です。
else if なので、``if`` の条件が ``False`` の場合に **限り** 、``elif`` の条件が評価されます。

2行目で ``nenrei`` に代入する値を変えると、実行される処理が変わります。
書き換えて動きを確認してみてください。

.. list-table:: ``if ... elif ... else ...``
    :align: center

    * - ``nenrei`` に代入する値
      - ``nenrei > 20`` （条件1）
      - ``nenrei == 20`` （条件2）
      - 実行される処理
    * - ``25``
      - ``True``
      - 評価されない
      - 4行目（25歳はお酒が買える年齢です）
    * - ``19``
      - ``False``
      - ``False``
      - 8行目（19歳はお酒が買える年齢ではありません）

``if`` , ``elif`` , ``else`` を使うと、

- 条件1が成り立つ時
- 条件1が成り立たないが、条件2が成り立つ時
- 条件1も2も成り立たない時

と、処理が分岐するのです。

.. figure:: images/7/7-13_if_elif_else_code_flow.drawio.png
    :align: center

    条件1が ``True`` の場合、条件1が ``False`` かつ条件2が ``True`` の場合、条件1が ``False`` かつ条件2 が ``False`` の場合の3つに分岐する

なお、``elif`` を複数使って、4つ以上の分岐も表せます。

分岐はプログラムを **枝分かれ** させます。
``if`` 文でインデントされた処理それぞれは枝分かれしているように見えてきませんか。
この枝分かれのうち、**実行されるのはどれか1通りだけ** で、他は実行されません。

順次により、プログラムは1文目から実行されますが、文の並びに分岐を加えると枝分かれができます。
例えば、関数の処理の中に枝分かれを設けて、関数の引数に応じて実行する処理を変えることもできます。

.. advanced:: 式 ``nenrei >= 20`` の評価を詳しく

    .. variables章にて「変数を評価した結果は、変数が指す値になります。」と言っている (ref: 2-1)

    比較演算子と変数を使った式の評価は、``a * 6`` のような変数を使った式の評価（:numref:`variables`）と何も変わりません。
    変数がまず評価され、次に比較演算子が評価されます。

    例えば、``nenrei = 25`` と代入したとき、 ``nenrei >= 20`` は ``25 >= 20`` を評価することになります。
    25は20以上ですから、結果は ``True`` ですね。

    .. code-block:: python

        >>> 25 >= 20
        True

    比較演算子も演算子ですから、**変数、演算子の順** で評価されるのです。

.. advanced:: 前提条件を満たさない時に、関数を終了する

    .. blackjack の main 関数で早期リターンを使っているため、事前にコラムで紹介しておく

    ``if`` 文 と ``return`` を関数で組合せると、**前提条件を満たさない時に、関数を終了** できます。

    .. code-block:: python

        def souki_shuryo(nenrei):
            if nenrei < 20:  # ((nenreiは20歳以上を前提にしている))
                print("未成年なので処理を終了します")
                return
            成人の場合の処理

    ``return`` 文が実行されると、関数の中の **処理の実行はそこで終わり** ます。
    続く行があっても実行されません。

    そして、``return`` 文は **式がなくても作用** します。

    プログラマーの間では、このテクニックを「早期リターン」と呼びます。
    早期リターンした後は前提条件を満たす場合の処理だけに注力できるため、プログラムが読み／書きしやすくなります。

.. advanced:: プログラムの構造を掴む図、フローチャート

    本節では、プログラムと図を左右に見比べられるように掲載しました。
    これはプログラムを実行しなくても見ただけで、分岐の構造をイメージできるようになってもらいたいからです。

    右側に出した図は「フローチャート」と呼ばれます。
    フローチャートの記号の意味は :numref:`development` の「:ref:`development__design`」を参照してください。
