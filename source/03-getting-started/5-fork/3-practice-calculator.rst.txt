順次と分岐の練習（計算アプリを作る）
================================================

練習として、順次と分岐を使って簡単なプログラム（計算アプリ）を作ってみましょう。

計算アプリを実行すると、計算式が表示され、暗算した答えを入力するように求められます。
アプリは入力された答えを採点し、正解したかどうかを表示します。

これまで学んだ以下を使って計算アプリを実現できます。

- 順次
- 分岐（比較演算子と ``if`` 文）
- 入力の扱い（``input`` 関数）

新しいファイル ``keisan.py`` に作っていきましょう。

例題：正解した場合だけ表示する計算アプリ
----------------------------------------------------------------

一歩一歩進めます。
まずは **正解した場合だけ「正解です！」と表示する** ように作りましょう。

コマンドラインからの入力を受け取る部分は次のようになりますね。

.. literalinclude:: codes/5-3/keisan_step0.py
    :language: python
    :caption: keisan.py
    :linenos:

実行すると、コマンドラインから答えを入力できます。

.. code-block:: shell

    > python keisan.py
    計算アプリです
    11×12は？ 132

今の計算アプリは、何か値を入力すると終了します。
では、入力された答えが正解の場合だけ「正解です！」と表示するように処理を足してみましょう。

- 正解がいくつか計算しましょう
- 入力が正解と一致するかどうかで処理を分岐させるとよさそうですね

.. answer:: 想定解

    .. literalinclude:: codes/5-3/keisan_step1.py
        :language: python
        :caption: keisan.py
        :emphasize-lines: 4-5
        :linenos:

    4行目の ``if`` の条件で、入力と正解が一致するか比較しています。
    ``nyuryoku`` は **数字が並んだ文字列** になっているので、整数に変えるために ``int(nyuryoku)`` とします（補足のコラム参照）。
    入力と正解が一致するとき、「正解です！」と表示されます。

    .. code-block:: shell

        > python keisan.py
        計算アプリです
        11×12は？ 132
        正解です！

    「正解です！」と表示する計算アプリは作れました！

.. advanced:: 数字の入力には要注意

    ``input`` 関数の返り値は、**数字を入力したときも文字列** です。
    対話モードで確認しましょう。

    .. doctestを通すためのコード

        .. code-block:: python

            >>> nyuryoku = "132"

    .. code-block:: python

        >>> nyuryoku = input("11×12は？ ")  # doctest: +SKIP
        11×12は？ 132
        >>> type(nyuryoku)
        <class 'str'>
        >>> nyuryoku
        '132'

    ``seikai`` と ``nyuryoku`` はそれぞれ数値、文字列と **型が違う** ので ``==`` で比較しても **一致しません**。

    .. code-block:: python

        >>> seikai = 11 * 12
        >>> nyuryoku == seikai
        False

    入力された数字を整数として扱いたいですよね。
    ``'132'`` のように **数字が並んだ文字列を整数に変換する** には、``int`` 関数を使います。

    .. https://docs.python.org/ja/3/library/functions.html#int

    .. list-table:: 文字列を整数に変換する関数
        :align: center

        * - 箱の名前
          - ``int``
        * - 箱は何をするか
          - 数字の並んだ文字列を整数に変換する
        * - 箱に入れるもの
          - 文字列（数字の並びを想定）
        * - 箱から出てくるもの
          - 整数

    .. https://docs.python.org/ja/3/library/functions.html#int
        ``int("500.0")`` は ValueError: invalid literal for int() with base 10: '500.0'
        int(500.25) で 500 が返るが、ここで必要ではないので紹介していない

    .. code-block:: python

        >>> int("132")
        132

    入力された文字列を ``int`` 関数で整数に変換することで、正解と比較できるようになります。

    .. code-block:: python

        >>> int(nyuryoku) == seikai
        True

練習問題1：間違えたことをフィードバックする計算アプリ
----------------------------------------------------------------

今の計算アプリは、間違えたときに何も表示されません。

.. code-block:: shell

    > python keisan.py
    計算アプリです
    11×12は？ 122

**間違えた時に間違えた旨と正解を表示する** ように変更してみましょう。

*ヒント*：間違えたときの分岐を追加しましょう

.. answer:: 正解例

    正解例と完全に一致していなくても、``keisan.py`` を実行して同じ動きをしていれば正解です。

    .. literalinclude:: codes/5-3/keisan_step2.py
        :language: python
        :caption: keisan.py
        :emphasize-lines: 6-7
        :linenos:

    *入力が正解と一致しないとき* が間違えたときですね。
    ``else`` を使って、間違えたときの分岐を追加しました。

    「間違えた旨と正解を表示」には解釈の余地があるので、表示する文章が一致していなくてもかまいません。
    重要なのは、``else`` を追加するという点です。

    .. code-block:: shell

        > python keisan.py
        計算アプリです
        11×12は？ 122
        残念>_< 正解は132でした
    
    紙面では省略しますが、正解の場合の動作が変わっていないことも確認しましょう。

練習問題2：惜しい間違いをフィードバックする計算アプリ
----------------------------------------------------------------

間違っていても、正解との差が小さい場合には、惜しい間違いと表示するようにしましょう。
正解との差が小さいというのは、**入力された値と正解が1だけ違う** （すなわち入力が131または133）場合とします。

入力された値と正解がいくつ違うかを計算するのには ``abs`` 関数が使えます。

.. https://docs.python.org/ja/3/library/functions.html#abs

.. list-table:: 絶対値を返す関数
    :align: center

    * - 箱の名前
      - ``abs``
    * - 箱は何をするか
      - 引数に与えた数の絶対値を返す
    * - 箱に入れるもの
      - 整数、または浮動小数点数
    * - 箱から出てくるもの
      - 整数、または浮動小数点数

絶対値という語が耳慣れない方は、

- 正の数または0の場合はそのまま返し
- 負の数の場合は、マイナスを付けて返す

と考えてください。
例えば、:math:`-3` は :math:`-(-3)` より :math:`3` を返します。

対話モードで ``abs`` 関数に慣れましょう。

.. code-block:: python

    >>> abs(2)
    2
    >>> abs(-3)
    3

式を渡すことで、**2つの数の差の絶対値** を求められます。

.. code-block:: shell

    >>> abs(4 - 2)
    2
    >>> abs(3 - 6)
    3

これを計算アプリで使いましょう。
**入力された値と正解との差の絶対値が1と等しい** とき、惜しい間違いと判定します。

``keisan.py`` を変更してみてください。

*ヒント*：間違えたとき（入力と正解が一致しないとき）に、条件を追加します

.. answer:: 正解例

    .. literalinclude:: codes/5-3/keisan.py
        :language: python
        :caption: keisan.py
        :emphasize-lines: 6-7
        :linenos:

    6行目に追加した ``elif`` により、``seikai`` と ``int(nyuryoku)`` の差の絶対値が1と等しいときに、
    惜しい間違いである旨が表示されます。

    .. code-block:: shell

        > python keisan.py
        計算アプリです
        11×12は？ 133
        惜しい！正解は132でした
    
    よさそうですね！
    紙面では省略しますが、正解の場合や惜しくない間違いの場合の動作に変更がないことも確認しましょう。

.. advanced:: 主な比較演算子

    .. コミュニティレビューより、is, is not, in, not inも比較演算子
        https://docs.python.org/ja/3/library/stdtypes.html#comparisons
        https://docs.python.org/ja/3/reference/expressions.html#comparisons

    主な比較演算子を紹介します。

    .. list-table:: 主な比較演算子 一覧
        :align: center

        * - 比較演算子
          - 比較内容
          - 数式では
        * - ``>=``
          - 以上
          - :math:`\leqq`
        * - ``<=``
          - 以下
          - :math:`\geqq`
        * - ``>``
          - より大きい
          - :math:`>`
        * - ``<``
          - より小さい
          - :math:`<`
        * - ``==``
          - 等しい
          - :math:`=`
        * - ``!=``
          - 等しくない
          - :math:`\neq`

    ここで初めて登場した比較演算子について、対話モードで確認しましょう。

    .. code-block:: python

        >>> nenrei = 29
        >>> nenrei <= 25  # ((29は25以下とは言えません))
        False
        >>> nenrei < 30  # ((29は30より小さいです))
        True
        >>> nenrei != 35  # ((29は35と等しくないと言えます))
        True

.. advanced:: 文字列も比較できる

    数値だけでなく文字列も、比較演算子を用いて比較できます。
    文字列の比較では、「等しい」 ``==`` や「等しくない」 ``!=`` がよく使われます。

    .. list-table:: 文字列によく使う比較演算子
        :align: center
    
        * - 比較演算子
          - 比較内容
        * - ``==``
          - 文字列どうしが一致（同じ）
        * - ``!=``
          - 文字列どうしが一致しない（異なる）

    .. code-block:: python

        >>> namae = "nikkie"
        >>> namae == "nikkie"  # ((namaeが指す文字列は"nikkie"と一致しますね))
        True
        >>> namae != "susumuis"  # ((namaeが指す文字列は"susumuis"と一致しませんね))
        True

.. advanced:: 演算子の種類

    :numref:`value_integer_string` 「:ref:`value_integer_string`」で ``+`` や ``*`` などの演算子を紹介しました。
    四則演算に使う演算子は「算術演算子」と呼ばれます。
    演算子には、比較演算子、算術演算子といった種類があるのです。

.. advanced:: 真理値に使う演算子

    .. tel_templateの ``not is_valid_tel`` や、developmentの ``not is_busted()`` でnotを初見にしないよう頭出しする

    .. https://docs.python.org/ja/3/reference/expressions.html#boolean-operations

    ``True`` と ``False`` は **反対の関係** にあります。

    - 「``True`` でない」は ``False``
    - 「``False`` でない」は ``True``

    「**でない**」は ``not`` という演算子を使って、式で表せます。

    .. code-block:: python

        >>> not True
        False
        >>> not False
        True
    
    ``not`` のように真理値に使う演算子を「ブール演算子」と呼びます。
